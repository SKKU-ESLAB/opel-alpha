!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BMP_BITFIELDS	grfmt_bmp.hpp	/^    BMP_BITFIELDS = 3$/;"	e	enum:cv::BmpCompression
BMP_RGB	grfmt_bmp.hpp	/^    BMP_RGB = 0,$/;"	e	enum:cv::BmpCompression
BMP_RLE4	grfmt_bmp.hpp	/^    BMP_RLE4 = 2,$/;"	e	enum:cv::BmpCompression
BMP_RLE8	grfmt_bmp.hpp	/^    BMP_RLE8 = 1,$/;"	e	enum:cv::BmpCompression
BSWAP	bitstrm.hpp	/^inline unsigned BSWAP(unsigned v)$/;"	f	namespace:cv
BS_DEF_BLOCK_SIZE	bitstrm.cpp	/^const int BS_DEF_BLOCK_SIZE = 1<<15;$/;"	m	namespace:cv	file:
BaseImageDecoder	grfmt_base.cpp	/^BaseImageDecoder::BaseImageDecoder()$/;"	f	class:cv::BaseImageDecoder
BaseImageDecoder	grfmt_base.hpp	/^class BaseImageDecoder$/;"	c	namespace:cv
BaseImageEncoder	grfmt_base.cpp	/^BaseImageEncoder::BaseImageEncoder()$/;"	f	class:cv::BaseImageEncoder
BaseImageEncoder	grfmt_base.hpp	/^class BaseImageEncoder$/;"	c	namespace:cv
BmpCompression	grfmt_bmp.hpp	/^enum BmpCompression$/;"	g	namespace:cv
BmpDecoder	grfmt_bmp.cpp	/^BmpDecoder::BmpDecoder()$/;"	f	class:cv::BmpDecoder
BmpDecoder	grfmt_bmp.hpp	/^class BmpDecoder : public BaseImageDecoder$/;"	c	namespace:cv
BmpEncoder	grfmt_bmp.cpp	/^BmpEncoder::BmpEncoder()$/;"	f	class:cv::BmpEncoder
BmpEncoder	grfmt_bmp.hpp	/^class BmpEncoder : public BaseImageEncoder$/;"	c	namespace:cv
ChromaToBGR	grfmt_exr.cpp	/^void  ExrDecoder::ChromaToBGR( float *data, int numlines, int step )$/;"	f	class:cv::ExrDecoder
CvtPaletteToGray	utils.cpp	/^void CvtPaletteToGray( const PaletteEntry* palette, uchar* grayPalette, int entries )$/;"	f
EXIT	precomp.hpp	78;"	d
ExrDecoder	grfmt_exr.cpp	/^ExrDecoder::ExrDecoder()$/;"	f	class:cv::ExrDecoder
ExrDecoder	grfmt_exr.hpp	/^class ExrDecoder : public BaseImageDecoder$/;"	c	namespace:cv
ExrEncoder	grfmt_exr.cpp	/^ExrEncoder::ExrEncoder()$/;"	f	class:cv::ExrEncoder
ExrEncoder	grfmt_exr.hpp	/^class ExrEncoder : public BaseImageEncoder$/;"	c	namespace:cv
FALSE	grfmt_jpeg.cpp	71;"	d	file:
FAR	grfmt_jpeg.cpp	63;"	d	file:
FLOAT	grfmt_exr.cpp	69;"	d	file:
FLOAT	grfmt_exr.cpp	70;"	d	file:
FillColorRow1	utils.cpp	/^uchar* FillColorRow1( uchar* data, uchar* indices, int len, PaletteEntry* palette )$/;"	f
FillColorRow4	utils.cpp	/^uchar* FillColorRow4( uchar* data, uchar* indices, int len, PaletteEntry* palette )$/;"	f
FillColorRow8	utils.cpp	/^uchar* FillColorRow8( uchar* data, uchar* indices, int len, PaletteEntry* palette )$/;"	f
FillGrayPalette	utils.cpp	/^void  FillGrayPalette( PaletteEntry* palette, int bpp, bool negative )$/;"	f
FillGrayRow1	utils.cpp	/^uchar* FillGrayRow1( uchar* data, uchar* indices, int len, uchar* palette )$/;"	f
FillGrayRow4	utils.cpp	/^uchar* FillGrayRow4( uchar* data, uchar* indices, int len, uchar* palette )$/;"	f
FillGrayRow8	utils.cpp	/^uchar* FillGrayRow8( uchar* data, uchar* indices, int len, uchar* palette )$/;"	f
FillUniColor	utils.cpp	/^uchar* FillUniColor( uchar* data, uchar*& line_end,$/;"	f
FillUniGray	utils.cpp	/^uchar* FillUniGray( uchar* data, uchar*& line_end,$/;"	f
GdalDecoder	grfmt_gdal.cpp	/^GdalDecoder::GdalDecoder(){$/;"	f	class:cv::GdalDecoder
GdalDecoder	grfmt_gdal.hpp	/^class GdalDecoder : public BaseImageDecoder{$/;"	c	namespace:cv
GrFmtSilentTIFFErrorHandler	grfmt_tiff.cpp	/^static void GrFmtSilentTIFFErrorHandler( const char*, const char*, va_list ) {}$/;"	f	namespace:cv
HALF	grfmt_exr.cpp	67;"	d	file:
HALF	grfmt_exr.cpp	68;"	d	file:
HAVE_STDINT_H	grfmt_jpeg2000.cpp	53;"	d	file:
HDR_NONE	grfmt_hdr.hpp	/^    HDR_NONE = 0,$/;"	e	enum:cv::HdrCompression
HDR_RLE	grfmt_hdr.hpp	/^    HDR_RLE = 1$/;"	e	enum:cv::HdrCompression
HdrCompression	grfmt_hdr.hpp	/^enum HdrCompression$/;"	g	namespace:cv
HdrDecoder	grfmt_hdr.cpp	/^HdrDecoder::HdrDecoder()$/;"	f	class:cv::HdrDecoder
HdrDecoder	grfmt_hdr.hpp	/^class HdrDecoder : public BaseImageDecoder$/;"	c	namespace:cv
HdrEncoder	grfmt_hdr.cpp	/^HdrEncoder::HdrEncoder()$/;"	f	class:cv::HdrEncoder
HdrEncoder	grfmt_hdr.hpp	/^class HdrEncoder : public BaseImageEncoder$/;"	c	namespace:cv
INLINE	rgbe.cpp	69;"	d	file:
ImageCodecInitializer	loadsave.cpp	/^    ImageCodecInitializer()$/;"	f	struct:cv::ImageCodecInitializer
ImageCodecInitializer	loadsave.cpp	/^struct ImageCodecInitializer$/;"	s	namespace:cv	file:
ImageDecoder	grfmt_base.hpp	/^typedef Ptr<BaseImageDecoder> ImageDecoder;$/;"	t	namespace:cv
ImageEncoder	grfmt_base.hpp	/^typedef Ptr<BaseImageEncoder> ImageEncoder;$/;"	t	namespace:cv
IsColorPalette	utils.cpp	/^bool  IsColorPalette( PaletteEntry* palette, int bpp )$/;"	f
JAS_WIN_MSVC_BUILD	grfmt_jpeg2000.cpp	51;"	d	file:
JasperInitializer	grfmt_jpeg2000.cpp	/^    JasperInitializer() { jas_init(); }$/;"	f	struct:cv::JasperInitializer
JasperInitializer	grfmt_jpeg2000.cpp	/^struct JasperInitializer$/;"	s	namespace:cv	file:
Jpeg2KDecoder	grfmt_jpeg2000.cpp	/^Jpeg2KDecoder::Jpeg2KDecoder()$/;"	f	class:cv::Jpeg2KDecoder
Jpeg2KDecoder	grfmt_jpeg2000.hpp	/^class Jpeg2KDecoder : public BaseImageDecoder$/;"	c	namespace:cv
Jpeg2KEncoder	grfmt_jpeg2000.cpp	/^Jpeg2KEncoder::Jpeg2KEncoder()$/;"	f	class:cv::Jpeg2KEncoder
Jpeg2KEncoder	grfmt_jpeg2000.hpp	/^class Jpeg2KEncoder : public BaseImageEncoder$/;"	c	namespace:cv
JpegDecoder	grfmt_jpeg.cpp	/^JpegDecoder::JpegDecoder()$/;"	f	class:cv::JpegDecoder
JpegDecoder	grfmt_jpeg.hpp	/^class JpegDecoder : public BaseImageDecoder$/;"	c	namespace:cv
JpegDestination	grfmt_jpeg.cpp	/^struct JpegDestination$/;"	s	namespace:cv	file:
JpegEncoder	grfmt_jpeg.cpp	/^JpegEncoder::JpegEncoder()$/;"	f	class:cv::JpegEncoder
JpegEncoder	grfmt_jpeg.hpp	/^class JpegEncoder : public BaseImageEncoder$/;"	c	namespace:cv
JpegErrorMgr	grfmt_jpeg.cpp	/^struct JpegErrorMgr$/;"	s	namespace:cv	file:
JpegSource	grfmt_jpeg.cpp	/^struct JpegSource$/;"	s	namespace:cv	file:
JpegState	grfmt_jpeg.cpp	/^struct JpegState$/;"	s	namespace:cv	file:
LOAD_CVMAT	loadsave.cpp	/^enum { LOAD_CVMAT=0, LOAD_IMAGE=1, LOAD_MAT=2 };$/;"	e	enum:cv::__anon1	file:
LOAD_IMAGE	loadsave.cpp	/^enum { LOAD_CVMAT=0, LOAD_IMAGE=1, LOAD_MAT=2 };$/;"	e	enum:cv::__anon1	file:
LOAD_MAT	loadsave.cpp	/^enum { LOAD_CVMAT=0, LOAD_IMAGE=1, LOAD_MAT=2 };$/;"	e	enum:cv::__anon1	file:
MINRUNLENGTH	rgbe.cpp	269;"	d	file:
MINRUNLENGTH	rgbe.cpp	316;"	d	file:
PaletteEntry	utils.hpp	/^struct PaletteEntry$/;"	s
PngDecoder	grfmt_png.cpp	/^PngDecoder::PngDecoder()$/;"	f	class:cv::PngDecoder
PngDecoder	grfmt_png.hpp	/^class PngDecoder : public BaseImageDecoder$/;"	c	namespace:cv
PngEncoder	grfmt_png.cpp	/^PngEncoder::PngEncoder()$/;"	f	class:cv::PngEncoder
PngEncoder	grfmt_png.hpp	/^class PngEncoder : public BaseImageEncoder$/;"	c	namespace:cv
PxMDecoder	grfmt_pxm.cpp	/^PxMDecoder::PxMDecoder()$/;"	f	class:cv::PxMDecoder
PxMDecoder	grfmt_pxm.hpp	/^class PxMDecoder : public BaseImageDecoder$/;"	c	namespace:cv
PxMEncoder	grfmt_pxm.cpp	/^PxMEncoder::PxMEncoder()$/;"	f	class:cv::PxMEncoder
PxMEncoder	grfmt_pxm.hpp	/^class PxMEncoder : public BaseImageEncoder$/;"	c	namespace:cv
RAS_BYTE_ENCODED	grfmt_sunras.hpp	/^    RAS_BYTE_ENCODED = 2, \/* RLE encoded *\/$/;"	e	enum:cv::SunRasType
RAS_FORMAT_RGB	grfmt_sunras.hpp	/^    RAS_FORMAT_RGB = 3    \/* RGB instead of BGR *\/$/;"	e	enum:cv::SunRasType
RAS_OLD	grfmt_sunras.hpp	/^    RAS_OLD = 0,$/;"	e	enum:cv::SunRasType
RAS_STANDARD	grfmt_sunras.hpp	/^    RAS_STANDARD = 1,$/;"	e	enum:cv::SunRasType
RBS_BAD_HEADER	bitstrm.hpp	/^    RBS_BAD_HEADER=-125 \/\/ invalid header$/;"	e	enum:cv::__anon3
RBS_HUFF_FORB	bitstrm.hpp	/^    RBS_HUFF_FORB=2047,  \/\/ forrbidden huffman code "value"$/;"	e	enum:cv::__anon3
RBS_THROW_EOS	bitstrm.hpp	/^    RBS_THROW_EOS=-123,  \/\/ <end of stream> exception code$/;"	e	enum:cv::__anon3
RBS_THROW_FORB	bitstrm.hpp	/^    RBS_THROW_FORB=-124,  \/\/ <forrbidden huffman code> exception code$/;"	e	enum:cv::__anon3
RBaseStream	bitstrm.cpp	/^RBaseStream::RBaseStream()$/;"	f	class:cv::RBaseStream
RBaseStream	bitstrm.hpp	/^class RBaseStream$/;"	c	namespace:cv
RGBE_DATA_BLUE	rgbe.cpp	74;"	d	file:
RGBE_DATA_GREEN	rgbe.cpp	73;"	d	file:
RGBE_DATA_RED	rgbe.cpp	72;"	d	file:
RGBE_DATA_SIZE	rgbe.cpp	76;"	d	file:
RGBE_RETURN_FAILURE	rgbe.hpp	70;"	d
RGBE_RETURN_SUCCESS	rgbe.hpp	69;"	d
RGBE_ReadHeader	rgbe.cpp	/^int RGBE_ReadHeader(FILE *fp, int *width, int *height, rgbe_header_info *info)$/;"	f
RGBE_ReadPixels	rgbe.cpp	/^int RGBE_ReadPixels(FILE *fp, float *data, int numpixels)$/;"	f
RGBE_ReadPixels_RLE	rgbe.cpp	/^int RGBE_ReadPixels_RLE(FILE *fp, float *data, int scanline_width,$/;"	f
RGBE_VALID_EXPOSURE	rgbe.hpp	66;"	d
RGBE_VALID_GAMMA	rgbe.hpp	65;"	d
RGBE_VALID_PROGRAMTYPE	rgbe.hpp	64;"	d
RGBE_WriteBytes_RLE	rgbe.cpp	/^static int RGBE_WriteBytes_RLE(FILE *fp, unsigned char *data, int numbytes)$/;"	f	file:
RGBE_WriteHeader	rgbe.cpp	/^int RGBE_WriteHeader(FILE *fp, int width, int height, rgbe_header_info *info)$/;"	f
RGBE_WritePixels	rgbe.cpp	/^int RGBE_WritePixels(FILE *fp, float *data, int numpixels)$/;"	f
RGBE_WritePixels_RLE	rgbe.cpp	/^int RGBE_WritePixels_RLE(FILE *fp, float *data, int scanline_width,$/;"	f
RGBToGray	grfmt_exr.cpp	/^void  ExrDecoder::RGBToGray( float *in, float *out )$/;"	f	class:cv::ExrDecoder
RLByteStream	bitstrm.hpp	/^class RLByteStream : public RBaseStream$/;"	c	namespace:cv
RMByteStream	bitstrm.hpp	/^class RMByteStream : public RLByteStream$/;"	c	namespace:cv
RMT_EQUAL_RGB	grfmt_sunras.hpp	/^    RMT_EQUAL_RGB = 1   \/* paletted image *\/$/;"	e	enum:cv::SunRasMapType
RMT_NONE	grfmt_sunras.hpp	/^    RMT_NONE = 0,       \/* direct color encoding *\/$/;"	e	enum:cv::SunRasMapType
ReadNumber	grfmt_pxm.cpp	/^static int ReadNumber( RLByteStream& strm, int maxdigits )$/;"	f	namespace:cv
SCALE	utils.cpp	45;"	d	file:
SunRasMapType	grfmt_sunras.hpp	/^enum SunRasMapType$/;"	g	namespace:cv
SunRasType	grfmt_sunras.hpp	/^enum SunRasType$/;"	g	namespace:cv
SunRasterDecoder	grfmt_sunras.cpp	/^SunRasterDecoder::SunRasterDecoder()$/;"	f	class:cv::SunRasterDecoder
SunRasterDecoder	grfmt_sunras.hpp	/^class SunRasterDecoder : public BaseImageDecoder$/;"	c	namespace:cv
SunRasterEncoder	grfmt_sunras.cpp	/^SunRasterEncoder::SunRasterEncoder()$/;"	f	class:cv::SunRasterEncoder
SunRasterEncoder	grfmt_sunras.hpp	/^class SunRasterEncoder : public BaseImageEncoder$/;"	c	namespace:cv
TIFF_HUFFMAN	grfmt_tiff.hpp	/^    TIFF_HUFFMAN = 2,$/;"	e	enum:cv::TiffCompression
TIFF_ORDER_II	grfmt_tiff.hpp	/^    TIFF_ORDER_II = 0x4949,$/;"	e	enum:cv::TiffByteOrder
TIFF_ORDER_MM	grfmt_tiff.hpp	/^    TIFF_ORDER_MM = 0x4d4d$/;"	e	enum:cv::TiffByteOrder
TIFF_PACKBITS	grfmt_tiff.hpp	/^    TIFF_PACKBITS = 32773$/;"	e	enum:cv::TiffCompression
TIFF_TAG_BITS_PER_SAMPLE	grfmt_tiff.hpp	/^    TIFF_TAG_BITS_PER_SAMPLE = 258,$/;"	e	enum:cv::TiffTag
TIFF_TAG_COLOR_MAP	grfmt_tiff.hpp	/^    TIFF_TAG_COLOR_MAP = 320$/;"	e	enum:cv::TiffTag
TIFF_TAG_COMPRESSION	grfmt_tiff.hpp	/^    TIFF_TAG_COMPRESSION = 259,$/;"	e	enum:cv::TiffTag
TIFF_TAG_HEIGHT	grfmt_tiff.hpp	/^    TIFF_TAG_HEIGHT = 257,$/;"	e	enum:cv::TiffTag
TIFF_TAG_PHOTOMETRIC	grfmt_tiff.hpp	/^    TIFF_TAG_PHOTOMETRIC = 262,$/;"	e	enum:cv::TiffTag
TIFF_TAG_PLANAR_CONFIG	grfmt_tiff.hpp	/^    TIFF_TAG_PLANAR_CONFIG = 284,$/;"	e	enum:cv::TiffTag
TIFF_TAG_ROWS_PER_STRIP	grfmt_tiff.hpp	/^    TIFF_TAG_ROWS_PER_STRIP = 278,$/;"	e	enum:cv::TiffTag
TIFF_TAG_SAMPLES_PER_PIXEL	grfmt_tiff.hpp	/^    TIFF_TAG_SAMPLES_PER_PIXEL = 277,$/;"	e	enum:cv::TiffTag
TIFF_TAG_STRIP_COUNTS	grfmt_tiff.hpp	/^    TIFF_TAG_STRIP_COUNTS = 279,$/;"	e	enum:cv::TiffTag
TIFF_TAG_STRIP_OFFSETS	grfmt_tiff.hpp	/^    TIFF_TAG_STRIP_OFFSETS = 273,$/;"	e	enum:cv::TiffTag
TIFF_TAG_WIDTH	grfmt_tiff.hpp	/^    TIFF_TAG_WIDTH  = 256,$/;"	e	enum:cv::TiffTag
TIFF_TYPE_BYTE	grfmt_tiff.hpp	/^    TIFF_TYPE_BYTE = 1,$/;"	e	enum:cv::TiffFieldType
TIFF_TYPE_LONG	grfmt_tiff.hpp	/^    TIFF_TYPE_LONG = 4$/;"	e	enum:cv::TiffFieldType
TIFF_TYPE_SHORT	grfmt_tiff.hpp	/^    TIFF_TYPE_SHORT = 3,$/;"	e	enum:cv::TiffFieldType
TIFF_UNCOMP	grfmt_tiff.hpp	/^    TIFF_UNCOMP = 1,$/;"	e	enum:cv::TiffCompression
TRUE	grfmt_jpeg.cpp	72;"	d	file:
TiffByteOrder	grfmt_tiff.hpp	/^enum TiffByteOrder$/;"	g	namespace:cv
TiffCompression	grfmt_tiff.hpp	/^enum TiffCompression$/;"	g	namespace:cv
TiffDecoder	grfmt_tiff.cpp	/^TiffDecoder::TiffDecoder()$/;"	f	class:cv::TiffDecoder
TiffDecoder	grfmt_tiff.hpp	/^class TiffDecoder : public BaseImageDecoder$/;"	c	namespace:cv
TiffEncoder	grfmt_tiff.cpp	/^TiffEncoder::TiffEncoder()$/;"	f	class:cv::TiffEncoder
TiffEncoder	grfmt_tiff.hpp	/^class TiffEncoder : public BaseImageEncoder$/;"	c	namespace:cv
TiffFieldType	grfmt_tiff.hpp	/^enum TiffFieldType$/;"	g	namespace:cv
TiffTag	grfmt_tiff.hpp	/^enum  TiffTag$/;"	g	namespace:cv
UINT	grfmt_exr.cpp	65;"	d	file:
UINT	grfmt_exr.cpp	66;"	d	file:
UpSample	grfmt_exr.cpp	/^void  ExrDecoder::UpSample( uchar *data, int xstep, int ystep, int xsample, int ysample )$/;"	f	class:cv::ExrDecoder
UpSampleX	grfmt_exr.cpp	/^void  ExrDecoder::UpSampleX( float *data, int xstep, int xsample )$/;"	f	class:cv::ExrDecoder
UpSampleY	grfmt_exr.cpp	/^void  ExrDecoder::UpSampleY( uchar *data, int xstep, int ystep, int ysample )$/;"	f	class:cv::ExrDecoder
VERSION	grfmt_jpeg2000.cpp	57;"	d	file:
WBaseStream	bitstrm.cpp	/^WBaseStream::WBaseStream()$/;"	f	class:cv::WBaseStream
WBaseStream	bitstrm.hpp	/^class WBaseStream$/;"	c	namespace:cv
WEBP_HEADER_SIZE	grfmt_webp.cpp	/^const size_t WEBP_HEADER_SIZE = 32;$/;"	v
WLByteStream	bitstrm.hpp	/^class WLByteStream : public WBaseStream$/;"	c	namespace:cv
WMByteStream	bitstrm.hpp	/^class WMByteStream : public WLByteStream$/;"	c	namespace:cv
WRITE_PIX	utils.hpp	50;"	d
WebPDecoder	grfmt_webp.cpp	/^WebPDecoder::WebPDecoder()$/;"	f	class:cv::WebPDecoder
WebPDecoder	grfmt_webp.hpp	/^class WebPDecoder : public BaseImageDecoder$/;"	c	namespace:cv
WebPEncoder	grfmt_webp.cpp	/^WebPEncoder::WebPEncoder()$/;"	f	class:cv::WebPEncoder
WebPEncoder	grfmt_webp.hpp	/^class WebPEncoder : public BaseImageEncoder$/;"	c	namespace:cv
XMD_H	grfmt_jpeg.cpp	62;"	d	file:
_BITSTRM_H_	bitstrm.hpp	44;"	d
_FILE_OFFSET_BITS	grfmt_png.cpp	58;"	d	file:
_GRFMTS_H_	grfmts.hpp	43;"	d
_GRFMT_BASE_H_	grfmt_base.hpp	44;"	d
_GRFMT_BMP_H_	grfmt_bmp.hpp	44;"	d
_GRFMT_EXR_H_	grfmt_exr.hpp	44;"	d
_GRFMT_HDR_H_	grfmt_hdr.hpp	44;"	d
_GRFMT_JASPER_H_	grfmt_jpeg2000.hpp	44;"	d
_GRFMT_JPEG_H_	grfmt_jpeg.hpp	44;"	d
_GRFMT_PNG_H_	grfmt_png.hpp	44;"	d
_GRFMT_PxM_H_	grfmt_pxm.hpp	44;"	d
_GRFMT_SUNRAS_H_	grfmt_sunras.hpp	44;"	d
_GRFMT_TIFF_H_	grfmt_tiff.hpp	44;"	d
_GRFMT_WEBP_H_	grfmt_webp.hpp	44;"	d
_LFS64_LARGEFILE	grfmt_png.cpp	55;"	d	file:
_RGBE_HDR_H_	rgbe.hpp	44;"	d
_UTILS_H_	utils.hpp	43;"	d
_WIN32_WINNT	precomp.hpp	63;"	d
_WIN32_WINNT	precomp.hpp	65;"	d
__BEGIN__	precomp.hpp	76;"	d
__END__	precomp.hpp	77;"	d
__GRFMT_GDAL_HPP__	grfmt_gdal.hpp	43;"	d
__IMGCODECS_H_	precomp.hpp	43;"	d
__builtin_frame_address	grfmt_jpeg.cpp	58;"	d	file:
__builtin_frame_address	grfmt_png.cpp	78;"	d	file:
a	utils.hpp	/^    unsigned char b, g, r, a;$/;"	m	struct:PaletteEntry
abs	precomp.hpp	73;"	d
allocate	bitstrm.cpp	/^void  RBaseStream::allocate()$/;"	f	class:cv::RBaseStream
allocate	bitstrm.cpp	/^void  WBaseStream::allocate()$/;"	f	class:cv::WBaseStream
b	utils.hpp	/^    unsigned char b, g, r, a;$/;"	m	struct:PaletteEntry
boolean	grfmt_jpeg.cpp	/^typedef unsigned char boolean;$/;"	t	file:
bsIsBigEndian	bitstrm.cpp	/^bool  bsIsBigEndian( void )$/;"	f	namespace:cv
buf	grfmt_jpeg.cpp	/^    std::vector<uchar> *buf, *dst;$/;"	m	struct:cv::JpegDestination	file:
cB	utils.cpp	48;"	d	file:
cG	utils.cpp	47;"	d	file:
cR	utils.cpp	46;"	d	file:
channels	grfmt_webp.hpp	/^    int channels;$/;"	m	class:cv::WebPDecoder
checkSignature	grfmt_base.cpp	/^bool BaseImageDecoder::checkSignature( const String& signature ) const$/;"	f	class:cv::BaseImageDecoder
checkSignature	grfmt_gdal.cpp	/^bool GdalDecoder::checkSignature( const String& signature )const{$/;"	f	class:cv::GdalDecoder
checkSignature	grfmt_hdr.cpp	/^bool HdrDecoder::checkSignature( const String& signature ) const$/;"	f	class:cv::HdrDecoder
checkSignature	grfmt_pxm.cpp	/^bool PxMDecoder::checkSignature( const String& signature ) const$/;"	f	class:cv::PxMDecoder
checkSignature	grfmt_tiff.cpp	/^bool TiffDecoder::checkSignature( const String& signature ) const$/;"	f	class:cv::TiffDecoder
checkSignature	grfmt_webp.cpp	/^bool WebPDecoder::checkSignature(const String & signature) const$/;"	f	class:cv::WebPDecoder
cinfo	grfmt_jpeg.cpp	/^    jpeg_decompress_struct cinfo; \/\/ IJG JPEG codec structure$/;"	m	struct:cv::JpegState	file:
close	bitstrm.cpp	/^void  RBaseStream::close()$/;"	f	class:cv::RBaseStream
close	bitstrm.cpp	/^void  WBaseStream::close()$/;"	f	class:cv::WBaseStream
close	grfmt_bmp.cpp	/^void  BmpDecoder::close()$/;"	f	class:cv::BmpDecoder
close	grfmt_exr.cpp	/^void  ExrDecoder::close()$/;"	f	class:cv::ExrDecoder
close	grfmt_gdal.cpp	/^void GdalDecoder::close(){$/;"	f	class:cv::GdalDecoder
close	grfmt_jpeg.cpp	/^void  JpegDecoder::close()$/;"	f	class:cv::JpegDecoder
close	grfmt_jpeg2000.cpp	/^void  Jpeg2KDecoder::close()$/;"	f	class:cv::Jpeg2KDecoder
close	grfmt_png.cpp	/^void  PngDecoder::close()$/;"	f	class:cv::PngDecoder
close	grfmt_pxm.cpp	/^void  PxMDecoder::close()$/;"	f	class:cv::PxMDecoder
close	grfmt_sunras.cpp	/^void  SunRasterDecoder::close()$/;"	f	class:cv::SunRasterDecoder
close	grfmt_tiff.cpp	/^void TiffDecoder::close()$/;"	f	class:cv::TiffDecoder
codecs	loadsave.cpp	/^static ImageCodecInitializer codecs;$/;"	m	namespace:cv	file:
cv	bitstrm.cpp	/^namespace cv$/;"	n	file:
cv	bitstrm.hpp	/^namespace cv$/;"	n
cv	grfmt_base.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_base.hpp	/^namespace cv$/;"	n
cv	grfmt_bmp.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_bmp.hpp	/^namespace cv$/;"	n
cv	grfmt_exr.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_exr.hpp	/^namespace cv$/;"	n
cv	grfmt_gdal.cpp	/^namespace cv{$/;"	n	file:
cv	grfmt_gdal.hpp	/^namespace cv {$/;"	n
cv	grfmt_hdr.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_hdr.hpp	/^namespace cv$/;"	n
cv	grfmt_jpeg.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_jpeg.hpp	/^namespace cv$/;"	n
cv	grfmt_jpeg2000.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_jpeg2000.hpp	/^namespace cv$/;"	n
cv	grfmt_png.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_png.hpp	/^namespace cv$/;"	n
cv	grfmt_pxm.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_pxm.hpp	/^namespace cv$/;"	n
cv	grfmt_sunras.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_sunras.hpp	/^namespace cv$/;"	n
cv	grfmt_tiff.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_tiff.hpp	/^namespace cv$/;"	n
cv	grfmt_webp.cpp	/^namespace cv$/;"	n	file:
cv	grfmt_webp.hpp	/^namespace cv$/;"	n
cv	loadsave.cpp	/^namespace cv$/;"	n	file:
cvConvertImage	utils.cpp	/^cvConvertImage( const CvArr* srcarr, CvArr* dstarr, int flags )$/;"	f
cvDecodeImage	loadsave.cpp	/^cvDecodeImage( const CvMat* _buf, int iscolor )$/;"	f
cvDecodeImageM	loadsave.cpp	/^cvDecodeImageM( const CvMat* _buf, int iscolor )$/;"	f
cvEncodeImage	loadsave.cpp	/^cvEncodeImage( const char* ext, const CvArr* arr, const int* _params )$/;"	f
cvHaveImageReader	loadsave.cpp	/^cvHaveImageReader( const char* filename )$/;"	f
cvHaveImageWriter	loadsave.cpp	/^CV_IMPL int cvHaveImageWriter( const char* filename )$/;"	f
cvLoadImage	loadsave.cpp	/^cvLoadImage( const char* filename, int iscolor )$/;"	f
cvLoadImageM	loadsave.cpp	/^cvLoadImageM( const char* filename, int iscolor )$/;"	f
cvSaveImage	loadsave.cpp	/^cvSaveImage( const char* filename, const CvArr* arr, const int* _params )$/;"	f
data	grfmt_webp.hpp	/^    Mat data;$/;"	m	class:cv::WebPDecoder
decoders	loadsave.cpp	/^    std::vector<ImageDecoder> decoders;$/;"	m	struct:cv::ImageCodecInitializer	file:
descale	utils.hpp	55;"	d
dst	grfmt_jpeg.cpp	/^    std::vector<uchar> *buf, *dst;$/;"	m	struct:cv::JpegDestination	file:
empty_output_buffer	grfmt_jpeg.cpp	/^empty_output_buffer (j_compress_ptr cinfo)$/;"	f	namespace:cv
encoders	loadsave.cpp	/^    std::vector<ImageEncoder> encoders;$/;"	m	struct:cv::ImageCodecInitializer	file:
error_exit	grfmt_jpeg.cpp	/^error_exit( j_common_ptr cinfo )$/;"	f	namespace:cv
exposure	rgbe.hpp	/^  float exposure;       \/* a value of 1.0 in an image corresponds to$/;"	m	struct:__anon2
file	grfmt_hdr.hpp	/^    FILE *file;$/;"	m	class:cv::HdrDecoder
fill_input_buffer	grfmt_jpeg.cpp	/^fill_input_buffer(j_decompress_ptr)$/;"	f	namespace:cv
findDecoder	loadsave.cpp	/^static ImageDecoder findDecoder( const Mat& buf )$/;"	f	namespace:cv
findDecoder	loadsave.cpp	/^static ImageDecoder findDecoder( const String& filename ) {$/;"	f	namespace:cv
findEncoder	loadsave.cpp	/^static ImageEncoder findEncoder( const String& _ext )$/;"	f	namespace:cv
float2rgbe	rgbe.cpp	/^float2rgbe(unsigned char rgbe[4], float red, float green, float blue)$/;"	f	file:
flushBuf	grfmt_png.cpp	/^void PngEncoder::flushBuf(void*)$/;"	f	class:cv::PngEncoder
fmtSignBmp	grfmt_bmp.cpp	/^static const char* fmtSignBmp = "BM";$/;"	m	namespace:cv	file:
fmtSignSunRas	grfmt_sunras.cpp	/^static const char* fmtSignSunRas = "\\x59\\xA6\\x6A\\x95";$/;"	m	namespace:cv	file:
fmtSignTiffII	grfmt_tiff.cpp	/^static const char fmtSignTiffII[] = "II\\x2a\\x00";$/;"	m	namespace:cv	file:
fmtSignTiffMM	grfmt_tiff.cpp	/^static const char fmtSignTiffMM[] = "MM\\x00\\x2a";$/;"	m	namespace:cv	file:
g	utils.hpp	/^    unsigned char b, g, r, a;$/;"	m	struct:PaletteEntry
gamma	rgbe.hpp	/^  float gamma;          \/* image has already been gamma corrected with$/;"	m	struct:__anon2
gdal2opencv	grfmt_gdal.cpp	/^int gdal2opencv( const GDALDataType& gdalType, const int& channels ){$/;"	f	namespace:cv
gdalPaletteInterpretation2OpenCV	grfmt_gdal.cpp	/^int  gdalPaletteInterpretation2OpenCV( GDALPaletteInterp const& paletteInterp, GDALDataType const& gdalType ){$/;"	f	namespace:cv
getByte	bitstrm.cpp	/^int  RLByteStream::getByte()$/;"	f	class:cv::RLByteStream
getBytes	bitstrm.cpp	/^int RLByteStream::getBytes( void* buffer, int count )$/;"	f	class:cv::RLByteStream
getDWord	bitstrm.cpp	/^int  RLByteStream::getDWord()$/;"	f	class:cv::RLByteStream
getDWord	bitstrm.cpp	/^int  RMByteStream::getDWord()$/;"	f	class:cv::RMByteStream
getDescription	grfmt_base.cpp	/^String BaseImageEncoder::getDescription() const$/;"	f	class:cv::BaseImageEncoder
getPos	bitstrm.cpp	/^int  RBaseStream::getPos()$/;"	f	class:cv::RBaseStream
getPos	bitstrm.cpp	/^int  WBaseStream::getPos()$/;"	f	class:cv::WBaseStream
getWord	bitstrm.cpp	/^int  RLByteStream::getWord()$/;"	f	class:cv::RLByteStream
getWord	bitstrm.cpp	/^int  RMByteStream::getWord()$/;"	f	class:cv::RMByteStream
grfmt_tiff_err_handler_init	grfmt_tiff.cpp	/^static int grfmt_tiff_err_handler_init = 0;$/;"	m	namespace:cv	file:
hasColorTable	grfmt_gdal.hpp	/^        bool hasColorTable;$/;"	m	class:cv::GdalDecoder
height	grfmt_base.hpp	/^    int height() const { return m_height; }$/;"	f	class:cv::BaseImageDecoder
icvCvt_BGR2Gray_8u_C3C1R	utils.cpp	/^void icvCvt_BGR2Gray_8u_C3C1R( const uchar* rgb, int rgb_step,$/;"	f
icvCvt_BGR2RGB_16u_C3R	utils.cpp	/^void icvCvt_BGR2RGB_16u_C3R( const ushort* bgr, int bgr_step,$/;"	f
icvCvt_BGR2RGB_8u_C3R	utils.cpp	/^void icvCvt_BGR2RGB_8u_C3R( const uchar* bgr, int bgr_step,$/;"	f
icvCvt_BGR5552BGR_8u_C2C3R	utils.cpp	/^void icvCvt_BGR5552BGR_8u_C2C3R( const uchar* bgr555, int bgr555_step,$/;"	f
icvCvt_BGR5552Gray_8u_C2C1R	utils.cpp	/^void icvCvt_BGR5552Gray_8u_C2C1R( const uchar* bgr555, int bgr555_step,$/;"	f
icvCvt_BGR5652BGR_8u_C2C3R	utils.cpp	/^void icvCvt_BGR5652BGR_8u_C2C3R( const uchar* bgr565, int bgr565_step,$/;"	f
icvCvt_BGR5652Gray_8u_C2C1R	utils.cpp	/^void icvCvt_BGR5652Gray_8u_C2C1R( const uchar* bgr565, int bgr565_step,$/;"	f
icvCvt_BGRA2BGR_16u_C4C3R	utils.cpp	/^void icvCvt_BGRA2BGR_16u_C4C3R( const ushort* bgra, int bgra_step,$/;"	f
icvCvt_BGRA2BGR_8u_C4C3R	utils.cpp	/^void icvCvt_BGRA2BGR_8u_C4C3R( const uchar* bgra, int bgra_step,$/;"	f
icvCvt_BGRA2Gray_16u_CnC1R	utils.cpp	/^void icvCvt_BGRA2Gray_16u_CnC1R( const ushort* rgb, int rgb_step,$/;"	f
icvCvt_BGRA2Gray_8u_C4C1R	utils.cpp	/^void icvCvt_BGRA2Gray_8u_C4C1R( const uchar* rgba, int rgba_step,$/;"	f
icvCvt_BGRA2RGBA_16u_C4R	utils.cpp	/^void icvCvt_BGRA2RGBA_16u_C4R( const ushort* bgra, int bgra_step,$/;"	f
icvCvt_BGRA2RGBA_8u_C4R	utils.cpp	/^void icvCvt_BGRA2RGBA_8u_C4R( const uchar* bgra, int bgra_step,$/;"	f
icvCvt_CMYK2BGR_8u_C4C3R	utils.cpp	/^void icvCvt_CMYK2BGR_8u_C4C3R( const uchar* cmyk, int cmyk_step,$/;"	f
icvCvt_CMYK2Gray_8u_C4C1R	utils.cpp	/^void icvCvt_CMYK2Gray_8u_C4C1R( const uchar* cmyk, int cmyk_step,$/;"	f
icvCvt_Gray2BGR_16u_C1C3R	utils.cpp	/^void icvCvt_Gray2BGR_16u_C1C3R( const ushort* gray, int gray_step,$/;"	f
icvCvt_Gray2BGR_8u_C1C3R	utils.cpp	/^void icvCvt_Gray2BGR_8u_C1C3R( const uchar* gray, int gray_step,$/;"	f
icvCvt_RGB2BGR_16u_C3R	utils.hpp	85;"	d
icvCvt_RGB2BGR_8u_C3R	utils.hpp	82;"	d
icvCvt_RGBA2BGRA_16u_C4R	utils.hpp	93;"	d
icvCvt_RGBA2BGRA_8u_C4R	utils.hpp	89;"	d
imdecode	loadsave.cpp	/^Mat imdecode( InputArray _buf, int flags )$/;"	f	namespace:cv
imdecode	loadsave.cpp	/^Mat imdecode( InputArray _buf, int flags, Mat* dst )$/;"	f	namespace:cv
imdecode_	loadsave.cpp	/^imdecode_( const Mat& buf, int flags, int hdrtype, Mat* mat=0 )$/;"	f	namespace:cv
imencode	loadsave.cpp	/^bool imencode( const String& ext, InputArray _image,$/;"	f	namespace:cv
imread	loadsave.cpp	/^Mat imread( const String& filename, int flags )$/;"	f	namespace:cv
imread_	loadsave.cpp	/^imread_( const String& filename, int flags, int hdrtype, Mat* mat=0 )$/;"	f	namespace:cv
imreadmulti	loadsave.cpp	/^bool imreadmulti(const String& filename, std::vector<Mat>& mats, int flags)$/;"	f	namespace:cv
imreadmulti_	loadsave.cpp	/^imreadmulti_(const String& filename, int flags, std::vector<Mat>& mats)$/;"	f	namespace:cv
imwrite	loadsave.cpp	/^bool imwrite( const String& filename, InputArray _img,$/;"	f	namespace:cv
imwrite_	loadsave.cpp	/^static bool imwrite_( const String& filename, const Mat& image,$/;"	f	namespace:cv
initialize_jasper	grfmt_jpeg2000.cpp	/^static JasperInitializer initialize_jasper;$/;"	m	namespace:cv	file:
isBigEndian	utils.hpp	/^CV_INLINE bool  isBigEndian( void )$/;"	f
isFormatSupported	grfmt_base.cpp	/^bool  BaseImageEncoder::isFormatSupported( int depth ) const$/;"	f	class:cv::BaseImageEncoder
isFormatSupported	grfmt_exr.cpp	/^bool  ExrEncoder::isFormatSupported( int depth ) const$/;"	f	class:cv::ExrEncoder
isFormatSupported	grfmt_hdr.cpp	/^bool HdrEncoder::isFormatSupported( int depth ) const {$/;"	f	class:cv::HdrEncoder
isFormatSupported	grfmt_jpeg2000.cpp	/^bool  Jpeg2KEncoder::isFormatSupported( int depth ) const$/;"	f	class:cv::Jpeg2KEncoder
isFormatSupported	grfmt_png.cpp	/^bool  PngEncoder::isFormatSupported( int depth ) const$/;"	f	class:cv::PngEncoder
isFormatSupported	grfmt_pxm.cpp	/^bool  PxMEncoder::isFormatSupported( int depth ) const$/;"	f	class:cv::PxMEncoder
isFormatSupported	grfmt_tiff.cpp	/^bool TiffEncoder::isFormatSupported( int depth ) const$/;"	f	class:cv::TiffEncoder
isOpened	bitstrm.cpp	/^bool  RBaseStream::isOpened()$/;"	f	class:cv::RBaseStream
isOpened	bitstrm.cpp	/^bool  WBaseStream::isOpened()$/;"	f	class:cv::WBaseStream
jerr	grfmt_jpeg.cpp	/^    JpegErrorMgr jerr; \/\/ error processing manager state$/;"	m	struct:cv::JpegState	file:
jpeg_buffer_dest	grfmt_jpeg.cpp	/^static void jpeg_buffer_dest(j_compress_ptr cinfo, JpegDestination* destination)$/;"	f	namespace:cv
jpeg_buffer_src	grfmt_jpeg.cpp	/^static void jpeg_buffer_src(j_decompress_ptr cinfo, JpegSource* source)$/;"	f	namespace:cv
m_allocated	bitstrm.hpp	/^    bool    m_allocated;$/;"	m	class:cv::RBaseStream
m_binary	grfmt_pxm.hpp	/^    bool            m_binary;$/;"	m	class:cv::PxMDecoder
m_bit_depth	grfmt_exr.hpp	/^    int             m_bit_depth;$/;"	m	class:cv::ExrDecoder
m_bit_depth	grfmt_png.hpp	/^    int   m_bit_depth;$/;"	m	class:cv::PngDecoder
m_block_pos	bitstrm.hpp	/^    int     m_block_pos;$/;"	m	class:cv::RBaseStream
m_block_pos	bitstrm.hpp	/^    int     m_block_pos;$/;"	m	class:cv::WBaseStream
m_block_size	bitstrm.hpp	/^    int     m_block_size;$/;"	m	class:cv::RBaseStream
m_block_size	bitstrm.hpp	/^    int     m_block_size;$/;"	m	class:cv::WBaseStream
m_blue	grfmt_exr.hpp	/^    const Channel  *m_blue;$/;"	m	class:cv::ExrDecoder
m_bpp	grfmt_bmp.hpp	/^    int             m_bpp;$/;"	m	class:cv::BmpDecoder
m_bpp	grfmt_pxm.hpp	/^    int             m_bpp;$/;"	m	class:cv::PxMDecoder
m_bpp	grfmt_sunras.hpp	/^    int             m_bpp;$/;"	m	class:cv::SunRasterDecoder
m_buf	bitstrm.hpp	/^    std::vector<uchar>* m_buf;$/;"	m	class:cv::WBaseStream
m_buf	grfmt_base.hpp	/^    Mat m_buf;$/;"	m	class:cv::BaseImageDecoder
m_buf	grfmt_base.hpp	/^    std::vector<uchar>* m_buf;$/;"	m	class:cv::BaseImageEncoder
m_buf_pos	grfmt_png.hpp	/^    size_t m_buf_pos;$/;"	m	class:cv::PngDecoder
m_buf_supported	grfmt_base.hpp	/^    bool m_buf_supported;$/;"	m	class:cv::BaseImageDecoder
m_buf_supported	grfmt_base.hpp	/^    bool m_buf_supported;$/;"	m	class:cv::BaseImageEncoder
m_chroma	grfmt_exr.hpp	/^    Chromaticities  m_chroma;$/;"	m	class:cv::ExrDecoder
m_color_type	grfmt_png.hpp	/^    int   m_color_type;$/;"	m	class:cv::PngDecoder
m_current	bitstrm.hpp	/^    uchar*  m_current;$/;"	m	class:cv::RBaseStream
m_current	bitstrm.hpp	/^    uchar*  m_current;$/;"	m	class:cv::WBaseStream
m_dataset	grfmt_gdal.hpp	/^        GDALDataset* m_dataset;$/;"	m	class:cv::GdalDecoder
m_datawindow	grfmt_exr.hpp	/^    Box2i           m_datawindow;$/;"	m	class:cv::ExrDecoder
m_description	grfmt_base.hpp	/^    String m_description;$/;"	m	class:cv::BaseImageEncoder
m_driver	grfmt_gdal.hpp	/^        GDALDriver* m_driver;$/;"	m	class:cv::GdalDecoder
m_encoding	grfmt_sunras.hpp	/^    SunRasType      m_encoding;$/;"	m	class:cv::SunRasterDecoder
m_end	bitstrm.hpp	/^    uchar*  m_end;$/;"	m	class:cv::RBaseStream
m_end	bitstrm.hpp	/^    uchar*  m_end;$/;"	m	class:cv::WBaseStream
m_end_info	grfmt_png.hpp	/^    void* m_end_info; \/\/ pointer to one more image information structure$/;"	m	class:cv::PngDecoder
m_f	grfmt_jpeg.hpp	/^    FILE* m_f;$/;"	m	class:cv::JpegDecoder
m_f	grfmt_png.hpp	/^    FILE* m_f;$/;"	m	class:cv::PngDecoder
m_file	bitstrm.hpp	/^    FILE*   m_file;$/;"	m	class:cv::RBaseStream
m_file	bitstrm.hpp	/^    FILE*   m_file;$/;"	m	class:cv::WBaseStream
m_file	grfmt_exr.hpp	/^    InputFile      *m_file;$/;"	m	class:cv::ExrDecoder
m_filename	grfmt_base.hpp	/^    String m_filename;$/;"	m	class:cv::BaseImageDecoder
m_filename	grfmt_base.hpp	/^    String m_filename;$/;"	m	class:cv::BaseImageEncoder
m_green	grfmt_exr.hpp	/^    const Channel  *m_green;$/;"	m	class:cv::ExrDecoder
m_hdr	grfmt_tiff.hpp	/^    bool m_hdr;$/;"	m	class:cv::TiffDecoder
m_height	grfmt_base.hpp	/^    int  m_height; \/\/ height of the image ( filled by readHeader )$/;"	m	class:cv::BaseImageDecoder
m_image	grfmt_jpeg2000.hpp	/^    void *m_image;$/;"	m	class:cv::Jpeg2KDecoder
m_info_ptr	grfmt_png.hpp	/^    void* m_info_ptr; \/\/ pointer to image information structure$/;"	m	class:cv::PngDecoder
m_is_opened	bitstrm.hpp	/^    bool    m_is_opened;$/;"	m	class:cv::RBaseStream
m_is_opened	bitstrm.hpp	/^    bool    m_is_opened;$/;"	m	class:cv::WBaseStream
m_ischroma	grfmt_exr.hpp	/^    bool            m_ischroma;$/;"	m	class:cv::ExrDecoder
m_iscolor	grfmt_exr.hpp	/^    bool            m_iscolor;$/;"	m	class:cv::ExrDecoder
m_isfloat	grfmt_exr.hpp	/^    bool            m_isfloat;$/;"	m	class:cv::ExrDecoder
m_last_error	grfmt_base.hpp	/^    String m_last_error;$/;"	m	class:cv::BaseImageEncoder
m_maplength	grfmt_sunras.hpp	/^    int             m_maplength;$/;"	m	class:cv::SunRasterDecoder
m_maptype	grfmt_sunras.hpp	/^    SunRasMapType   m_maptype;$/;"	m	class:cv::SunRasterDecoder
m_maxval	grfmt_pxm.hpp	/^    int             m_maxval;$/;"	m	class:cv::PxMDecoder
m_native_depth	grfmt_exr.hpp	/^    bool            m_native_depth;$/;"	m	class:cv::ExrDecoder
m_offset	grfmt_bmp.hpp	/^    int             m_offset;$/;"	m	class:cv::BmpDecoder
m_offset	grfmt_pxm.hpp	/^    int             m_offset;$/;"	m	class:cv::PxMDecoder
m_offset	grfmt_sunras.hpp	/^    int             m_offset;$/;"	m	class:cv::SunRasterDecoder
m_origin	grfmt_bmp.hpp	/^    int             m_origin;$/;"	m	class:cv::BmpDecoder
m_palette	grfmt_bmp.hpp	/^    PaletteEntry    m_palette[256];$/;"	m	class:cv::BmpDecoder
m_palette	grfmt_pxm.hpp	/^    PaletteEntry    m_palette[256];$/;"	m	class:cv::PxMDecoder
m_palette	grfmt_sunras.hpp	/^    PaletteEntry    m_palette[256];$/;"	m	class:cv::SunRasterDecoder
m_png_ptr	grfmt_png.hpp	/^    void* m_png_ptr;  \/\/ pointer to decompression structure$/;"	m	class:cv::PngDecoder
m_red	grfmt_exr.hpp	/^    const Channel  *m_red;$/;"	m	class:cv::ExrDecoder
m_rle_code	grfmt_bmp.hpp	/^    BmpCompression  m_rle_code;$/;"	m	class:cv::BmpDecoder
m_signature	grfmt_base.hpp	/^    String m_signature;$/;"	m	class:cv::BaseImageDecoder
m_signature_alt	grfmt_hdr.hpp	/^    String m_signature_alt;$/;"	m	class:cv::HdrDecoder
m_start	bitstrm.hpp	/^    uchar*  m_start;$/;"	m	class:cv::RBaseStream
m_start	bitstrm.hpp	/^    uchar*  m_start;$/;"	m	class:cv::WBaseStream
m_state	grfmt_jpeg.hpp	/^    void* m_state;$/;"	m	class:cv::JpegDecoder
m_stream	grfmt_jpeg2000.hpp	/^    void *m_stream;$/;"	m	class:cv::Jpeg2KDecoder
m_strm	grfmt_bmp.hpp	/^    RLByteStream    m_strm;$/;"	m	class:cv::BmpDecoder
m_strm	grfmt_pxm.hpp	/^    RLByteStream    m_strm;$/;"	m	class:cv::PxMDecoder
m_strm	grfmt_sunras.hpp	/^    RMByteStream    m_strm;$/;"	m	class:cv::SunRasterDecoder
m_tif	grfmt_tiff.hpp	/^    void* m_tif;$/;"	m	class:cv::TiffDecoder
m_type	grfmt_base.hpp	/^    int  m_type;$/;"	m	class:cv::BaseImageDecoder
m_type	grfmt_exr.hpp	/^    Imf::PixelType  m_type;$/;"	m	class:cv::ExrDecoder
m_width	grfmt_base.hpp	/^    int  m_width;  \/\/ width  of the image ( filled by readHeader )$/;"	m	class:cv::BaseImageDecoder
max	loadsave.cpp	49;"	d	file:
max	precomp.hpp	72;"	d
min	loadsave.cpp	48;"	d	file:
min	precomp.hpp	71;"	d
mingw_getsp	grfmt_jpeg.cpp	57;"	d	file:
mingw_getsp	grfmt_png.cpp	77;"	d	file:
my_jpeg_load_dht	grfmt_jpeg.cpp	/^int my_jpeg_load_dht (struct jpeg_decompress_struct *info, unsigned char *dht,$/;"	f	namespace:cv
my_jpeg_odml_dht	grfmt_jpeg.cpp	/^unsigned char my_jpeg_odml_dht[0x1a4] = {$/;"	m	namespace:cv	file:
newDecoder	grfmt_base.cpp	/^ImageDecoder BaseImageDecoder::newDecoder() const$/;"	f	class:cv::BaseImageDecoder
newDecoder	grfmt_bmp.cpp	/^ImageDecoder BmpDecoder::newDecoder() const$/;"	f	class:cv::BmpDecoder
newDecoder	grfmt_exr.cpp	/^ImageDecoder ExrDecoder::newDecoder() const$/;"	f	class:cv::ExrDecoder
newDecoder	grfmt_gdal.cpp	/^ImageDecoder GdalDecoder::newDecoder()const{$/;"	f	class:cv::GdalDecoder
newDecoder	grfmt_hdr.cpp	/^ImageDecoder HdrDecoder::newDecoder() const$/;"	f	class:cv::HdrDecoder
newDecoder	grfmt_jpeg.cpp	/^ImageDecoder JpegDecoder::newDecoder() const$/;"	f	class:cv::JpegDecoder
newDecoder	grfmt_jpeg2000.cpp	/^ImageDecoder Jpeg2KDecoder::newDecoder() const$/;"	f	class:cv::Jpeg2KDecoder
newDecoder	grfmt_png.cpp	/^ImageDecoder PngDecoder::newDecoder() const$/;"	f	class:cv::PngDecoder
newDecoder	grfmt_pxm.cpp	/^ImageDecoder PxMDecoder::newDecoder() const$/;"	f	class:cv::PxMDecoder
newDecoder	grfmt_sunras.cpp	/^ImageDecoder SunRasterDecoder::newDecoder() const$/;"	f	class:cv::SunRasterDecoder
newDecoder	grfmt_tiff.cpp	/^ImageDecoder TiffDecoder::newDecoder() const$/;"	f	class:cv::TiffDecoder
newDecoder	grfmt_webp.cpp	/^ImageDecoder WebPDecoder::newDecoder() const$/;"	f	class:cv::WebPDecoder
newEncoder	grfmt_base.cpp	/^ImageEncoder BaseImageEncoder::newEncoder() const$/;"	f	class:cv::BaseImageEncoder
newEncoder	grfmt_bmp.cpp	/^ImageEncoder BmpEncoder::newEncoder() const$/;"	f	class:cv::BmpEncoder
newEncoder	grfmt_exr.cpp	/^ImageEncoder ExrEncoder::newEncoder() const$/;"	f	class:cv::ExrEncoder
newEncoder	grfmt_hdr.cpp	/^ImageEncoder HdrEncoder::newEncoder() const$/;"	f	class:cv::HdrEncoder
newEncoder	grfmt_jpeg.cpp	/^ImageEncoder JpegEncoder::newEncoder() const$/;"	f	class:cv::JpegEncoder
newEncoder	grfmt_jpeg2000.cpp	/^ImageEncoder Jpeg2KEncoder::newEncoder() const$/;"	f	class:cv::Jpeg2KEncoder
newEncoder	grfmt_png.cpp	/^ImageEncoder PngEncoder::newEncoder() const$/;"	f	class:cv::PngEncoder
newEncoder	grfmt_pxm.cpp	/^ImageEncoder  PxMEncoder::newEncoder() const$/;"	f	class:cv::PxMEncoder
newEncoder	grfmt_sunras.cpp	/^ImageEncoder SunRasterEncoder::newEncoder() const$/;"	f	class:cv::SunRasterEncoder
newEncoder	grfmt_tiff.cpp	/^ImageEncoder TiffEncoder::newEncoder() const$/;"	f	class:cv::TiffEncoder
newEncoder	grfmt_webp.cpp	/^ImageEncoder WebPEncoder::newEncoder() const$/;"	f	class:cv::WebPEncoder
nextPage	grfmt_base.hpp	/^    virtual bool nextPage() { return false; }$/;"	f	class:cv::BaseImageDecoder
nextPage	grfmt_tiff.cpp	/^bool TiffDecoder::nextPage()$/;"	f	class:cv::TiffDecoder
normalizeChannelsNumber	grfmt_tiff.cpp	/^int TiffDecoder::normalizeChannelsNumber(int channels) const$/;"	f	class:cv::TiffDecoder
open	bitstrm.cpp	/^bool  RBaseStream::open( const Mat& buf )$/;"	f	class:cv::RBaseStream
open	bitstrm.cpp	/^bool  RBaseStream::open( const String& filename )$/;"	f	class:cv::RBaseStream
open	bitstrm.cpp	/^bool  WBaseStream::open( const String& filename )$/;"	f	class:cv::WBaseStream
open	bitstrm.cpp	/^bool  WBaseStream::open( std::vector<uchar>& buf )$/;"	f	class:cv::WBaseStream
programtype	rgbe.hpp	/^  char programtype[16]; \/* listed at beginning of file to identify it$/;"	m	struct:__anon2
pub	grfmt_jpeg.cpp	/^    struct jpeg_destination_mgr pub;$/;"	m	struct:cv::JpegDestination	typeref:struct:cv::JpegDestination::jpeg_destination_mgr	file:
pub	grfmt_jpeg.cpp	/^    struct jpeg_error_mgr pub;$/;"	m	struct:cv::JpegErrorMgr	typeref:struct:cv::JpegErrorMgr::jpeg_error_mgr	file:
pub	grfmt_jpeg.cpp	/^    struct jpeg_source_mgr pub;$/;"	m	struct:cv::JpegSource	typeref:struct:cv::JpegSource::jpeg_source_mgr	file:
putByte	bitstrm.cpp	/^void WLByteStream::putByte( int val )$/;"	f	class:cv::WLByteStream
putBytes	bitstrm.cpp	/^void WLByteStream::putBytes( const void* buffer, int count )$/;"	f	class:cv::WLByteStream
putDWord	bitstrm.cpp	/^void WLByteStream::putDWord( int val )$/;"	f	class:cv::WLByteStream
putDWord	bitstrm.cpp	/^void WMByteStream::putDWord( int val )$/;"	f	class:cv::WMByteStream
putWord	bitstrm.cpp	/^void WLByteStream::putWord( int val )$/;"	f	class:cv::WLByteStream
putWord	bitstrm.cpp	/^void WMByteStream::putWord( int val )$/;"	f	class:cv::WMByteStream
r	utils.hpp	/^    unsigned char b, g, r, a;$/;"	m	struct:PaletteEntry
range_cast	grfmt_gdal.cpp	/^double range_cast( const GDALDataType& gdalType,$/;"	f	namespace:cv
readBlock	bitstrm.cpp	/^void  RBaseStream::readBlock()$/;"	f	class:cv::RBaseStream
readComponent16u	grfmt_jpeg2000.cpp	/^bool  Jpeg2KDecoder::readComponent16u( unsigned short *data, void *_buffer,$/;"	f	class:cv::Jpeg2KDecoder
readComponent8u	grfmt_jpeg2000.cpp	/^bool  Jpeg2KDecoder::readComponent8u( uchar *data, void *_buffer,$/;"	f	class:cv::Jpeg2KDecoder
readData	grfmt_bmp.cpp	/^bool  BmpDecoder::readData( Mat& img )$/;"	f	class:cv::BmpDecoder
readData	grfmt_exr.cpp	/^bool  ExrDecoder::readData( Mat& img )$/;"	f	class:cv::ExrDecoder
readData	grfmt_gdal.cpp	/^bool GdalDecoder::readData( Mat& img ){$/;"	f	class:cv::GdalDecoder
readData	grfmt_hdr.cpp	/^bool HdrDecoder::readData(Mat& _img)$/;"	f	class:cv::HdrDecoder
readData	grfmt_jpeg.cpp	/^bool  JpegDecoder::readData( Mat& img )$/;"	f	class:cv::JpegDecoder
readData	grfmt_jpeg2000.cpp	/^bool  Jpeg2KDecoder::readData( Mat& img )$/;"	f	class:cv::Jpeg2KDecoder
readData	grfmt_png.cpp	/^bool  PngDecoder::readData( Mat& img )$/;"	f	class:cv::PngDecoder
readData	grfmt_pxm.cpp	/^bool  PxMDecoder::readData( Mat& img )$/;"	f	class:cv::PxMDecoder
readData	grfmt_sunras.cpp	/^bool  SunRasterDecoder::readData( Mat& img )$/;"	f	class:cv::SunRasterDecoder
readData	grfmt_tiff.cpp	/^bool  TiffDecoder::readData( Mat& img )$/;"	f	class:cv::TiffDecoder
readData	grfmt_webp.cpp	/^bool WebPDecoder::readData(Mat &img)$/;"	f	class:cv::WebPDecoder
readDataFromBuf	grfmt_png.cpp	/^void  PngDecoder::readDataFromBuf( void* _png_ptr, uchar* dst, size_t size )$/;"	f	class:cv::PngDecoder
readHdrData	grfmt_tiff.cpp	/^bool TiffDecoder::readHdrData(Mat& img)$/;"	f	class:cv::TiffDecoder
readHeader	grfmt_bmp.cpp	/^bool  BmpDecoder::readHeader()$/;"	f	class:cv::BmpDecoder
readHeader	grfmt_exr.cpp	/^bool  ExrDecoder::readHeader()$/;"	f	class:cv::ExrDecoder
readHeader	grfmt_gdal.cpp	/^bool GdalDecoder::readHeader(){$/;"	f	class:cv::GdalDecoder
readHeader	grfmt_hdr.cpp	/^bool  HdrDecoder::readHeader()$/;"	f	class:cv::HdrDecoder
readHeader	grfmt_jpeg.cpp	/^bool  JpegDecoder::readHeader()$/;"	f	class:cv::JpegDecoder
readHeader	grfmt_jpeg2000.cpp	/^bool  Jpeg2KDecoder::readHeader()$/;"	f	class:cv::Jpeg2KDecoder
readHeader	grfmt_png.cpp	/^bool  PngDecoder::readHeader()$/;"	f	class:cv::PngDecoder
readHeader	grfmt_pxm.cpp	/^bool  PxMDecoder::readHeader()$/;"	f	class:cv::PxMDecoder
readHeader	grfmt_sunras.cpp	/^bool  SunRasterDecoder::readHeader()$/;"	f	class:cv::SunRasterDecoder
readHeader	grfmt_tiff.cpp	/^bool TiffDecoder::readHeader()$/;"	f	class:cv::TiffDecoder
readHeader	grfmt_webp.cpp	/^bool WebPDecoder::readHeader()$/;"	f	class:cv::WebPDecoder
readParam	grfmt_tiff.cpp	/^static void readParam(const std::vector<int>& params, int key, int& value)$/;"	f	namespace:cv
release	bitstrm.cpp	/^void  RBaseStream::release()$/;"	f	class:cv::RBaseStream
release	bitstrm.cpp	/^void  WBaseStream::release()$/;"	f	class:cv::WBaseStream
rgbe2float	rgbe.cpp	/^rgbe2float(float *red, float *green, float *blue, unsigned char rgbe[4])$/;"	f	file:
rgbe_error	rgbe.cpp	/^static int rgbe_error(int rgbe_error_code, const char *msg)$/;"	f	file:
rgbe_error_codes	rgbe.cpp	/^enum rgbe_error_codes {$/;"	g	file:
rgbe_format_error	rgbe.cpp	/^  rgbe_format_error,$/;"	e	enum:rgbe_error_codes	file:
rgbe_header_info	rgbe.hpp	/^} rgbe_header_info;$/;"	t	typeref:struct:__anon2
rgbe_memory_error	rgbe.cpp	/^  rgbe_memory_error$/;"	e	enum:rgbe_error_codes	file:
rgbe_read_error	rgbe.cpp	/^  rgbe_read_error,$/;"	e	enum:rgbe_error_codes	file:
rgbe_write_error	rgbe.cpp	/^  rgbe_write_error,$/;"	e	enum:rgbe_error_codes	file:
saturate	utils.hpp	56;"	d
setDestination	grfmt_base.cpp	/^bool BaseImageEncoder::setDestination( const String& filename )$/;"	f	class:cv::BaseImageEncoder
setDestination	grfmt_base.cpp	/^bool BaseImageEncoder::setDestination( std::vector<uchar>& buf )$/;"	f	class:cv::BaseImageEncoder
setPos	bitstrm.cpp	/^void  RBaseStream::setPos( int pos )$/;"	f	class:cv::RBaseStream
setSource	grfmt_base.cpp	/^bool BaseImageDecoder::setSource( const Mat& buf )$/;"	f	class:cv::BaseImageDecoder
setSource	grfmt_base.cpp	/^bool BaseImageDecoder::setSource( const String& filename )$/;"	f	class:cv::BaseImageDecoder
setjmp_buffer	grfmt_jpeg.cpp	/^    jmp_buf setjmp_buffer;$/;"	m	struct:cv::JpegErrorMgr	file:
signatureLength	grfmt_base.cpp	/^size_t BaseImageDecoder::signatureLength() const$/;"	f	class:cv::BaseImageDecoder
signatureLength	grfmt_hdr.cpp	/^size_t HdrDecoder::signatureLength() const$/;"	f	class:cv::HdrDecoder
signatureLength	grfmt_pxm.cpp	/^size_t PxMDecoder::signatureLength() const$/;"	f	class:cv::PxMDecoder
signatureLength	grfmt_tiff.cpp	/^size_t TiffDecoder::signatureLength() const$/;"	f	class:cv::TiffDecoder
signatureLength	grfmt_webp.cpp	/^size_t WebPDecoder::signatureLength() const$/;"	f	class:cv::WebPDecoder
skip	bitstrm.cpp	/^void  RBaseStream::skip( int bytes )$/;"	f	class:cv::RBaseStream
skip	grfmt_jpeg.cpp	/^    int skip;$/;"	m	struct:cv::JpegSource	file:
skip_input_data	grfmt_jpeg.cpp	/^skip_input_data(j_decompress_ptr cinfo, long num_bytes)$/;"	f	namespace:cv
small	precomp.hpp	70;"	d
source	grfmt_jpeg.cpp	/^    JpegSource source; \/\/ memory buffer source$/;"	m	struct:cv::JpegState	file:
stub	grfmt_jpeg.cpp	/^stub(j_compress_ptr)$/;"	f	namespace:cv
stub	grfmt_jpeg.cpp	/^stub(j_decompress_ptr)$/;"	f	namespace:cv
term_destination	grfmt_jpeg.cpp	/^term_destination (j_compress_ptr cinfo)$/;"	f	namespace:cv
throwOnEror	grfmt_base.cpp	/^void BaseImageEncoder::throwOnEror() const$/;"	f	class:cv::BaseImageEncoder
type	grfmt_base.hpp	/^    virtual int type() const { return m_type; }$/;"	f	class:cv::BaseImageDecoder
type	grfmt_exr.cpp	/^int  ExrDecoder::type() const$/;"	f	class:cv::ExrDecoder
uchar	grfmt_jpeg2000.cpp	61;"	d	file:
ulong	bitstrm.hpp	/^typedef unsigned long ulong;$/;"	t	namespace:cv
ulong	grfmt_jpeg2000.cpp	62;"	d	file:
ushort	utils.cpp	/^typedef unsigned short ushort;$/;"	t	file:
valid	rgbe.hpp	/^  int valid;            \/* indicate which fields are valid *\/$/;"	m	struct:__anon2
width	grfmt_base.hpp	/^    int width() const { return m_width; }$/;"	f	class:cv::BaseImageDecoder
write	grfmt_bmp.cpp	/^bool  BmpEncoder::write( const Mat& img, const std::vector<int>& )$/;"	f	class:cv::BmpEncoder
write	grfmt_exr.cpp	/^bool  ExrEncoder::write( const Mat& img, const std::vector<int>& )$/;"	f	class:cv::ExrEncoder
write	grfmt_hdr.cpp	/^bool HdrEncoder::write( const Mat& input_img, const std::vector<int>& params )$/;"	f	class:cv::HdrEncoder
write	grfmt_jpeg.cpp	/^bool JpegEncoder::write( const Mat& img, const std::vector<int>& params )$/;"	f	class:cv::JpegEncoder
write	grfmt_jpeg2000.cpp	/^bool  Jpeg2KEncoder::write( const Mat& _img, const std::vector<int>& )$/;"	f	class:cv::Jpeg2KEncoder
write	grfmt_png.cpp	/^bool  PngEncoder::write( const Mat& img, const std::vector<int>& params )$/;"	f	class:cv::PngEncoder
write	grfmt_pxm.cpp	/^bool  PxMEncoder::write( const Mat& img, const std::vector<int>& params )$/;"	f	class:cv::PxMEncoder
write	grfmt_sunras.cpp	/^bool  SunRasterEncoder::write( const Mat& img, const std::vector<int>& )$/;"	f	class:cv::SunRasterEncoder
write	grfmt_tiff.cpp	/^bool  TiffEncoder::write( const Mat& img, const std::vector<int>& params)$/;"	f	class:cv::TiffEncoder
write	grfmt_webp.cpp	/^bool WebPEncoder::write(const Mat& img, const std::vector<int>& params)$/;"	f	class:cv::WebPEncoder
writeBlock	bitstrm.cpp	/^void  WBaseStream::writeBlock()$/;"	f	class:cv::WBaseStream
writeComponent16u	grfmt_jpeg2000.cpp	/^bool  Jpeg2KEncoder::writeComponent16u( void *__img, const Mat& _img )$/;"	f	class:cv::Jpeg2KEncoder
writeComponent8u	grfmt_jpeg2000.cpp	/^bool  Jpeg2KEncoder::writeComponent8u( void *__img, const Mat& _img )$/;"	f	class:cv::Jpeg2KEncoder
writeDataToBuf	grfmt_png.cpp	/^void PngEncoder::writeDataToBuf(void* _png_ptr, uchar* src, size_t size)$/;"	f	class:cv::PngEncoder
writeHdr	grfmt_tiff.cpp	/^bool TiffEncoder::writeHdr(const Mat& _img)$/;"	f	class:cv::TiffEncoder
writeLibTiff	grfmt_tiff.cpp	/^bool  TiffEncoder::writeLibTiff( const Mat& img, const std::vector<int>& params)$/;"	f	class:cv::TiffEncoder
writeTag	grfmt_tiff.cpp	/^void  TiffEncoder::writeTag( WLByteStream& strm, TiffTag tag,$/;"	f	class:cv::TiffEncoder
write_ctable_pixel	grfmt_gdal.cpp	/^void write_ctable_pixel( const double& pixelValue,$/;"	f	namespace:cv
write_pixel	grfmt_gdal.cpp	/^void write_pixel( const double& pixelValue,$/;"	f	namespace:cv
~BaseImageDecoder	grfmt_base.hpp	/^    virtual ~BaseImageDecoder() {}$/;"	f	class:cv::BaseImageDecoder
~BaseImageEncoder	grfmt_base.hpp	/^    virtual ~BaseImageEncoder() {}$/;"	f	class:cv::BaseImageEncoder
~BmpDecoder	grfmt_bmp.cpp	/^BmpDecoder::~BmpDecoder()$/;"	f	class:cv::BmpDecoder
~BmpEncoder	grfmt_bmp.cpp	/^BmpEncoder::~BmpEncoder()$/;"	f	class:cv::BmpEncoder
~ExrDecoder	grfmt_exr.cpp	/^ExrDecoder::~ExrDecoder()$/;"	f	class:cv::ExrDecoder
~ExrEncoder	grfmt_exr.cpp	/^ExrEncoder::~ExrEncoder()$/;"	f	class:cv::ExrEncoder
~GdalDecoder	grfmt_gdal.cpp	/^GdalDecoder::~GdalDecoder(){$/;"	f	class:cv::GdalDecoder
~HdrDecoder	grfmt_hdr.cpp	/^HdrDecoder::~HdrDecoder()$/;"	f	class:cv::HdrDecoder
~HdrEncoder	grfmt_hdr.cpp	/^HdrEncoder::~HdrEncoder()$/;"	f	class:cv::HdrEncoder
~JasperInitializer	grfmt_jpeg2000.cpp	/^    ~JasperInitializer() { jas_cleanup(); }$/;"	f	struct:cv::JasperInitializer
~Jpeg2KDecoder	grfmt_jpeg2000.cpp	/^Jpeg2KDecoder::~Jpeg2KDecoder()$/;"	f	class:cv::Jpeg2KDecoder
~Jpeg2KEncoder	grfmt_jpeg2000.cpp	/^Jpeg2KEncoder::~Jpeg2KEncoder()$/;"	f	class:cv::Jpeg2KEncoder
~JpegDecoder	grfmt_jpeg.cpp	/^JpegDecoder::~JpegDecoder()$/;"	f	class:cv::JpegDecoder
~JpegEncoder	grfmt_jpeg.cpp	/^JpegEncoder::~JpegEncoder()$/;"	f	class:cv::JpegEncoder
~PngDecoder	grfmt_png.cpp	/^PngDecoder::~PngDecoder()$/;"	f	class:cv::PngDecoder
~PngEncoder	grfmt_png.cpp	/^PngEncoder::~PngEncoder()$/;"	f	class:cv::PngEncoder
~PxMDecoder	grfmt_pxm.cpp	/^PxMDecoder::~PxMDecoder()$/;"	f	class:cv::PxMDecoder
~PxMEncoder	grfmt_pxm.cpp	/^PxMEncoder::~PxMEncoder()$/;"	f	class:cv::PxMEncoder
~RBaseStream	bitstrm.cpp	/^RBaseStream::~RBaseStream()$/;"	f	class:cv::RBaseStream
~RLByteStream	bitstrm.cpp	/^RLByteStream::~RLByteStream()$/;"	f	class:cv::RLByteStream
~RMByteStream	bitstrm.cpp	/^RMByteStream::~RMByteStream()$/;"	f	class:cv::RMByteStream
~SunRasterDecoder	grfmt_sunras.cpp	/^SunRasterDecoder::~SunRasterDecoder()$/;"	f	class:cv::SunRasterDecoder
~SunRasterEncoder	grfmt_sunras.cpp	/^SunRasterEncoder::~SunRasterEncoder()$/;"	f	class:cv::SunRasterEncoder
~TiffDecoder	grfmt_tiff.cpp	/^TiffDecoder::~TiffDecoder()$/;"	f	class:cv::TiffDecoder
~TiffEncoder	grfmt_tiff.cpp	/^TiffEncoder::~TiffEncoder()$/;"	f	class:cv::TiffEncoder
~WBaseStream	bitstrm.cpp	/^WBaseStream::~WBaseStream()$/;"	f	class:cv::WBaseStream
~WLByteStream	bitstrm.cpp	/^WLByteStream::~WLByteStream()$/;"	f	class:cv::WLByteStream
~WMByteStream	bitstrm.cpp	/^WMByteStream::~WMByteStream()$/;"	f	class:cv::WMByteStream
~WebPDecoder	grfmt_webp.cpp	/^WebPDecoder::~WebPDecoder() {}$/;"	f	class:cv::WebPDecoder
~WebPEncoder	grfmt_webp.cpp	/^WebPEncoder::~WebPEncoder() { }$/;"	f	class:cv::WebPEncoder
