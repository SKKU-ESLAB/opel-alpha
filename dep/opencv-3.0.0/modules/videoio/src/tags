!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATE_EVENT_HANDLER	cap_msmf.hpp	490;"	d
ACTIVATE_EVENT_HANDLER	cap_msmf.hpp	573;"	d
ACTIVATE_LOCAL_OBJ	cap_msmf.hpp	489;"	d
ACTIVATE_LOCAL_OBJ	cap_msmf.hpp	572;"	d
ACTIVATE_LOCAL_OBJ_BASE	cap_msmf.hpp	488;"	d
ACTIVATE_LOCAL_OBJ_BASE	cap_msmf.hpp	571;"	d
ACTIVATE_OBJ	cap_msmf.hpp	491;"	d
ACTIVATE_OBJ	cap_msmf.hpp	574;"	d
ACTIVATE_STATIC_OBJ	cap_msmf.hpp	493;"	d
ACTIVATE_STATIC_OBJ	cap_msmf.hpp	584;"	d
AM_MEDIA_TYPE	cap_dshow.cpp	/^typedef _AMMediaType AM_MEDIA_TYPE;$/;"	t	file:
AVCodecTag	ffmpeg_codecs.hpp	/^typedef struct AVCodecTag {$/;"	s
AVCodecTag	ffmpeg_codecs.hpp	/^} AVCodecTag;$/;"	t	typeref:struct:AVCodecTag
AVERROR_EOF	cap_ffmpeg_impl.hpp	158;"	d
AVIChunkSizeIndex	cap_mjpeg_encoder.cpp	/^    std::vector<size_t> frameOffset, frameSize, AVIChunkSizeIndex, frameNumIndexes;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
AVIH_CC	cap_mjpeg_decoder.cpp	/^const uint32_t AVIH_CC = CV_FOURCC('a','v','i','h');$/;"	m	namespace:cv	file:
AVIH_STRH_SIZE	cap_mjpeg_encoder.cpp	/^static const int AVIH_STRH_SIZE = 56;$/;"	m	namespace:cv::mjpeg	file:
AVIIF_KEYFRAME	cap_mjpeg_encoder.cpp	/^static const int AVIIF_KEYFRAME = 0x10;$/;"	m	namespace:cv::mjpeg	file:
AVIX_CC	cap_mjpeg_decoder.cpp	/^const uint32_t AVIX_CC = CV_FOURCC('A','V','I','X');$/;"	m	namespace:cv	file:
AVI_CC	cap_mjpeg_decoder.cpp	/^const uint32_t AVI_CC  = CV_FOURCC('A','V','I',' ');$/;"	m	namespace:cv	file:
AVI_DWFLAG	cap_mjpeg_encoder.cpp	/^static const int AVI_DWFLAG = 0x00000910;$/;"	m	namespace:cv::mjpeg	file:
AVI_DWQUALITY	cap_mjpeg_encoder.cpp	/^static const int AVI_DWQUALITY = -1;$/;"	m	namespace:cv::mjpeg	file:
AVI_DWSCALE	cap_mjpeg_encoder.cpp	/^static const int AVI_DWSCALE = 1;$/;"	m	namespace:cv::mjpeg	file:
AVMEDIA_TYPE_VIDEO	cap_ffmpeg_impl.hpp	607;"	d
AVSEEK_FLAG_ANY	cap_ffmpeg_impl.hpp	371;"	d
AVSEEK_FLAG_FRAME	cap_ffmpeg_impl.hpp	368;"	d
AV_CODEC_ID_4XM	ffmpeg_codecs.hpp	132;"	d
AV_CODEC_ID_AASC	ffmpeg_codecs.hpp	143;"	d
AV_CODEC_ID_ASV1	ffmpeg_codecs.hpp	120;"	d
AV_CODEC_ID_ASV2	ffmpeg_codecs.hpp	121;"	d
AV_CODEC_ID_CINEPAK	ffmpeg_codecs.hpp	127;"	d
AV_CODEC_ID_CSCD	ffmpeg_codecs.hpp	150;"	d
AV_CODEC_ID_CYUV	ffmpeg_codecs.hpp	116;"	d
AV_CODEC_ID_DVVIDEO	ffmpeg_codecs.hpp	109;"	d
AV_CODEC_ID_FFV1	ffmpeg_codecs.hpp	123;"	d
AV_CODEC_ID_FFVHUFF	ffmpeg_codecs.hpp	115;"	d
AV_CODEC_ID_FLASHSV	ffmpeg_codecs.hpp	147;"	d
AV_CODEC_ID_FLV1	ffmpeg_codecs.hpp	133;"	d
AV_CODEC_ID_FRAPS	ffmpeg_codecs.hpp	145;"	d
AV_CODEC_ID_H261	ffmpeg_codecs.hpp	102;"	d
AV_CODEC_ID_H263	ffmpeg_codecs.hpp	99;"	d
AV_CODEC_ID_H263I	ffmpeg_codecs.hpp	101;"	d
AV_CODEC_ID_H263P	ffmpeg_codecs.hpp	100;"	d
AV_CODEC_ID_H264	ffmpeg_codecs.hpp	98;"	d
AV_CODEC_ID_HUFFYUV	ffmpeg_codecs.hpp	114;"	d
AV_CODEC_ID_INDEO2	ffmpeg_codecs.hpp	144;"	d
AV_CODEC_ID_INDEO3	ffmpeg_codecs.hpp	118;"	d
AV_CODEC_ID_JPEG2000	ffmpeg_codecs.hpp	156;"	d
AV_CODEC_ID_JPEGLS	ffmpeg_codecs.hpp	148;"	d
AV_CODEC_ID_KMVC	ffmpeg_codecs.hpp	152;"	d
AV_CODEC_ID_LJPEG	ffmpeg_codecs.hpp	113;"	d
AV_CODEC_ID_LOCO	ffmpeg_codecs.hpp	140;"	d
AV_CODEC_ID_MJPEG	ffmpeg_codecs.hpp	112;"	d
AV_CODEC_ID_MPEG1VIDEO	ffmpeg_codecs.hpp	110;"	d
AV_CODEC_ID_MPEG2VIDEO	ffmpeg_codecs.hpp	111;"	d
AV_CODEC_ID_MPEG4	ffmpeg_codecs.hpp	103;"	d
AV_CODEC_ID_MSMPEG4V1	ffmpeg_codecs.hpp	106;"	d
AV_CODEC_ID_MSMPEG4V2	ffmpeg_codecs.hpp	105;"	d
AV_CODEC_ID_MSMPEG4V3	ffmpeg_codecs.hpp	104;"	d
AV_CODEC_ID_MSRLE	ffmpeg_codecs.hpp	125;"	d
AV_CODEC_ID_MSVIDEO1	ffmpeg_codecs.hpp	126;"	d
AV_CODEC_ID_MSZH	ffmpeg_codecs.hpp	129;"	d
AV_CODEC_ID_NONE	ffmpeg_codecs.hpp	159;"	d
AV_CODEC_ID_QPEG	ffmpeg_codecs.hpp	138;"	d
AV_CODEC_ID_RAWVIDEO	ffmpeg_codecs.hpp	117;"	d
AV_CODEC_ID_SNOW	ffmpeg_codecs.hpp	131;"	d
AV_CODEC_ID_SVQ1	ffmpeg_codecs.hpp	134;"	d
AV_CODEC_ID_TARGA	ffmpeg_codecs.hpp	158;"	d
AV_CODEC_ID_THEORA	ffmpeg_codecs.hpp	141;"	d
AV_CODEC_ID_TRUEMOTION1	ffmpeg_codecs.hpp	128;"	d
AV_CODEC_ID_TRUEMOTION2	ffmpeg_codecs.hpp	146;"	d
AV_CODEC_ID_TSCC	ffmpeg_codecs.hpp	135;"	d
AV_CODEC_ID_ULTI	ffmpeg_codecs.hpp	136;"	d
AV_CODEC_ID_VC1	ffmpeg_codecs.hpp	149;"	d
AV_CODEC_ID_VCR1	ffmpeg_codecs.hpp	122;"	d
AV_CODEC_ID_VIXL	ffmpeg_codecs.hpp	137;"	d
AV_CODEC_ID_VMNC	ffmpeg_codecs.hpp	157;"	d
AV_CODEC_ID_VP3	ffmpeg_codecs.hpp	119;"	d
AV_CODEC_ID_VP5	ffmpeg_codecs.hpp	153;"	d
AV_CODEC_ID_VP6	ffmpeg_codecs.hpp	154;"	d
AV_CODEC_ID_VP6F	ffmpeg_codecs.hpp	155;"	d
AV_CODEC_ID_WMV1	ffmpeg_codecs.hpp	107;"	d
AV_CODEC_ID_WMV2	ffmpeg_codecs.hpp	108;"	d
AV_CODEC_ID_WMV3	ffmpeg_codecs.hpp	139;"	d
AV_CODEC_ID_WNV1	ffmpeg_codecs.hpp	142;"	d
AV_CODEC_ID_XAN_WC4	ffmpeg_codecs.hpp	124;"	d
AV_CODEC_ID_ZLIB	ffmpeg_codecs.hpp	130;"	d
AV_CODEC_ID_ZMBV	ffmpeg_codecs.hpp	151;"	d
AV_NOPTS_VALUE_	cap_ffmpeg_impl.hpp	152;"	d
AV_NOPTS_VALUE_	cap_ffmpeg_impl.hpp	154;"	d
AddAttribute	cap_msmf.hpp	/^    static HRESULT AddAttribute(_In_ GUID guidKey, _In_ ABI::Windows::Foundation::IPropertyValue *pValue, _In_ IMFAttributes* pAttr)$/;"	f	class:MediaSink
AddOutputNode	cap_msmf.cpp	/^HRESULT ImageGrabber::AddOutputNode($/;"	f	class:__anon1::ImageGrabber
AddRef	cap_dshow.cpp	/^    STDMETHODIMP_(ULONG) AddRef() { return 1; }$/;"	f	class:SampleGrabberCallback
AddRef	cap_msmf.cpp	/^STDMETHODIMP_(ULONG) ImageGrabber::AddRef()$/;"	f	class:__anon1::ImageGrabber
AddRef	cap_msmf.hpp	/^    ULONG STDMETHODCALLTYPE AddRef()$/;"	f	class:StreamSink
AddSourceNode	cap_msmf.cpp	/^HRESULT ImageGrabber::AddSourceNode($/;"	f	class:__anon1::ImageGrabber
AddStreamSink	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE AddStreamSink($/;"	f	class:MediaSink
AddStreamSink	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP AddStreamSink($/;"	f	class:Media::WrlSealed
Agile	agile_wrl.hpp	/^    class Agile$/;"	c
AgileHelper	agile_wrl.hpp	/^            AgileHelper(AgileHelper&& other) : _p(other._p), _release(other._release)$/;"	f	class:Details::AgileHelper
AgileHelper	agile_wrl.hpp	/^            AgileHelper(__abi_IUnknown* p, bool release = true) : _p(p), _release(release)$/;"	f	class:Details::AgileHelper
AgileHelper	agile_wrl.hpp	/^        class AgileHelper$/;"	c	namespace:Details
AgilePointer	agile_wrl.hpp	/^            AgilePointer = 1,$/;"	m	class:Agile::AgileState
AgileState	agile_wrl.hpp	/^        enum class AgileState$/;"	c	class:Agile
AgileTypeHelper	agile_wrl.hpp	/^        struct AgileTypeHelper$/;"	s	namespace:Details
ApproximateSyncGrabber	cap_openni.cpp	/^    ApproximateSyncGrabber( xn::Context &_context,$/;"	f	class:ApproximateSyncGrabber
ApproximateSyncGrabber	cap_openni.cpp	/^class ApproximateSyncGrabber$/;"	c	file:
ApproximateSynchronizer	cap_openni.cpp	/^        ApproximateSynchronizer( ApproximateSyncGrabber& _approxSyncGrabber ) :$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizer
ApproximateSynchronizer	cap_openni.cpp	/^    class ApproximateSynchronizer: public ApproximateSynchronizerBase$/;"	c	class:ApproximateSyncGrabber	file:
ApproximateSynchronizerBase	cap_openni.cpp	/^        ApproximateSynchronizerBase( ApproximateSyncGrabber& _approxSyncGrabber ) :$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizerBase
ApproximateSynchronizerBase	cap_openni.cpp	/^    class ApproximateSynchronizerBase$/;"	c	class:ApproximateSyncGrabber	file:
As	cap_msmf.hpp	/^    HRESULT As(_Inout_ U** lp) const throw()$/;"	f	class:ComPtr
As	cap_msmf.hpp	/^    HRESULT As(_Out_ ComPtr<U>* lp) const throw()$/;"	f	class:ComPtr
As	cap_winrt/MFIncludes.hpp	/^Microsoft::WRL::ComPtr<T> As(U* in)$/;"	f
As	cap_winrt/MFIncludes.hpp	/^Microsoft::WRL::ComPtr<T> As(const Microsoft::WRL::ComPtr<U>& in)$/;"	f
Attach	cap_msmf.hpp	/^    void Attach(_In_opt_ T* p2) throw()$/;"	f	class:ComPtr
AutoMF	cap_winrt/MFIncludes.hpp	/^    AutoMF()$/;"	f	class:AutoMF
AutoMF	cap_winrt/MFIncludes.hpp	/^class AutoMF$/;"	c
AviIndex	cap_mjpeg_decoder.cpp	/^struct AviIndex$/;"	s	namespace:cv	file:
AviMainHeader	cap_mjpeg_decoder.cpp	/^struct AviMainHeader$/;"	s	namespace:cv	file:
AviMjpegStream	cap_mjpeg_decoder.cpp	/^AviMjpegStream::AviMjpegStream(): m_stream_id(0), m_movi_start(0), m_movi_end(0), m_width(0), m_height(0), m_fps(0), m_is_indx_present(false)$/;"	f	class:cv::AviMjpegStream
AviMjpegStream	cap_mjpeg_decoder.cpp	/^class AviMjpegStream$/;"	c	namespace:cv	file:
AviStreamHeader	cap_mjpeg_decoder.cpp	/^struct AviStreamHeader$/;"	s	namespace:cv	file:
BEGIN_CALL_IN_CONTEXT	cap_msmf.hpp	387;"	d
BEGIN_CALL_IN_CONTEXT	cap_msmf.hpp	394;"	d
BEGIN_CREATE_ASYNC	cap_msmf.hpp	438;"	d
BEGIN_CREATE_ASYNC	cap_msmf.hpp	528;"	d
BITMAPINFO_8Bit	cap_vfw.cpp	/^struct BITMAPINFO_8Bit$/;"	s	file:
Back	cap_msmf.hpp	/^    Node* Back() const$/;"	f	class:List
BacklightCompensation	cap_msmf.cpp	/^        Parametr BacklightCompensation;$/;"	m	struct:__anon1::CamParametrs	file:
BeginGetEvent	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE BeginGetEvent($/;"	f	class:StreamSink
BeginGetEvent	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::BeginGetEvent(__in IMFAsyncCallback *callback, __in_opt IUnknown *state)$/;"	f	class:MediaStreamSink
BitStream	cap_mjpeg_encoder.cpp	/^    BitStream()$/;"	f	class:cv::mjpeg::BitStream
BitStream	cap_mjpeg_encoder.cpp	/^class BitStream$/;"	c	namespace:cv::mjpeg	file:
BitmapInfoHeader	cap_mjpeg_decoder.cpp	/^struct BitmapInfoHeader$/;"	s	namespace:cv	file:
Brightness	cap_msmf.cpp	/^        Parametr Brightness;$/;"	m	struct:__anon1::CamParametrs	file:
BufferCB	cap_dshow.cpp	/^    STDMETHODIMP BufferCB(double, BYTE *, long){$/;"	f	class:SampleGrabberCallback
C0_382	cap_mjpeg_encoder.cpp	/^static const int C0_382 = fix(0.382683432f, fixb);$/;"	m	namespace:cv::mjpeg	file:
C0_541	cap_mjpeg_encoder.cpp	/^static const int C0_541 = fix(0.541196100f, fixb);$/;"	m	namespace:cv::mjpeg	file:
C0_707	cap_mjpeg_encoder.cpp	/^static const int C0_707 = fix(0.707106781f, fixb);$/;"	m	namespace:cv::mjpeg	file:
C1_306	cap_mjpeg_encoder.cpp	/^static const int C1_306 = fix(1.306562965f, fixb);$/;"	m	namespace:cv::mjpeg	file:
CALC_FFMPEG_VERSION	cap_ffmpeg_impl.hpp	51;"	d
CAPTURE_MODE	cap_dshow.cpp	/^        GUID CAPTURE_MODE;$/;"	m	class:videoInput	file:
CBaseAttributes	cap_msmf.hpp	/^    CBaseAttributes()$/;"	f	class:CBaseAttributes
CBaseAttributes	cap_msmf.hpp	/^    CBaseAttributes(HRESULT& hr, IUnknown *pUnk)$/;"	f	class:CBaseAttributes
CBaseAttributes	cap_msmf.hpp	/^    CBaseAttributes(HRESULT& hr, UINT32 cInitialSize = 0)$/;"	f	class:CBaseAttributes
CBaseAttributes	cap_msmf.hpp	/^class CBaseAttributes : public TBase$/;"	c
CHANNEL_NUMBER	cap_libv4l.cpp	273;"	d	file:
CHANNEL_NUMBER	cap_v4l.cpp	248;"	d	file:
CHECK_HR	cap_msmf.cpp	1199;"	d	file:
CHK	cap_winrt/MFIncludes.hpp	58;"	d
CHKNULL	cap_winrt/MFIncludes.hpp	59;"	d
CHK_RETURN	cap_winrt/MFIncludes.hpp	62;"	d
CLAMP	cap_v4l.cpp	1936;"	d	file:
CLEAR	cap_OPEL.cpp	27;"	d	file:
CLEAR	cap_libv4l.cpp	244;"	d	file:
CLEAR	cap_v4l.cpp	214;"	d	file:
CMU_MAX_CAMERAS	cap_cmu.cpp	99;"	d	file:
CMU_numActiveCameras	cap_cmu.cpp	/^int             CMU_numActiveCameras = 0;$/;"	v
CMU_numCameras	cap_cmu.cpp	/^int             CMU_numCameras = 0;$/;"	v
CMU_theCamera	cap_cmu.cpp	/^C1394Camera     *CMU_theCamera = 0;$/;"	v
CMU_useCameraFlags	cap_cmu.cpp	/^bool            CMU_useCameraFlags[CMU_MAX_CAMERAS];$/;"	v
COLORSPACE_BGR	cap_mjpeg_encoder.cpp	/^enum { COLORSPACE_GRAY=0, COLORSPACE_RGBA=1, COLORSPACE_BGR=2, COLORSPACE_YUV444P=3 };$/;"	e	enum:cv::mjpeg::__anon13	file:
COLORSPACE_GRAY	cap_mjpeg_encoder.cpp	/^enum { COLORSPACE_GRAY=0, COLORSPACE_RGBA=1, COLORSPACE_BGR=2, COLORSPACE_YUV444P=3 };$/;"	e	enum:cv::mjpeg::__anon13	file:
COLORSPACE_RGBA	cap_mjpeg_encoder.cpp	/^enum { COLORSPACE_GRAY=0, COLORSPACE_RGBA=1, COLORSPACE_BGR=2, COLORSPACE_YUV444P=3 };$/;"	e	enum:cv::mjpeg::__anon13	file:
COLORSPACE_YUV444P	cap_mjpeg_encoder.cpp	/^enum { COLORSPACE_GRAY=0, COLORSPACE_RGBA=1, COLORSPACE_BGR=2, COLORSPACE_YUV444P=3 };$/;"	e	enum:cv::mjpeg::__anon13	file:
COLOR_ELEM	cap_gstreamer.cpp	77;"	d	file:
COLOR_ELEM	cap_gstreamer.cpp	79;"	d	file:
COLOR_ELEM	cap_gstreamer.cpp	81;"	d	file:
COMMA	cap_msmf.hpp	403;"	d
CR	cap_gphoto2.cpp	248;"	d	file:
CREATE_OR_CONTINUE_TASK	cap_msmf.hpp	443;"	d
CREATE_OR_CONTINUE_TASK	cap_msmf.hpp	533;"	d
CREATE_TASK	cap_msmf.hpp	442;"	d
CREATE_TASK	cap_msmf.hpp	532;"	d
CV_CAP_GSTREAMER_1394	precomp.hpp	134;"	d
CV_CAP_GSTREAMER_FILE	precomp.hpp	137;"	d
CV_CAP_GSTREAMER_V4L	precomp.hpp	135;"	d
CV_CAP_GSTREAMER_V4L2	precomp.hpp	136;"	d
CV_CAP_IEEE1394_COLOR	cap_cmu.cpp	/^static char CV_CAP_IEEE1394_COLOR[2][8] =$/;"	v	file:
CV_CAP_IEEE1394_COLOR_MONO	cap_cmu.cpp	114;"	d	file:
CV_CAP_IEEE1394_COLOR_MONO16	cap_cmu.cpp	115;"	d	file:
CV_CAP_IEEE1394_COLOR_RGB	cap_cmu.cpp	119;"	d	file:
CV_CAP_IEEE1394_COLOR_YUV411	cap_cmu.cpp	118;"	d	file:
CV_CAP_IEEE1394_COLOR_YUV422	cap_cmu.cpp	117;"	d	file:
CV_CAP_IEEE1394_COLOR_YUV444	cap_cmu.cpp	116;"	d	file:
CV_CAP_IEEE1394_FORMAT	cap_cmu.cpp	/^static char CV_CAP_IEEE1394_FORMAT[7][6] =$/;"	v	file:
CV_CAP_IEEE1394_FPS_15	cap_cmu.cpp	109;"	d	file:
CV_CAP_IEEE1394_FPS_1_875	cap_cmu.cpp	106;"	d	file:
CV_CAP_IEEE1394_FPS_30	cap_cmu.cpp	110;"	d	file:
CV_CAP_IEEE1394_FPS_3_75	cap_cmu.cpp	107;"	d	file:
CV_CAP_IEEE1394_FPS_60	cap_cmu.cpp	111;"	d	file:
CV_CAP_IEEE1394_FPS_7_5	cap_cmu.cpp	108;"	d	file:
CV_CAP_IEEE1394_MODE	cap_cmu.cpp	/^static char CV_CAP_IEEE1394_MODE[7][6] =$/;"	v	file:
CV_CAP_IEEE1394_SIZE_1024X768	cap_cmu.cpp	125;"	d	file:
CV_CAP_IEEE1394_SIZE_1280X960	cap_cmu.cpp	126;"	d	file:
CV_CAP_IEEE1394_SIZE_1600X1200	cap_cmu.cpp	127;"	d	file:
CV_CAP_IEEE1394_SIZE_160X120	cap_cmu.cpp	121;"	d	file:
CV_CAP_IEEE1394_SIZE_320X240	cap_cmu.cpp	122;"	d	file:
CV_CAP_IEEE1394_SIZE_640X480	cap_cmu.cpp	123;"	d	file:
CV_CAP_IEEE1394_SIZE_800X600	cap_cmu.cpp	124;"	d	file:
CV_CODEC	cap_ffmpeg_impl.hpp	163;"	d
CV_CODEC	cap_ffmpeg_impl.hpp	166;"	d
CV_CODEC_ID	cap_ffmpeg_impl.hpp	162;"	d
CV_CODEC_ID	cap_ffmpeg_impl.hpp	165;"	d
CV_COLOR_STREAM	cap_openni2.cpp	69;"	d	file:
CV_DC1394_CALL	cap_dc1394.cpp	113;"	d	file:
CV_DEPTH_STREAM	cap_openni2.cpp	68;"	d	file:
CV_FFMPEG_CAP_PROP_FOURCC	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_FOURCC=6,$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_FPS	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_FPS=5,$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_FRAME_COUNT	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_FRAME_COUNT=7$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_FRAME_HEIGHT	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_FRAME_HEIGHT=4,$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_FRAME_WIDTH	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_FRAME_WIDTH=3,$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_POS_AVI_RATIO	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_POS_AVI_RATIO=2,$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_POS_FRAMES	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_POS_FRAMES=1,$/;"	e	enum:__anon4
CV_FFMPEG_CAP_PROP_POS_MSEC	cap_ffmpeg_api.hpp	/^    CV_FFMPEG_CAP_PROP_POS_MSEC=0,$/;"	e	enum:__anon4
CV_PRINTABLE_CHAR	cap_ffmpeg_impl.hpp	1543;"	d
CV_STREAM_TIMEOUT	cap_openni2.cpp	66;"	d	file:
CV_TAG_TO_PRINTABLE_CHAR4	cap_ffmpeg_impl.hpp	1544;"	d
CV_WARN	cap_dc1394.cpp	108;"	d	file:
CV_WARN	cap_dc1394.cpp	110;"	d	file:
CV_WARN	cap_ffmpeg_impl.hpp	125;"	d
CV_WARN	cap_ffmpeg_impl.hpp	127;"	d
CV_WARN	cap_giganetix.cpp	58;"	d	file:
CV_WARN	cap_giganetix.cpp	60;"	d	file:
CV_WARN	cap_gstreamer.cpp	71;"	d	file:
CV_WARN	cap_gstreamer.cpp	73;"	d	file:
CV_WARN	cap_images.cpp	56;"	d	file:
CV_WARN	cap_images.cpp	58;"	d	file:
CV_WARN	cap_unicap.cpp	52;"	d	file:
CV_WARN	cap_unicap.cpp	54;"	d	file:
CamParametrs	cap_msmf.cpp	/^struct CamParametrs$/;"	s	namespace:__anon1	file:
Camera	cap_pvapi.cpp	/^    tCamera  Camera;$/;"	m	class:CvCaptureCAM_PvAPI	file:
Cancel	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP Cancel()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
CaptureContext	agile_wrl.hpp	/^        void CaptureContext()$/;"	f	class:Agile::AgileState
CaptureStreamType	cap_winrt/CaptureFrameGrabber.hpp	/^enum class CaptureStreamType$/;"	c	namespace:Media
CheckShutdown	cap_msmf.hpp	/^    HRESULT CheckShutdown() const$/;"	f	class:MediaSink
CheckShutdown	cap_msmf.hpp	/^    HRESULT CheckShutdown() const$/;"	f	class:StreamSink
Clear	cap_msmf.cpp	/^void MediaType::Clear()$/;"	f	class:__anon1::MediaType
Clear	cap_msmf.hpp	/^    virtual void Clear()$/;"	f	class:List
Clear	cap_msmf.hpp	/^    void Clear()$/;"	f	class:ComPtrList
Clear	cap_msmf.hpp	/^    void Clear(FN& clear_fn)$/;"	f	class:List
Close	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP Close()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
Closing	cap_winrt/CaptureFrameGrabber.hpp	/^        Closing,$/;"	m	class:Media::sealed::State
ColorEnable	cap_msmf.cpp	/^        Parametr ColorEnable;$/;"	m	struct:__anon1::CamParametrs	file:
ComAutoRelease	cap_msmf.hpp	/^class ComAutoRelease$/;"	c
ComPtr	cap_msmf.hpp	/^    ComPtr() throw()$/;"	f	class:ComPtr
ComPtr	cap_msmf.hpp	/^    ComPtr(T* lp) throw()$/;"	f	class:ComPtr
ComPtr	cap_msmf.hpp	/^    ComPtr(_In_ const ComPtr<T>& lp) throw()$/;"	f	class:ComPtr
ComPtr	cap_msmf.hpp	/^class ComPtr$/;"	c
ComPtrList	cap_msmf.hpp	/^class ComPtrList : public List<T*>$/;"	c
Compare	cap_msmf.hpp	/^    STDMETHODIMP Compare($/;"	f	class:CBaseAttributes
CompareItem	cap_msmf.hpp	/^    STDMETHODIMP CompareItem(REFGUID guidKey, REFPROPVARIANT Value, BOOL* pbResult)$/;"	f	class:CBaseAttributes
Concurrency_winrt	ppltasks_winrt.hpp	/^namespace Concurrency_winrt$/;"	n
Contrast	cap_msmf.cpp	/^        Parametr Contrast;$/;"	m	struct:__anon1::CamParametrs	file:
ConvertPropertiesToMediaType	cap_msmf.hpp	/^    static HRESULT ConvertPropertiesToMediaType(_In_ ABI::Windows::Media::MediaProperties::IMediaEncodingProperties *pMEP, _Outptr_ IMFMediaType **ppMT)$/;"	f	class:MediaSink
CopyAllItems	cap_msmf.hpp	/^    STDMETHODIMP CopyAllItems(IMFAttributes* pDest)$/;"	f	class:CBaseAttributes
CopyOutput	cap_winrt_video.cpp	/^void Video::CopyOutput() {$/;"	f	class:Video
CopyTo	cap_msmf.hpp	/^    _Check_return_ HRESULT CopyTo(_Deref_out_opt_ T** ppT) throw()$/;"	f	class:ComPtr
CreateInstance	cap_msmf.cpp	/^HRESULT ImageGrabber::CreateInstance(ImageGrabber **ppIG, unsigned int deviceID, bool synchronious)$/;"	f	class:__anon1::ImageGrabber
CreateInstance	cap_msmf.cpp	/^HRESULT ImageGrabberThread::CreateInstance(ImageGrabberThread **ppIGT, IMFMediaSource *pSource, unsigned int deviceID, bool synchronious)$/;"	f	class:__anon1::ImageGrabberThread
CreateInstance	cap_msmf.cpp	/^HRESULT ImageGrabberWinRT::CreateInstance(ImageGrabberWinRT **ppIG, bool synchronous)$/;"	f	class:__anon1::ImageGrabberWinRT
CreateInstance	cap_msmf.cpp	/^long RawImage::CreateInstance(RawImage **ppRImage,unsigned int size)$/;"	f	class:__anon1::RawImage
CreateTopology	cap_msmf.cpp	/^HRESULT ImageGrabber::CreateTopology(IMFMediaSource *pSource, IMFActivate *pSinkActivate, IMFTopology **ppTopo)$/;"	f	class:__anon1::ImageGrabber
Create_InputMediaStream_FFMPEG_Plugin	cap_ffmpeg_api.hpp	/^typedef struct InputMediaStream_FFMPEG* (*Create_InputMediaStream_FFMPEG_Plugin)(const char* fileName, int* codec, int* chroma_format, int* width, int* height);$/;"	t	typeref:struct:Create_InputMediaStream_FFMPEG_Plugin
Create_OutputMediaStream_FFMPEG_Plugin	cap_ffmpeg_api.hpp	/^typedef struct OutputMediaStream_FFMPEG* (*Create_OutputMediaStream_FFMPEG_Plugin)(const char* fileName, int width, int height, double fps);$/;"	t	typeref:struct:Create_OutputMediaStream_FFMPEG_Plugin
Created	cap_winrt/CaptureFrameGrabber.cpp	/^: _state(State::Created)$/;"	v
Created	cap_winrt/CaptureFrameGrabber.hpp	/^        Created,$/;"	m	class:Media::sealed::State
CurrentValue	cap_msmf.cpp	/^    long CurrentValue;$/;"	m	struct:__anon1::Parametr	file:
CvCapture	precomp.hpp	/^struct CvCapture$/;"	s
CvCaptureAVI_VFW	cap_vfw.cpp	/^    CvCaptureAVI_VFW()$/;"	f	class:CvCaptureAVI_VFW
CvCaptureAVI_VFW	cap_vfw.cpp	/^class CvCaptureAVI_VFW : public CvCapture$/;"	c	file:
CvCaptureAVI_XINE	cap_xine.cpp	/^CvCaptureAVI_XINE;$/;"	t	typeref:struct:CvCaptureAVI_XINE	file:
CvCaptureAVI_XINE	cap_xine.cpp	/^typedef struct CvCaptureAVI_XINE$/;"	s	file:
CvCaptureAVI_XINE_CPP	cap_xine.cpp	/^    CvCaptureAVI_XINE_CPP() { captureXINE = 0; }$/;"	f	class:CvCaptureAVI_XINE_CPP
CvCaptureAVI_XINE_CPP	cap_xine.cpp	/^class CvCaptureAVI_XINE_CPP : public CvCapture$/;"	c	file:
CvCaptureCAM_CMU	cap_cmu.cpp	/^    CvCaptureCAM_CMU()$/;"	f	class:CvCaptureCAM_CMU
CvCaptureCAM_CMU	cap_cmu.cpp	/^class CvCaptureCAM_CMU : public CvCapture$/;"	c	file:
CvCaptureCAM_DC1394	cap_dc1394.cpp	/^CvCaptureCAM_DC1394;$/;"	t	typeref:struct:CvCaptureCAM_DC1394	file:
CvCaptureCAM_DC1394	cap_dc1394.cpp	/^typedef struct CvCaptureCAM_DC1394$/;"	s	file:
CvCaptureCAM_DC1394_CPP	cap_dc1394.cpp	/^    CvCaptureCAM_DC1394_CPP() { captureDC1394 = 0; }$/;"	f	class:CvCaptureCAM_DC1394_CPP
CvCaptureCAM_DC1394_CPP	cap_dc1394.cpp	/^class CvCaptureCAM_DC1394_CPP : public CvCapture$/;"	c	file:
CvCaptureCAM_DC1394_v2_CPP	cap_dc1394_v2.cpp	/^CvCaptureCAM_DC1394_v2_CPP::CvCaptureCAM_DC1394_v2_CPP()$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
CvCaptureCAM_DC1394_v2_CPP	cap_dc1394_v2.cpp	/^class CvCaptureCAM_DC1394_v2_CPP : public CvCapture$/;"	c	file:
CvCaptureCAM_Giganetix	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::CvCaptureCAM_Giganetix()$/;"	f	class:CvCaptureCAM_Giganetix
CvCaptureCAM_Giganetix	cap_giganetix.cpp	/^class CvCaptureCAM_Giganetix : public CvCapture$/;"	c	file:
CvCaptureCAM_MSMF	cap_msmf.cpp	/^CvCaptureCAM_MSMF::CvCaptureCAM_MSMF():$/;"	f	class:CvCaptureCAM_MSMF
CvCaptureCAM_MSMF	cap_msmf.cpp	/^class CvCaptureCAM_MSMF : public CvCapture$/;"	c	file:
CvCaptureCAM_OPEL_CPP	cap_OPEL.cpp	/^CvCaptureCAM_OPEL_CPP::CvCaptureCAM_OPEL_CPP()$/;"	f	class:CvCaptureCAM_OPEL_CPP
CvCaptureCAM_OPEL_CPP	cap_OPEL.cpp	/^class CvCaptureCAM_OPEL_CPP : CvCapture$/;"	c	file:
CvCaptureCAM_PvAPI	cap_pvapi.cpp	/^CvCaptureCAM_PvAPI::CvCaptureCAM_PvAPI()$/;"	f	class:CvCaptureCAM_PvAPI
CvCaptureCAM_PvAPI	cap_pvapi.cpp	/^class CvCaptureCAM_PvAPI : public CvCapture$/;"	c	file:
CvCaptureCAM_V4L	cap_libv4l.cpp	/^CvCaptureCAM_V4L;$/;"	t	typeref:struct:CvCaptureCAM_V4L	file:
CvCaptureCAM_V4L	cap_libv4l.cpp	/^typedef struct CvCaptureCAM_V4L$/;"	s	file:
CvCaptureCAM_V4L	cap_v4l.cpp	/^CvCaptureCAM_V4L;$/;"	t	typeref:struct:CvCaptureCAM_V4L	file:
CvCaptureCAM_V4L	cap_v4l.cpp	/^typedef struct CvCaptureCAM_V4L$/;"	s	file:
CvCaptureCAM_V4L_CPP	cap_libv4l.cpp	/^    CvCaptureCAM_V4L_CPP() { captureV4L = 0; }$/;"	f	class:CvCaptureCAM_V4L_CPP
CvCaptureCAM_V4L_CPP	cap_libv4l.cpp	/^class CvCaptureCAM_V4L_CPP : CvCapture$/;"	c	file:
CvCaptureCAM_V4L_CPP	cap_v4l.cpp	/^    CvCaptureCAM_V4L_CPP() { captureV4L = 0; }$/;"	f	class:CvCaptureCAM_V4L_CPP
CvCaptureCAM_V4L_CPP	cap_v4l.cpp	/^class CvCaptureCAM_V4L_CPP : CvCapture$/;"	c	file:
CvCaptureCAM_VFW	cap_vfw.cpp	/^    CvCaptureCAM_VFW() { init(); }$/;"	f	class:CvCaptureCAM_VFW
CvCaptureCAM_VFW	cap_vfw.cpp	/^class CvCaptureCAM_VFW : public CvCapture$/;"	c	file:
CvCaptureCAM_XIMEA	cap_ximea.cpp	/^    CvCaptureCAM_XIMEA() { init(); }$/;"	f	class:CvCaptureCAM_XIMEA
CvCaptureCAM_XIMEA	cap_ximea.cpp	/^class CvCaptureCAM_XIMEA : public CvCapture$/;"	c	file:
CvCaptureFile_MSMF	cap_msmf.cpp	/^CvCaptureFile_MSMF::CvCaptureFile_MSMF():$/;"	f	class:CvCaptureFile_MSMF
CvCaptureFile_MSMF	cap_msmf.cpp	/^class CvCaptureFile_MSMF : public CvCapture$/;"	c	file:
CvCapture_FFMPEG	cap_ffmpeg_impl.hpp	/^struct CvCapture_FFMPEG$/;"	s
CvCapture_FFMPEG_proxy	cap_ffmpeg.cpp	/^    CvCapture_FFMPEG_proxy() { ffmpegCapture = 0; }$/;"	f	class:CvCapture_FFMPEG_proxy
CvCapture_FFMPEG_proxy	cap_ffmpeg.cpp	/^class CvCapture_FFMPEG_proxy :$/;"	c	file:
CvCapture_GStreamer	cap_gstreamer.cpp	/^    CvCapture_GStreamer() { init(); }$/;"	f	class:CvCapture_GStreamer
CvCapture_GStreamer	cap_gstreamer.cpp	/^class CvCapture_GStreamer : public CvCapture$/;"	c	file:
CvCapture_Images	cap_images.cpp	/^    CvCapture_Images()$/;"	f	class:CvCapture_Images
CvCapture_Images	cap_images.cpp	/^class CvCapture_Images : public CvCapture$/;"	c	file:
CvCapture_OpenNI	cap_openni.cpp	/^CvCapture_OpenNI::CvCapture_OpenNI( int index )$/;"	f	class:CvCapture_OpenNI
CvCapture_OpenNI	cap_openni.cpp	/^CvCapture_OpenNI::CvCapture_OpenNI(const char * filename)$/;"	f	class:CvCapture_OpenNI
CvCapture_OpenNI	cap_openni.cpp	/^class CvCapture_OpenNI : public CvCapture$/;"	c	file:
CvCapture_OpenNI2	cap_openni2.cpp	/^CvCapture_OpenNI2::CvCapture_OpenNI2( int index )$/;"	f	class:CvCapture_OpenNI2
CvCapture_OpenNI2	cap_openni2.cpp	/^CvCapture_OpenNI2::CvCapture_OpenNI2(const char * filename)$/;"	f	class:CvCapture_OpenNI2
CvCapture_OpenNI2	cap_openni2.cpp	/^class CvCapture_OpenNI2 : public CvCapture$/;"	c	file:
CvCapture_QT_Cam	cap_qt.cpp	/^    } CvCapture_QT_Cam;$/;"	t	typeref:struct:CvCapture_QT_Cam_barg	file:
CvCapture_QT_Cam	cap_qt.cpp	/^    } CvCapture_QT_Cam;$/;"	t	typeref:struct:CvCapture_QT_Cam_vdig	file:
CvCapture_QT_Cam_CPP	cap_qt.cpp	/^    CvCapture_QT_Cam_CPP() { captureQT = 0; }$/;"	f	class:CvCapture_QT_Cam_CPP
CvCapture_QT_Cam_CPP	cap_qt.cpp	/^class CvCapture_QT_Cam_CPP : public CvCapture$/;"	c	file:
CvCapture_QT_Cam_barg	cap_qt.cpp	/^    typedef struct CvCapture_QT_Cam_barg$/;"	s	file:
CvCapture_QT_Cam_vdig	cap_qt.cpp	/^    typedef struct CvCapture_QT_Cam_vdig$/;"	s	file:
CvCapture_QT_Movie	cap_qt.cpp	/^typedef struct CvCapture_QT_Movie$/;"	s	file:
CvCapture_QT_Movie	cap_qt.cpp	/^} CvCapture_QT_Movie;$/;"	t	typeref:struct:CvCapture_QT_Movie	file:
CvCapture_QT_Movie_CPP	cap_qt.cpp	/^    CvCapture_QT_Movie_CPP() { captureQT = 0; }$/;"	f	class:CvCapture_QT_Movie_CPP
CvCapture_QT_Movie_CPP	cap_qt.cpp	/^class CvCapture_QT_Movie_CPP : public CvCapture$/;"	c	file:
CvCapture_Unicap	cap_unicap.cpp	/^  CvCapture_Unicap() { init(); }$/;"	f	struct:CvCapture_Unicap
CvCapture_Unicap	cap_unicap.cpp	/^struct CvCapture_Unicap : public CvCapture$/;"	s	file:
CvCreateCameraCapture_Plugin	cap_ffmpeg_api.hpp	/^typedef void* (*CvCreateCameraCapture_Plugin)( int index );$/;"	t
CvCreateFileCapture_Plugin	cap_ffmpeg_api.hpp	/^typedef void* (*CvCreateFileCapture_Plugin)( const char* filename );$/;"	t
CvCreateVideoWriter_Plugin	cap_ffmpeg_api.hpp	/^typedef void* (*CvCreateVideoWriter_Plugin)( const char* filename, int fourcc,$/;"	t
CvDC1394	cap_dc1394_v2.cpp	/^CvDC1394::CvDC1394()$/;"	f	class:CvDC1394
CvDC1394	cap_dc1394_v2.cpp	/^struct CvDC1394$/;"	s	file:
CvGetCaptureProperty_Plugin	cap_ffmpeg_api.hpp	/^typedef double (*CvGetCaptureProperty_Plugin)( void* capture_handle, int prop_id );$/;"	t
CvGrabFrame_Plugin	cap_ffmpeg_api.hpp	/^typedef int (*CvGrabFrame_Plugin)( void* capture_handle );$/;"	t
CvReleaseCapture_Plugin	cap_ffmpeg_api.hpp	/^typedef void (*CvReleaseCapture_Plugin)( void** capture_handle );$/;"	t
CvReleaseVideoWriter_Plugin	cap_ffmpeg_api.hpp	/^typedef void (*CvReleaseVideoWriter_Plugin)( void** writer );$/;"	t
CvRetrieveFrame_Plugin	cap_ffmpeg_api.hpp	/^typedef int (*CvRetrieveFrame_Plugin)( void* capture_handle, unsigned char** data, int* step,$/;"	t
CvSetCaptureProperty_Plugin	cap_ffmpeg_api.hpp	/^typedef int (*CvSetCaptureProperty_Plugin)( void* capture_handle, int prop_id, double value );$/;"	t
CvVideoWriter	precomp.hpp	/^struct CvVideoWriter$/;"	s
CvVideoWriter_FFMPEG	cap_ffmpeg_impl.hpp	/^struct CvVideoWriter_FFMPEG$/;"	s
CvVideoWriter_FFMPEG_proxy	cap_ffmpeg.cpp	/^    CvVideoWriter_FFMPEG_proxy() { ffmpegWriter = 0; }$/;"	f	class:CvVideoWriter_FFMPEG_proxy
CvVideoWriter_FFMPEG_proxy	cap_ffmpeg.cpp	/^class CvVideoWriter_FFMPEG_proxy :$/;"	c	file:
CvVideoWriter_GStreamer	cap_gstreamer.cpp	/^    CvVideoWriter_GStreamer() { init(); }$/;"	f	class:CvVideoWriter_GStreamer
CvVideoWriter_GStreamer	cap_gstreamer.cpp	/^class CvVideoWriter_GStreamer : public CvVideoWriter$/;"	c	file:
CvVideoWriter_Images	cap_images.cpp	/^    CvVideoWriter_Images()$/;"	f	class:CvVideoWriter_Images
CvVideoWriter_Images	cap_images.cpp	/^class CvVideoWriter_Images : public CvVideoWriter$/;"	c	file:
CvVideoWriter_MSMF	cap_msmf.cpp	/^CvVideoWriter_MSMF::CvVideoWriter_MSMF():$/;"	f	class:CvVideoWriter_MSMF
CvVideoWriter_MSMF	cap_msmf.cpp	/^class CvVideoWriter_MSMF : public CvVideoWriter$/;"	c	file:
CvVideoWriter_QT	cap_qt.cpp	/^typedef struct CvVideoWriter_QT {$/;"	s	file:
CvVideoWriter_QT	cap_qt.cpp	/^} CvVideoWriter_QT;$/;"	t	typeref:struct:CvVideoWriter_QT	file:
CvVideoWriter_QT_CPP	cap_qt.cpp	/^    CvVideoWriter_QT_CPP() { writerQT = 0; }$/;"	f	class:CvVideoWriter_QT_CPP
CvVideoWriter_QT_CPP	cap_qt.cpp	/^class CvVideoWriter_QT_CPP : public CvVideoWriter$/;"	c	file:
CvVideoWriter_VFW	cap_vfw.cpp	/^    CvVideoWriter_VFW() { init(); }$/;"	f	class:CvVideoWriter_VFW
CvVideoWriter_VFW	cap_vfw.cpp	/^class CvVideoWriter_VFW : public CvVideoWriter$/;"	c	file:
CvWriteFrame_Plugin	cap_ffmpeg_api.hpp	/^typedef int (*CvWriteFrame_Plugin)( void* writer_handle, const unsigned char* data, int step,$/;"	t
DCT_DESCALE	cap_mjpeg_encoder.cpp	645;"	d	file:
DEFAULT_BLOCK_SIZE	cap_mjpeg_encoder.cpp	/^        DEFAULT_BLOCK_SIZE = (1 << 15),$/;"	e	enum:cv::mjpeg::BitStream::__anon14	file:
DEFAULT_IS_CIRCLE_BUFFER	cap_openni.cpp	/^    static const int DEFAULT_IS_CIRCLE_BUFFER = 0;$/;"	m	class:CvCapture_OpenNI	file:
DEFAULT_IS_CIRCLE_BUFFER	cap_openni2.cpp	/^    static const int DEFAULT_IS_CIRCLE_BUFFER = 0;$/;"	m	class:CvCapture_OpenNI2	file:
DEFAULT_MAX_BUFFER_SIZE	cap_openni.cpp	/^    static const int DEFAULT_MAX_BUFFER_SIZE = 2;$/;"	m	class:CvCapture_OpenNI	file:
DEFAULT_MAX_BUFFER_SIZE	cap_openni.cpp	/^    static const int DEFAULT_MAX_BUFFER_SIZE = 8;$/;"	m	class:CvCapture_OpenNI	file:
DEFAULT_MAX_BUFFER_SIZE	cap_openni2.cpp	/^    static const int DEFAULT_MAX_BUFFER_SIZE = 2;$/;"	m	class:CvCapture_OpenNI2	file:
DEFAULT_MAX_BUFFER_SIZE	cap_openni2.cpp	/^    static const int DEFAULT_MAX_BUFFER_SIZE = 8;$/;"	m	class:CvCapture_OpenNI2	file:
DEFAULT_MAX_TIME_DURATION	cap_openni.cpp	/^    static const int DEFAULT_MAX_TIME_DURATION = 20;$/;"	m	class:CvCapture_OpenNI	file:
DEFAULT_MAX_TIME_DURATION	cap_openni2.cpp	/^    static const int DEFAULT_MAX_TIME_DURATION = 20;$/;"	m	class:CvCapture_OpenNI2	file:
DEFAULT_V4L_BUFFERS	cap_libv4l.cpp	279;"	d	file:
DEFAULT_V4L_BUFFERS	cap_v4l.cpp	254;"	d	file:
DEFAULT_V4L_HEIGHT	cap_libv4l.cpp	271;"	d	file:
DEFAULT_V4L_HEIGHT	cap_v4l.cpp	246;"	d	file:
DEFAULT_V4L_WIDTH	cap_libv4l.cpp	270;"	d	file:
DEFAULT_V4L_WIDTH	cap_v4l.cpp	245;"	d	file:
DEFINE_RET_FORMAL	cap_msmf.hpp	446;"	d
DEFINE_RET_FORMAL	cap_msmf.hpp	536;"	d
DEFINE_RET_TYPE	cap_msmf.hpp	445;"	d
DEFINE_RET_TYPE	cap_msmf.hpp	535;"	d
DEFINE_RET_VAL	cap_msmf.hpp	444;"	d
DEFINE_RET_VAL	cap_msmf.hpp	534;"	d
DEFINE_TASK	cap_msmf.hpp	441;"	d
DEFINE_TASK	cap_msmf.hpp	531;"	d
DELAY	cap_dc1394.cpp	118;"	d	file:
DEREF_AGILE_WRL_OBJ	cap_msmf.hpp	485;"	d
DEREF_AGILE_WRL_OBJ	cap_msmf.hpp	568;"	d
DEREF_AS_NATIVE_WRL_OBJ	cap_msmf.hpp	486;"	d
DEREF_AS_NATIVE_WRL_OBJ	cap_msmf.hpp	569;"	d
DEREF_WRL_OBJ	cap_msmf.hpp	484;"	d
DEREF_WRL_OBJ	cap_msmf.hpp	567;"	d
DEVICE_ASUS_XTION	cap_openni.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI::__anon12	file:
DEVICE_ASUS_XTION	cap_openni2.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI2::__anon11	file:
DEVICE_DEFAULT	cap_openni.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI::__anon12	file:
DEVICE_DEFAULT	cap_openni2.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI2::__anon11	file:
DEVICE_MAX	cap_openni.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI::__anon12	file:
DEVICE_MAX	cap_openni2.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI2::__anon11	file:
DEVICE_MS_KINECT	cap_openni.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI::__anon12	file:
DEVICE_MS_KINECT	cap_openni2.cpp	/^    enum { DEVICE_DEFAULT=0, DEVICE_MS_KINECT=0, DEVICE_ASUS_XTION=1, DEVICE_MAX=1 };$/;"	e	enum:CvCapture_OpenNI2::__anon11	file:
DPO	cap_msmf.cpp	/^DPO::DPO(void):verbose(true)$/;"	f	class:__anon1::DPO
DPO	cap_msmf.cpp	/^class DPO$/;"	c	namespace:__anon1	file:
DWORD	cap_mjpeg_decoder.cpp	/^typedef uint32_t DWORD;$/;"	t	namespace:cv	file:
DebugPrintOut	cap_dshow.cpp	/^static void DebugPrintOut(const char *format, ...)$/;"	f	file:
DebugPrintOut	cap_dshow.cpp	357;"	d	file:
DebugPrintOut	cap_msmf.cpp	300;"	d	file:
DebugPrintOut	cap_msmf.cpp	302;"	d	file:
Default	cap_msmf.cpp	/^    long Default;$/;"	m	struct:__anon1::Parametr	file:
DeleteAllItems	cap_msmf.hpp	/^    STDMETHODIMP DeleteAllItems()$/;"	f	class:CBaseAttributes
DeleteItem	cap_msmf.hpp	/^    STDMETHODIMP DeleteItem(REFGUID guidKey)$/;"	f	class:CBaseAttributes
DerefHelper	cap_msmf.hpp	/^struct DerefHelper$/;"	s
DerefHelper	cap_msmf.hpp	/^struct DerefHelper<T*>$/;"	s
DerefType	cap_msmf.hpp	/^    typedef T DerefType;$/;"	t	struct:DerefHelper
DeserializeFromBlob	cap_msmf.hpp	/^    HRESULT DeserializeFromBlob(const UINT8* pBuffer, UINT cbSize)$/;"	f	class:CBaseAttributes
DeserializeFromStream	cap_msmf.hpp	/^    HRESULT DeserializeFromStream(DWORD dwOptions, IStream* pStm)$/;"	f	class:CBaseAttributes
Detach	cap_msmf.hpp	/^    T* Detach() throw()$/;"	f	class:ComPtr
Details	agile_wrl.hpp	/^    namespace Details$/;"	n
DigitalCameraCapture	cap_gphoto2.cpp	/^DigitalCameraCapture::DigitalCameraCapture()$/;"	f	class:cv::gphoto2::DigitalCameraCapture
DigitalCameraCapture	cap_gphoto2.cpp	/^DigitalCameraCapture::DigitalCameraCapture(const String & deviceName)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
DigitalCameraCapture	cap_gphoto2.cpp	/^DigitalCameraCapture::DigitalCameraCapture(int index)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
DigitalCameraCapture	cap_gphoto2.cpp	/^class DigitalCameraCapture: public IVideoCapture$/;"	c	namespace:cv::gphoto2	file:
DoCreateTask	ppltasks_winrt.hpp	/^        void DoCreateTask(_Function _func, const _TaskCreationCallstack & _callstack)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
END_CALL_IN_CONTEXT	cap_msmf.hpp	389;"	d
END_CALL_IN_CONTEXT	cap_msmf.hpp	395;"	d
END_CALL_IN_CONTEXT_BASE	cap_msmf.hpp	391;"	d
END_CALL_IN_CONTEXT_BASE	cap_msmf.hpp	397;"	d
END_CREATE_ASYNC	cap_msmf.hpp	439;"	d
END_CREATE_ASYNC	cap_msmf.hpp	529;"	d
ERROR	cap_gphoto2.cpp	/^        ERROR = (int) 'E',$/;"	e	enum:cv::gphoto2::DigitalCameraCapture::MsgType	file:
EXIT	precomp.hpp	81;"	d
EndGetEvent	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE EndGetEvent($/;"	f	class:StreamSink
EndGetEvent	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::EndGetEvent(__in IMFAsyncResult *result, __deref_out IMFMediaEvent **event)$/;"	f	class:MediaStreamSink
EndPosition	cap_msmf.hpp	/^    POSITION EndPosition() const$/;"	f	class:List
Equals	cap_msmf.cpp	/^inline bool Guid::Equals(Guid __guidArg)$/;"	f	class:Guid
Equals	cap_msmf.cpp	/^inline bool Guid::Equals(__rcGUID_t __guidArg)$/;"	f	class:Guid
Errcode	cap_pvapi.cpp	/^    tPvErr   Errcode;$/;"	m	class:CvCaptureCAM_PvAPI	file:
ExceptionBoundary	cap_winrt/MFIncludes.hpp	/^HRESULT ExceptionBoundary(Lambda&& lambda)$/;"	f
Exposure	cap_msmf.cpp	/^        Parametr Exposure;$/;"	m	struct:__anon1::CamParametrs	file:
FORMAT	cap_gstreamer.cpp	848;"	d	file:
FORMAT	cap_gstreamer.cpp	913;"	d	file:
FULL_GST_VERSION	cap_gstreamer.cpp	62;"	d	file:
FinishAsync	cap_winrt/CaptureFrameGrabber.cpp	/^task<void> Media::CaptureFrameGrabber::FinishAsync()$/;"	f	class:Media::CaptureFrameGrabber
FirstCapture	cap_libv4l.cpp	/^    int FirstCapture;$/;"	m	struct:CvCaptureCAM_V4L	file:
FirstCapture	cap_v4l.cpp	/^    int FirstCapture;$/;"	m	struct:CvCaptureCAM_V4L	file:
Flag	cap_msmf.cpp	/^    long Flag;$/;"	m	struct:__anon1::Parametr	file:
Flush	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE Flush(void) {$/;"	f	class:StreamSink
Flush	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::Flush()$/;"	f	class:MediaStreamSink
Focus	cap_msmf.cpp	/^        Parametr Focus;$/;"	m	struct:__anon1::CamParametrs	file:
ForEach	cap_msmf.hpp	/^    HRESULT ForEach(ComPtrList<T> &col, TFunc fn)$/;"	f	class:MediaSink
FormatReader	cap_msmf.cpp	/^FormatReader::FormatReader(void)$/;"	f	class:__anon1::FormatReader
FormatReader	cap_msmf.cpp	/^class FormatReader$/;"	c	namespace:__anon1	file:
FourCC2GUID	cap_msmf.cpp	/^const GUID CvVideoWriter_MSMF::FourCC2GUID(int fourcc)$/;"	f	class:CvVideoWriter_MSMF
Frame	cap_pvapi.cpp	/^        tPvFrame        Frame;$/;"	m	struct:CvCaptureCAM_PvAPI::__anon2	file:
FrameRateMap	cap_msmf.cpp	/^typedef std::map<UINT64, SUBTYPEMap> FrameRateMap;$/;"	t	namespace:__anon1	file:
Front	cap_msmf.hpp	/^    Node* Front() const$/;"	f	class:List
FrontPosition	cap_msmf.hpp	/^    POSITION FrontPosition()$/;"	f	class:List
GET_CURRENT_CONTEXT	cap_msmf.hpp	400;"	d
GET_STL_STRING	cap_msmf.hpp	450;"	d
GET_STL_STRING	cap_msmf.hpp	541;"	d
GET_STL_STRING_RAW	cap_msmf.hpp	451;"	d
GET_STL_STRING_RAW	cap_msmf.hpp	542;"	d
GET_WRL_OBJ_FROM_OBJ	cap_msmf.hpp	468;"	d
GET_WRL_OBJ_FROM_OBJ	cap_msmf.hpp	558;"	d
GET_WRL_OBJ_FROM_REF	cap_msmf.hpp	466;"	d
GET_WRL_OBJ_FROM_REF	cap_msmf.hpp	556;"	d
GPhoto2Exception	cap_gphoto2.cpp	/^    GPhoto2Exception(const char * methodStr, int gPhoto2Result)$/;"	f	class:cv::gphoto2::GPhoto2Exception
GPhoto2Exception	cap_gphoto2.cpp	/^class GPhoto2Exception: public std::exception$/;"	c	namespace:cv::gphoto2	file:
Gain	cap_msmf.cpp	/^        Parametr Gain;$/;"	m	struct:__anon1::CamParametrs	file:
Gamma	cap_msmf.cpp	/^        Parametr Gamma;$/;"	m	struct:__anon1::CamParametrs	file:
Get	cap_msmf.hpp	/^    T* Get() const throw()$/;"	f	class:ComPtr
GetAddressOf	cap_msmf.hpp	/^    T* const* GetAddressOf() const throw()$/;"	f	class:ComPtr
GetAddressOf	cap_msmf.hpp	/^    T** GetAddressOf() throw()$/;"	f	class:ComPtr
GetAllocatedBlob	cap_msmf.hpp	/^    STDMETHODIMP GetAllocatedBlob(REFGUID guidKey, UINT8** ppBuf, UINT32* pcbSize)$/;"	f	class:CBaseAttributes
GetAllocatedString	cap_msmf.hpp	/^    STDMETHODIMP GetAllocatedString(REFGUID guidKey, LPWSTR* ppwszValue, UINT32* pcchLength)$/;"	f	class:CBaseAttributes
GetBack	cap_msmf.hpp	/^    HRESULT GetBack(T *ppItem)$/;"	f	class:List
GetBlob	cap_msmf.hpp	/^    STDMETHODIMP GetBlob(REFGUID guidKey, UINT8* pBuf, UINT32 cbBufSize, UINT32* pcbBlobSize)$/;"	f	class:CBaseAttributes
GetBlobSize	cap_msmf.hpp	/^    STDMETHODIMP GetBlobSize(REFGUID guidKey, UINT32* pcbBlobSize)$/;"	f	class:CBaseAttributes
GetCharacteristics	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetCharacteristics($/;"	f	class:MediaSink
GetCharacteristics	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP GetCharacteristics(_Out_ DWORD *characteristics)$/;"	f	class:Media::WrlSealed
GetCount	cap_msmf.hpp	/^    DWORD GetCount() const { return m_count; }$/;"	f	class:List
GetCount	cap_msmf.hpp	/^    STDMETHODIMP GetCount(UINT32* pcItems)$/;"	f	class:CBaseAttributes
GetCurrentMediaType	cap_msmf.hpp	/^    STDMETHODIMP GetCurrentMediaType(IMFMediaType **ppMediaType)$/;"	f	class:StreamSink
GetCurrentMediaType	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetCurrentMediaType(__deref_out_opt IMFMediaType **mediaType)$/;"	f	class:MediaStreamSink
GetDouble	cap_msmf.hpp	/^    STDMETHODIMP GetDouble(REFGUID guidKey, double* pfValue)$/;"	f	class:CBaseAttributes
GetEvent	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetEvent($/;"	f	class:StreamSink
GetEvent	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetEvent(__in DWORD flags, __deref_out IMFMediaEvent **event)$/;"	f	class:MediaStreamSink
GetFrameAsync	cap_winrt/CaptureFrameGrabber.cpp	/^task<ComPtr<IMF2DBuffer2>> Media::CaptureFrameGrabber::GetFrameAsync()$/;"	f	class:Media::CaptureFrameGrabber
GetFront	cap_msmf.hpp	/^    HRESULT GetFront(T *ppItem)$/;"	f	class:List
GetGUID	cap_msmf.hpp	/^    STDMETHODIMP GetGUID(REFGUID guidKey, GUID* pguidValue)$/;"	f	class:CBaseAttributes
GetGUIDNameConstNew	cap_msmf.cpp	/^LPCWSTR GetGUIDNameConstNew(const GUID& guid)$/;"	f	namespace:__anon1
GetGUIDNameNew	cap_msmf.cpp	/^HRESULT GetGUIDNameNew(const GUID& guid, WCHAR **ppwsz)$/;"	f	namespace:__anon1
GetIdentifier	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetIdentifier($/;"	f	class:StreamSink
GetIdentifier	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetIdentifier(__out DWORD *identifier)$/;"	f	class:MediaStreamSink
GetItem	cap_msmf.hpp	/^    HRESULT GetItem(const Node *pNode, Ptr* ppItem)$/;"	f	class:ComPtrList
GetItem	cap_msmf.hpp	/^    STDMETHODIMP GetItem(REFGUID guidKey, PROPVARIANT* pValue)$/;"	f	class:CBaseAttributes
GetItem	cap_msmf.hpp	/^    virtual HRESULT GetItem(const Node *pNode, T* ppItem)$/;"	f	class:List
GetItemByIndex	cap_msmf.hpp	/^    STDMETHODIMP GetItemByIndex(UINT32 unIndex, GUID* pguidKey, PROPVARIANT* pValue)$/;"	f	class:CBaseAttributes
GetItemPos	cap_msmf.hpp	/^    HRESULT GetItemPos(POSITION pos, T *ppItem)$/;"	f	class:List
GetItemType	cap_msmf.hpp	/^    STDMETHODIMP GetItemType(REFGUID guidKey, MF_ATTRIBUTE_TYPE* pType)$/;"	f	class:CBaseAttributes
GetMajorType	cap_msmf.hpp	/^    STDMETHODIMP GetMajorType(GUID *pguidMajorType)$/;"	f	class:StreamSink
GetMajorType	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetMajorType(__out GUID *majorType)$/;"	f	class:MediaStreamSink
GetMediaSink	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetMediaSink($/;"	f	class:StreamSink
GetMediaSink	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetMediaSink(__deref_out IMFMediaSink **sink)$/;"	f	class:MediaStreamSink
GetMediaTypeByIndex	cap_msmf.hpp	/^    STDMETHODIMP GetMediaTypeByIndex($/;"	f	class:StreamSink
GetMediaTypeByIndex	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetMediaTypeByIndex(__in DWORD \/*index*\/, __deref_out  IMFMediaType **mediaType)$/;"	f	class:MediaStreamSink
GetMediaTypeCount	cap_msmf.hpp	/^    STDMETHODIMP GetMediaTypeCount(DWORD *pdwTypeCount)$/;"	f	class:StreamSink
GetMediaTypeCount	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetMediaTypeCount(__out DWORD *typeCount)$/;"	f	class:MediaStreamSink
GetMediaTypeHandler	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetMediaTypeHandler($/;"	f	class:StreamSink
GetMediaTypeHandler	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::GetMediaTypeHandler(__deref_out IMFMediaTypeHandler **handler)$/;"	f	class:MediaStreamSink
GetParametr	cap_msmf.cpp	/^unsigned int *GetParametr(GUID guid, MediaType &out)$/;"	f	namespace:__anon1
GetPresentationClock	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetPresentationClock($/;"	f	class:MediaSink
GetPresentationClock	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP GetPresentationClock(_COM_Outptr_ IMFPresentationClock **clock)$/;"	f	class:Media::WrlSealed
GetProxy	agile_wrl.hpp	/^        __declspec(no_refcount) inline HRESULT GetProxy(T *ObjectIn, IUnknown *ContextCallBack, T **Proxy)$/;"	f	namespace:Details
GetRatio	cap_msmf.hpp	/^    HRESULT GetRatio(REFGUID guidKey, UINT32* pnNumerator, UINT32* punDenominator)$/;"	f	class:CBaseAttributes
GetResults	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP GetResults()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
GetResults	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP GetResults(_ReturnType* results)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
GetResults	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP GetResults(typename _Attributes::_ReturnType_abi* results)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
GetSize	cap_msmf.hpp	/^    HRESULT GetSize(REFGUID guidKey, UINT32* punWidth, UINT32* punHeight)$/;"	f	class:CBaseAttributes
GetStreamId	cap_msmf.hpp	/^    static DWORD GetStreamId(ABI::Windows::Media::Capture::MediaStreamType mediaStreamType)$/;"	f	class:MediaSink
GetStreamSinkById	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetStreamSinkById($/;"	f	class:MediaSink
GetStreamSinkById	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP GetStreamSinkById(DWORD identifier, _COM_Outptr_ IMFStreamSink **streamSink)$/;"	f	class:Media::WrlSealed
GetStreamSinkByIndex	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetStreamSinkByIndex($/;"	f	class:MediaSink
GetStreamSinkByIndex	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP GetStreamSinkByIndex(DWORD index, _COM_Outptr_ IMFStreamSink **streamSink)$/;"	f	class:Media::WrlSealed
GetStreamSinkCount	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE GetStreamSinkCount(DWORD *pStreamSinkCount) {$/;"	f	class:MediaSink
GetStreamSinkCount	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP GetStreamSinkCount(_Out_ DWORD *streamSinkCount)$/;"	f	class:Media::WrlSealed
GetString	cap_msmf.hpp	/^    STDMETHODIMP GetString(REFGUID guidKey, LPWSTR pwszValue, UINT32 cchBufSize, UINT32* pcchLength)$/;"	f	class:CBaseAttributes
GetStringLength	cap_msmf.hpp	/^    STDMETHODIMP GetStringLength(REFGUID guidKey, UINT32* pcchLength)$/;"	f	class:CBaseAttributes
GetUINT32	cap_msmf.hpp	/^    STDMETHODIMP GetUINT32(REFGUID guidKey, UINT32* punValue)$/;"	f	class:CBaseAttributes
GetUINT64	cap_msmf.hpp	/^    STDMETHODIMP GetUINT64(REFGUID guidKey, UINT64* punValue)$/;"	f	class:CBaseAttributes
GetUnknown	cap_msmf.hpp	/^    STDMETHODIMP GetUnknown(REFGUID guidKey, REFIID riid, LPVOID* ppv)$/;"	f	class:CBaseAttributes
Guid	cap_msmf.cpp	/^inline Guid::Guid() : __a(0), __b(0), __c(0), __d(0), __e(0), __f(0), __g(0), __h(0), __i(0), __j(0), __k(0)$/;"	f	class:Guid
Guid	cap_msmf.cpp	/^inline Guid::Guid(__rcGUID_t __guid) :$/;"	f	class:Guid
Guid	cap_msmf.cpp	/^inline Guid::Guid(unsigned int __aArg, unsigned short __bArg, unsigned short __cArg, const unsigned __int8 __dArg[8]) :$/;"	f	class:Guid
Guid	cap_msmf.cpp	/^inline Guid::Guid(unsigned int __aArg, unsigned short __bArg, unsigned short __cArg, unsigned __int8 __dArg,$/;"	f	class:Guid
Guid	cap_msmf.cpp	/^struct Guid$/;"	s	file:
HAVE_CAMV4L2	cap_v4l.cpp	241;"	d	file:
HAVE_CONCURRENCY	cap_msmf.cpp	56;"	d	file:
HAVE_FFMPEG_AVCODEC_H	cap_ffmpeg_impl.hpp	92;"	d
HAVE_FFMPEG_AVFORMAT_H	ffmpeg_codecs.hpp	69;"	d
HAVE_FFMPEG_SWSCALE	cap_ffmpeg_impl.hpp	74;"	d
HAVE_FFMPEG_SWSCALE_H	cap_ffmpeg_impl.hpp	94;"	d
HAVE_LIBAVCODEC_AVCODEC_H	cap_ffmpeg_impl.hpp	87;"	d
HAVE_LIBAVFORMAT_AVFORMAT_H	ffmpeg_codecs.hpp	67;"	d
HAVE_LIBSWSCALE_SWSCALE_H	cap_ffmpeg_impl.hpp	89;"	d
HAVE_TBB	cap_openni.cpp	48;"	d	file:
HAVE_TBB	cap_openni2.cpp	48;"	d	file:
HDRL_CC	cap_mjpeg_decoder.cpp	/^const uint32_t HDRL_CC = CV_FOURCC('h','d','r','l');$/;"	m	namespace:cv	file:
HEADER	cap_dshow.cpp	266;"	d	file:
Handle	cap_pvapi.cpp	/^        tPvHandle       Handle;$/;"	m	struct:CvCaptureCAM_PvAPI::__anon2	file:
HandleXiResult	cap_ximea.cpp	75;"	d	file:
Hue	cap_msmf.cpp	/^        Parametr Hue;$/;"	m	struct:__anon1::CamParametrs	file:
ICustomStreamSink	cap_msmf.hpp	2;"	d
IDX1_CC	cap_mjpeg_decoder.cpp	/^const uint32_t IDX1_CC = CV_FOURCC('i','d','x','1');$/;"	m	namespace:cv	file:
IF_EQUAL_RETURN	cap_msmf.cpp	1013;"	d	file:
IID_ICustomStreamSink	cap_msmf.hpp	/^EXTERN_C const IID IID_ICustomStreamSink;$/;"	v
INFO_CC	cap_mjpeg_decoder.cpp	/^const uint32_t INFO_CC = CV_FOURCC('I','N','F','O');$/;"	m	namespace:cv	file:
INT64_C	ffmpeg_codecs.hpp	53;"	d
INVALID_COORDINATE_VAL	cap_openni.cpp	/^    static const int INVALID_COORDINATE_VAL = 0;$/;"	m	class:CvCapture_OpenNI	file:
INVALID_COORDINATE_VAL	cap_openni2.cpp	/^    static const int INVALID_COORDINATE_VAL = 0;$/;"	m	class:CvCapture_OpenNI2	file:
INVALID_PIXEL_VAL	cap_openni.cpp	/^    static const int INVALID_PIXEL_VAL = 0;$/;"	m	class:CvCapture_OpenNI	file:
INVALID_PIXEL_VAL	cap_openni2.cpp	/^    static const int INVALID_PIXEL_VAL = 0;$/;"	m	class:CvCapture_OpenNI2	file:
IS_AGILE	agile_wrl.hpp	37;"	d
IVideoCapture	precomp.hpp	/^    class IVideoCapture$/;"	c	namespace:cv
IVideoCapture_create	cap.cpp	/^static Ptr<IVideoCapture> IVideoCapture_create(const String& filename)$/;"	f	namespace:cv
IVideoCapture_create	cap.cpp	/^static Ptr<IVideoCapture> IVideoCapture_create(int index)$/;"	f	namespace:cv
IVideoWriter	precomp.hpp	/^    class IVideoWriter$/;"	c	namespace:cv
IVideoWriter_create	cap.cpp	/^static Ptr<IVideoWriter> IVideoWriter_create(const String& filename, int _fourcc, double fps, Size frameSize, bool isColor)$/;"	f	namespace:cv
ImageGrabber	cap_msmf.cpp	/^ImageGrabber::ImageGrabber(unsigned int deviceID, bool synchronous):$/;"	f	class:__anon1::ImageGrabber
ImageGrabber	cap_msmf.cpp	/^class ImageGrabber : public ImageGrabberCallback$/;"	c	namespace:__anon1	file:
ImageGrabberCallback	cap_msmf.cpp	/^ImageGrabberCallback::ImageGrabberCallback(bool synchronous):$/;"	f	class:__anon1::ImageGrabberCallback
ImageGrabberCallback	cap_msmf.cpp	/^class ImageGrabberCallback : public IMFSampleGrabberSinkCallback$/;"	c	namespace:__anon1	file:
ImageGrabberThread	cap_msmf.cpp	/^ImageGrabberThread::ImageGrabberThread(IMFMediaSource *pSource, unsigned int deviceID, bool synchronious) :$/;"	f	class:__anon1::ImageGrabberThread
ImageGrabberThread	cap_msmf.cpp	/^class ImageGrabberThread$/;"	c	namespace:__anon1	file:
ImageGrabberWinRT	cap_msmf.cpp	/^ImageGrabberWinRT::ImageGrabberWinRT(bool synchronous):$/;"	f	class:__anon1::ImageGrabberWinRT
ImageGrabberWinRT	cap_msmf.cpp	/^class ImageGrabberWinRT :$/;"	c	namespace:__anon1	file:
Image_FFMPEG	cap_ffmpeg_impl.hpp	/^struct Image_FFMPEG$/;"	s
Impl	cap_ffmpeg_impl.hpp	/^struct ImplMutex::Impl$/;"	s	class:ImplMutex
ImplMutex	cap_ffmpeg_impl.hpp	/^    ImplMutex() { init(); }$/;"	f	class:ImplMutex
ImplMutex	cap_ffmpeg_impl.hpp	/^class ImplMutex$/;"	c
Init	cap_ffmpeg.cpp	/^    static void Init()$/;"	f	class:icvInitFFMPEG
Initialize	cap_msmf.hpp	/^    HRESULT Initialize()$/;"	f	class:StreamSink
Initialize	cap_msmf.hpp	/^    HRESULT Initialize(IUnknown *pUnk)$/;"	f	class:CBaseAttributes
Initialize	cap_msmf.hpp	/^    HRESULT Initialize(UINT32 cInitialSize = 0)$/;"	f	class:CBaseAttributes
InitializeSinkWriter	cap_msmf.cpp	/^HRESULT CvVideoWriter_MSMF::InitializeSinkWriter(const char* filename)$/;"	f	class:CvVideoWriter_MSMF
InputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^struct InputMediaStream_FFMPEG$/;"	s
InsertAfter	cap_msmf.hpp	/^    HRESULT InsertAfter(Ptr item, Node *pBefore)$/;"	f	class:ComPtrList
InsertAfter	cap_msmf.hpp	/^    virtual HRESULT InsertAfter(T item, Node *pBefore)$/;"	f	class:List
InsertBack	cap_msmf.hpp	/^    HRESULT InsertBack(T item)$/;"	f	class:List
InsertFront	cap_msmf.hpp	/^    HRESULT InsertFront(T item)$/;"	f	class:List
InsertPos	cap_msmf.hpp	/^    HRESULT InsertPos(POSITION pos, T item)$/;"	f	class:List
IntelPerCStreamBase	cap_intelperc.cpp	/^IntelPerCStreamBase::IntelPerCStreamBase()$/;"	f	class:cv::IntelPerCStreamBase
IntelPerCStreamBase	cap_intelperc.hpp	/^class IntelPerCStreamBase$/;"	c	namespace:cv
IntelPerCStreamDepth	cap_intelperc.cpp	/^IntelPerCStreamDepth::IntelPerCStreamDepth()$/;"	f	class:cv::IntelPerCStreamDepth
IntelPerCStreamDepth	cap_intelperc.hpp	/^class IntelPerCStreamDepth$/;"	c	namespace:cv
IntelPerCStreamImage	cap_intelperc.cpp	/^IntelPerCStreamImage::IntelPerCStreamImage()$/;"	f	class:cv::IntelPerCStreamImage
IntelPerCStreamImage	cap_intelperc.hpp	/^class IntelPerCStreamImage$/;"	c	namespace:cv
InternalFFMpegRegister	cap_ffmpeg_impl.hpp	/^    InternalFFMpegRegister()$/;"	f	class:InternalFFMpegRegister
InternalFFMpegRegister	cap_ffmpeg_impl.hpp	/^class InternalFFMpegRegister$/;"	c
InternalSetCurrentMediaType	cap_winrt/MediaStreamSink.cpp	/^void MediaStreamSink::InternalSetCurrentMediaType(__in const ComPtr<IMFMediaType>& mediaType)$/;"	f	class:MediaStreamSink
Iris	cap_msmf.cpp	/^        Parametr Iris;$/;"	m	struct:__anon1::CamParametrs	file:
IsEmpty	cap_msmf.hpp	/^    bool IsEmpty() const$/;"	f	class:List
IsMediaTypeSupported	cap_msmf.hpp	/^    STDMETHODIMP IsMediaTypeSupported($/;"	f	class:StreamSink
IsMediaTypeSupported	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::IsMediaTypeSupported(__in IMFMediaType *mediaType, __deref_out_opt  IMFMediaType **closestMediaType)$/;"	f	class:MediaStreamSink
Item	cap_msmf.hpp	/^        T Item() const { return item; }$/;"	f	struct:List::Node
JPUT_BITS	cap_mjpeg_encoder.cpp	1247;"	d	file:
JPUT_HUFF	cap_mjpeg_encoder.cpp	1259;"	d	file:
JUNK_CC	cap_mjpeg_decoder.cpp	/^const uint32_t JUNK_CC = CV_FOURCC('J','U','N','K');$/;"	m	namespace:cv	file:
JUNK_SEEK	cap_mjpeg_encoder.cpp	/^static const int JUNK_SEEK = 4096;$/;"	m	namespace:cv::mjpeg	file:
LIMIT	cap_v4l.cpp	1410;"	d	file:
LIST_CC	cap_mjpeg_decoder.cpp	/^const uint32_t LIST_CC = CV_FOURCC('L','I','S','T');$/;"	m	namespace:cv	file:
LONG	cap_mjpeg_decoder.cpp	/^typedef int32_t  LONG;$/;"	t	namespace:cv	file:
List	cap_msmf.hpp	/^    List()$/;"	f	class:List
List	cap_msmf.hpp	/^class List$/;"	c
LockCallBack	cap_ffmpeg_impl.hpp	/^static int LockCallBack(void **mutex, AVLockOp op)$/;"	f
LockStore	cap_msmf.hpp	/^    STDMETHODIMP LockStore()$/;"	f	class:CBaseAttributes
LogAttributeValueByIndexNew	cap_msmf.cpp	/^HRESULT LogAttributeValueByIndexNew(IMFAttributes *pAttr, DWORD index, MediaType &out)$/;"	f	namespace:__anon1
LogUINT32AsUINT64New	cap_msmf.cpp	/^void LogUINT32AsUINT64New(const PROPVARIANT& var, UINT32 &uHigh, UINT32 &uLow)$/;"	f	namespace:__anon1
LogVideoAreaNew	cap_msmf.cpp	/^HRESULT LogVideoAreaNew(const PROPVARIANT& var)$/;"	f	namespace:__anon1
MAKE_ARRAY_TYPE	cap_msmf.hpp	112;"	d
MAKE_ENUM	cap_msmf.hpp	244;"	d
MAKE_ENUM	cap_msmf.hpp	248;"	d
MAKE_ENUM_PAIR	cap_msmf.hpp	245;"	d
MAKE_ENUM_PAIR	cap_msmf.hpp	249;"	d
MAKE_MAP	cap_msmf.hpp	243;"	d
MAKE_MAP	cap_msmf.hpp	247;"	d
MAKE_OBJ_REF	cap_msmf.hpp	454;"	d
MAKE_OBJ_REF	cap_msmf.hpp	545;"	d
MAKE_PROP	cap_msmf.hpp	107;"	d
MAKE_PROPERTY	cap_msmf.hpp	457;"	d
MAKE_PROPERTY	cap_msmf.hpp	548;"	d
MAKE_PROPERTY_BACKING	cap_msmf.hpp	456;"	d
MAKE_PROPERTY_BACKING	cap_msmf.hpp	547;"	d
MAKE_PROPERTY_STRING	cap_msmf.hpp	458;"	d
MAKE_PROPERTY_STRING	cap_msmf.hpp	550;"	d
MAKE_READONLY_PROPERTY	cap_msmf.hpp	459;"	d
MAKE_READONLY_PROPERTY	cap_msmf.hpp	552;"	d
MAKE_STRING	cap_msmf.hpp	449;"	d
MAKE_STRING	cap_msmf.hpp	540;"	d
MAKE_TYPE	cap_msmf.hpp	60;"	d
MAKE_WRL_AGILE_REF	cap_msmf.hpp	455;"	d
MAKE_WRL_AGILE_REF	cap_msmf.hpp	546;"	d
MAKE_WRL_OBJ	cap_msmf.hpp	452;"	d
MAKE_WRL_OBJ	cap_msmf.hpp	543;"	d
MAKE_WRL_REF	cap_msmf.hpp	453;"	d
MAKE_WRL_REF	cap_msmf.hpp	544;"	d
MAX_BYTES_PER_SEC	cap_mjpeg_encoder.cpp	/^static const int MAX_BYTES_PER_SEC = 99999999;$/;"	m	namespace:cv::mjpeg	file:
MAX_CAMERAS	cap_dc1394.cpp	171;"	d	file:
MAX_CAMERAS	cap_libv4l.cpp	274;"	d	file:
MAX_CAMERAS	cap_pvapi.cpp	69;"	d	file:
MAX_CAMERAS	cap_v4l.cpp	249;"	d	file:
MAX_DEVICE_DRIVER_NAME	cap_libv4l.cpp	285;"	d	file:
MAX_DEVICE_DRIVER_NAME	cap_v4l.cpp	259;"	d	file:
MAX_PORTS	cap_dc1394.cpp	170;"	d	file:
MAX_V4L_BUFFERS	cap_libv4l.cpp	278;"	d	file:
MAX_V4L_BUFFERS	cap_v4l.cpp	253;"	d	file:
MEDIASUBTYPE_GREY	cap_dshow.cpp	/^        GUID MEDIASUBTYPE_GREY;$/;"	m	class:videoInput	file:
MEDIASUBTYPE_Y8	cap_dshow.cpp	/^        GUID MEDIASUBTYPE_Y8;$/;"	m	class:videoInput	file:
MEDIASUBTYPE_Y800	cap_dshow.cpp	/^        GUID MEDIASUBTYPE_Y800;$/;"	m	class:videoInput	file:
MF_MT_ALL_SAMPLES_INDEPENDENT	cap_msmf.cpp	/^    unsigned int MF_MT_ALL_SAMPLES_INDEPENDENT;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_AM_FORMAT_TYPE	cap_msmf.cpp	/^    GUID MF_MT_AM_FORMAT_TYPE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_DEFAULT_STRIDE	cap_msmf.cpp	/^    int MF_MT_DEFAULT_STRIDE; \/\/ stride is negative if image is bottom-up$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FIXED_SIZE_SAMPLES	cap_msmf.cpp	/^    unsigned int MF_MT_FIXED_SIZE_SAMPLES;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_RATE_DENOMINATOR	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_RATE_DENOMINATOR;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_RATE_NUMERATOR	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_RATE_NUMERATOR;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_RATE_RANGE_MAX	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_RATE_RANGE_MAX;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_RATE_RANGE_MAX_low	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_RATE_RANGE_MAX_low;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_RATE_RANGE_MIN	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_RATE_RANGE_MIN;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_RATE_RANGE_MIN_low	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_RATE_RANGE_MIN_low;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_FRAME_SIZE	cap_msmf.cpp	/^    unsigned int MF_MT_FRAME_SIZE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_INTERLACE_MODE	cap_msmf.cpp	/^    unsigned int MF_MT_INTERLACE_MODE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_MAJOR_TYPE	cap_msmf.cpp	/^    GUID MF_MT_MAJOR_TYPE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_PIXEL_ASPECT_RATIO	cap_msmf.cpp	/^    unsigned int MF_MT_PIXEL_ASPECT_RATIO;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_PIXEL_ASPECT_RATIO_low	cap_msmf.cpp	/^    unsigned int MF_MT_PIXEL_ASPECT_RATIO_low;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_SAMPLE_SIZE	cap_msmf.cpp	/^    unsigned int MF_MT_SAMPLE_SIZE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_SUBTYPE	cap_msmf.cpp	/^    GUID MF_MT_SUBTYPE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_VIDEO_CHROMA_SITING	cap_msmf.cpp	/^    unsigned int MF_MT_VIDEO_CHROMA_SITING;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_VIDEO_LIGHTING	cap_msmf.cpp	/^    unsigned int MF_MT_VIDEO_LIGHTING;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_VIDEO_NOMINAL_RANGE	cap_msmf.cpp	/^    unsigned int MF_MT_VIDEO_NOMINAL_RANGE;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_VIDEO_PRIMARIES	cap_msmf.cpp	/^    unsigned int MF_MT_VIDEO_PRIMARIES;$/;"	m	struct:__anon1::MediaType	file:
MF_MT_YUV_MATRIX	cap_msmf.cpp	/^    unsigned int MF_MT_YUV_MATRIX;$/;"	m	struct:__anon1::MediaType	file:
MF_PROP_SAMPLEGRABBERCALLBACK	cap_msmf.hpp	219;"	d
MF_PROP_VIDENCPROPS	cap_msmf.hpp	221;"	d
MF_PROP_VIDTYPE	cap_msmf.hpp	220;"	d
MIN	cap_ffmpeg_impl.hpp	148;"	d
MJPG_CC	cap_mjpeg_decoder.cpp	/^const uint32_t MJPG_CC = CV_FOURCC('M','J','P','G');$/;"	m	namespace:cv	file:
MKTAG	ffmpeg_codecs.hpp	87;"	d
MONO16_BPP	cap_dc1394.cpp	121;"	d	file:
MOVI_CC	cap_mjpeg_decoder.cpp	/^const uint32_t MOVI_CC = CV_FOURCC('m','o','v','i');$/;"	m	namespace:cv	file:
MainThreadFunction	cap_msmf.cpp	/^DWORD WINAPI MainThreadFunction( LPVOID lpParam )$/;"	f	namespace:__anon1
MarshalQI	cap_msmf.hpp	/^    HRESULT MarshalQI(REFIID riid, LPVOID* ppv)$/;"	f	class:StreamSink
Max	cap_msmf.cpp	/^    long Max;$/;"	m	struct:__anon1::Parametr	file:
Media	cap_winrt/CaptureFrameGrabber.hpp	/^namespace Media {$/;"	n
Media	cap_winrt/MediaSink.hpp	/^namespace Media {$/;"	n
Media	cap_winrt/MediaStreamSink.hpp	/^namespace Media {$/;"	n
MediaSink	cap_msmf.hpp	/^    MediaSink() : m_IsShutdown(false), m_llStartTime(0) {$/;"	f	class:MediaSink
MediaSink	cap_msmf.hpp	/^ActivatableClass(MediaSink);$/;"	v
MediaSink	cap_msmf.hpp	/^class MediaSink :$/;"	c
MediaSourceLock	cap_msmf.cpp	/^        MediaSourceLock,$/;"	e	enum:__anon1::videoDevice::typeLock	file:
MediaStreamSink	cap_winrt/MediaStreamSink.cpp	/^MediaStreamSink::MediaStreamSink($/;"	f	class:MediaStreamSink
MediaType	cap_msmf.cpp	/^MediaType::MediaType()$/;"	f	class:__anon1::MediaType
MediaType	cap_msmf.cpp	/^struct MediaType$/;"	s	namespace:__anon1	file:
Media_Foundation	cap_msmf.cpp	/^Media_Foundation::Media_Foundation(void)$/;"	f	class:__anon1::Media_Foundation
Media_Foundation	cap_msmf.cpp	/^class Media_Foundation$/;"	c	namespace:__anon1	file:
MemDelete	cap_msmf.hpp	/^class MemDelete$/;"	c
Min	cap_msmf.cpp	/^    long Min;$/;"	m	struct:__anon1::Parametr	file:
MjpegInputStream	cap_mjpeg_decoder.cpp	/^MjpegInputStream::MjpegInputStream(): m_is_valid(false), m_f(0)$/;"	f	class:cv::MjpegInputStream
MjpegInputStream	cap_mjpeg_decoder.cpp	/^MjpegInputStream::MjpegInputStream(const String& filename): m_is_valid(false), m_f(0)$/;"	f	class:cv::MjpegInputStream
MjpegInputStream	cap_mjpeg_decoder.cpp	/^class MjpegInputStream$/;"	c	namespace:cv	file:
MotionJpegCapture	cap_mjpeg_decoder.cpp	/^MotionJpegCapture::MotionJpegCapture(const String& filename)$/;"	f	class:cv::MotionJpegCapture
MotionJpegCapture	cap_mjpeg_decoder.cpp	/^class MotionJpegCapture: public IVideoCapture$/;"	c	namespace:cv	file:
MotionJpegWriter	cap_mjpeg_encoder.cpp	/^    MotionJpegWriter() { rawstream = false; }$/;"	f	class:cv::mjpeg::MotionJpegWriter
MotionJpegWriter	cap_mjpeg_encoder.cpp	/^    MotionJpegWriter(const String& filename, double fps, Size size, bool iscolor)$/;"	f	class:cv::mjpeg::MotionJpegWriter
MotionJpegWriter	cap_mjpeg_encoder.cpp	/^class MotionJpegWriter : public IVideoWriter$/;"	c	namespace:cv::mjpeg	file:
MsgType	cap_gphoto2.cpp	/^    enum MsgType$/;"	g	class:cv::gphoto2::DigitalCameraCapture	file:
MultipleResults	ppltasks_winrt.hpp	/^        MultipleResults = 0x0002$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncResultType
MyDeleteMediaType	cap_dshow.cpp	/^static void MyDeleteMediaType(AM_MEDIA_TYPE *pmt)$/;"	f	file:
MyFreeMediaType	cap_dshow.cpp	/^static void MyFreeMediaType(AM_MEDIA_TYPE& mt){$/;"	f	file:
NDEBUG	cap_xine.cpp	846;"	d	file:
NIMG	cap_dc1394_v2.cpp	/^    enum { NIMG = 2 };$/;"	e	enum:CvCaptureCAM_DC1394_v2_CPP::__anon10	file:
NUM_BUFFERS	cap_dc1394.cpp	172;"	d	file:
Next	cap_msmf.hpp	/^    POSITION Next(const POSITION pos)$/;"	f	class:List
NoOp	cap_msmf.hpp	/^struct NoOp$/;"	s
Node	cap_msmf.hpp	/^        Node() : prev(nullptr), next(nullptr)$/;"	f	struct:List::Node
Node	cap_msmf.hpp	/^        Node(T item) : prev(nullptr), next(nullptr)$/;"	f	struct:List::Node
Node	cap_msmf.hpp	/^    struct Node$/;"	s	class:List
NonAgilePointer	agile_wrl.hpp	/^            NonAgilePointer = 0,$/;"	m	class:Agile::AgileState
NukeDownstream	cap_dshow.cpp	/^void videoDevice::NukeDownstream(IBaseFilter *pBF){$/;"	f	class:videoDevice
Num	cap_msmf.cpp	/^    long readInfoOfDevice(MAKE_WRL_REF(_IDeviceInformation) pDevice, unsigned int Num);$/;"	m	class:__anon1::videoDevice	file:
OPENCV_DEFAULT_BUF_INDEX	cap_OPEL.cpp	38;"	d	file:
OPENCV_DEFAULT_BUF_SIZE	cap_OPEL.cpp	37;"	d	file:
OPENCV_DEFAULT_HEIGHT	cap_OPEL.cpp	35;"	d	file:
OPENCV_DEFAULT_WIDTH	cap_OPEL.cpp	34;"	d	file:
OPENCV_FFMPEG_API	cap_ffmpeg_api.hpp	10;"	d
OPENCV_FFMPEG_API	cap_ffmpeg_api.hpp	12;"	d
OPENCV_FFMPEG_API	cap_ffmpeg_api.hpp	14;"	d
OPENCV_NO_FRAMES_WRITTEN_CODE	cap_ffmpeg_impl.hpp	/^static const int OPENCV_NO_FRAMES_WRITTEN_CODE = 1000;$/;"	v
OTHER	cap_gphoto2.cpp	/^        OTHER = (int) 'O'$/;"	e	enum:cv::gphoto2::DigitalCameraCapture::MsgType	file:
OffsetToFloatNew	cap_msmf.cpp	/^float OffsetToFloatNew(const MFOffset& offset)$/;"	f	namespace:__anon1
OnClockPause	cap_msmf.cpp	/^    STDMETHODIMP OnClockPause(MFTIME hnsSystemTime) { return ImageGrabberCallback::OnClockPause(hnsSystemTime); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnClockPause	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnClockPause(MFTIME hnsSystemTime)$/;"	f	class:__anon1::ImageGrabberCallback
OnClockPause	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE OnClockPause($/;"	f	class:MediaSink
OnClockPause	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP OnClockPause(MFTIME \/*hnsSystemTime*\/)$/;"	f	class:Media::WrlSealed
OnClockRestart	cap_msmf.cpp	/^    STDMETHODIMP OnClockRestart(MFTIME hnsSystemTime) { return ImageGrabberCallback::OnClockRestart(hnsSystemTime); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnClockRestart	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnClockRestart(MFTIME hnsSystemTime)$/;"	f	class:__anon1::ImageGrabberCallback
OnClockRestart	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE OnClockRestart($/;"	f	class:MediaSink
OnClockRestart	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP OnClockRestart(MFTIME \/*hnsSystemTime*\/)$/;"	f	class:Media::WrlSealed
OnClockSetRate	cap_msmf.cpp	/^    STDMETHODIMP OnClockSetRate(MFTIME hnsSystemTime, float flRate) { return ImageGrabberCallback::OnClockSetRate(hnsSystemTime, flRate); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnClockSetRate	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnClockSetRate(MFTIME hnsSystemTime, float flRate)$/;"	f	class:__anon1::ImageGrabberCallback
OnClockSetRate	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE OnClockSetRate($/;"	f	class:MediaSink
OnClockSetRate	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP OnClockSetRate(MFTIME \/*hnsSystemTime*\/, float \/*flRate*\/)$/;"	f	class:Media::WrlSealed
OnClockStart	cap_msmf.cpp	/^    STDMETHODIMP OnClockStart(MFTIME hnsSystemTime, LONGLONG llClockStartOffset) { return ImageGrabberCallback::OnClockStart(hnsSystemTime, llClockStartOffset); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnClockStart	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnClockStart(MFTIME hnsSystemTime, LONGLONG llClockStartOffset)$/;"	f	class:__anon1::ImageGrabberCallback
OnClockStart	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE OnClockStart($/;"	f	class:MediaSink
OnClockStart	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP OnClockStart(MFTIME \/*hnsSystemTime*\/, LONGLONG \/*llClockStartOffset*\/)$/;"	f	class:Media::WrlSealed
OnClockStop	cap_msmf.cpp	/^    STDMETHODIMP OnClockStop(MFTIME hnsSystemTime) { return ImageGrabberCallback::OnClockStop(hnsSystemTime); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnClockStop	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnClockStop(MFTIME hnsSystemTime)$/;"	f	class:__anon1::ImageGrabberCallback
OnClockStop	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE OnClockStop($/;"	f	class:MediaSink
OnClockStop	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP OnClockStop(MFTIME \/*hnsSystemTime*\/)$/;"	f	class:Media::WrlSealed
OnProcessSample	cap_msmf.cpp	/^    STDMETHODIMP OnProcessSample(REFGUID guidMajorMediaType, DWORD dwSampleFlags,$/;"	f	class:__anon1::ImageGrabberWinRT
OnProcessSample	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnProcessSample(REFGUID guidMajorMediaType, DWORD dwSampleFlags,$/;"	f	class:__anon1::ImageGrabberCallback
OnSetPresentationClock	cap_msmf.cpp	/^    STDMETHODIMP OnSetPresentationClock(IMFPresentationClock* pClock) { return ImageGrabberCallback::OnSetPresentationClock(pClock); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnSetPresentationClock	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnSetPresentationClock(IMFPresentationClock* pClock)$/;"	f	class:__anon1::ImageGrabberCallback
OnShutdown	cap_msmf.cpp	/^    STDMETHODIMP OnShutdown() { return ImageGrabberCallback::OnShutdown(); }$/;"	f	class:__anon1::ImageGrabberWinRT
OnShutdown	cap_msmf.cpp	/^STDMETHODIMP ImageGrabberCallback::OnShutdown()$/;"	f	class:__anon1::ImageGrabberCallback
OpenLock	cap_msmf.cpp	/^        OpenLock$/;"	e	enum:__anon1::videoDevice::typeLock	file:
OriginateError	cap_winrt/MFIncludes.hpp	/^HRESULT OriginateError(__in HRESULT hr, __in wchar_t const (&str)[N])$/;"	f
OriginateError	cap_winrt/MFIncludes.hpp	/^inline HRESULT OriginateError(__in HRESULT hr)$/;"	f
OutputMap	cap_openni.cpp	/^    struct OutputMap$/;"	s	class:CvCapture_OpenNI	file:
OutputMap	cap_openni2.cpp	/^    struct OutputMap$/;"	s	class:CvCapture_OpenNI2	file:
OutputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^struct OutputMediaStream_FFMPEG$/;"	s
PALETTE_BGR24	cap_v4l.cpp	/^  PALETTE_BGR24 = 1,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_MJPEG	cap_v4l.cpp	/^  PALETTE_MJPEG,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_RGB24	cap_v4l.cpp	/^  PALETTE_RGB24$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_SBGGR8	cap_v4l.cpp	/^  PALETTE_SBGGR8,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_SGBRG	cap_v4l.cpp	/^  PALETTE_SGBRG,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_SN9C10X	cap_v4l.cpp	/^  PALETTE_SN9C10X,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_TYPE	cap_v4l.cpp	/^enum PALETTE_TYPE {$/;"	g	file:
PALETTE_UYVY	cap_v4l.cpp	/^  PALETTE_UYVY,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_YUV411P	cap_v4l.cpp	/^  PALETTE_YUV411P,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_YUYV	cap_v4l.cpp	/^  PALETTE_YUYV,$/;"	e	enum:PALETTE_TYPE	file:
PALETTE_YVU420	cap_v4l.cpp	/^  PALETTE_YVU420,$/;"	e	enum:PALETTE_TYPE	file:
PIX_FMT_RGBA32	cap_ffmpeg_impl.hpp	132;"	d
PKT_FLAG_KEY	cap_ffmpeg_impl.hpp	1291;"	d
POSITION	cap_msmf.hpp	/^        POSITION() : pNode(nullptr)$/;"	f	class:List::POSITION
POSITION	cap_msmf.hpp	/^        POSITION(Node *p) : pNode(p)$/;"	f	class:List::POSITION
POSITION	cap_msmf.hpp	/^    class POSITION$/;"	c	class:List
PPL_TASK_SAVE_FRAME_COUNT	ppltasks_winrt.hpp	145;"	d
PREPARE_TRANSFER_WRL_OBJ	cap_msmf.hpp	487;"	d
PREPARE_TRANSFER_WRL_OBJ	cap_msmf.hpp	570;"	d
PROP_APERTURE_CANON	cap_gphoto2.cpp	/^    static const char * PROP_APERTURE_CANON;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_APERTURE_CANON	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_APERTURE_CANON = "aperture";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_APERTURE_NIKON	cap_gphoto2.cpp	/^    static const char * PROP_APERTURE_NIKON;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_APERTURE_NIKON	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_APERTURE_NIKON = "f-number";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_AUTOFOCUS	cap_gphoto2.cpp	/^    static const char * PROP_AUTOFOCUS;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_AUTOFOCUS	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_AUTOFOCUS = "autofocusdrive";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_EXPOSURE_COMPENSACTION	cap_gphoto2.cpp	/^    static const char * PROP_EXPOSURE_COMPENSACTION;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_EXPOSURE_COMPENSACTION	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_EXPOSURE_COMPENSACTION =$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_EXPOSURE_PROGRAM	cap_gphoto2.cpp	/^    static const char * PROP_EXPOSURE_PROGRAM;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_EXPOSURE_PROGRAM	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_EXPOSURE_PROGRAM = "expprogram";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_ISO	cap_gphoto2.cpp	/^    static const char * PROP_ISO;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_ISO	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_ISO = "iso";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_MANUALFOCUS	cap_gphoto2.cpp	/^    static const char * PROP_MANUALFOCUS;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_MANUALFOCUS	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_MANUALFOCUS = "manualfocusdrive";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_SELF_TIMER_DELAY	cap_gphoto2.cpp	/^    static const char * PROP_SELF_TIMER_DELAY;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_SELF_TIMER_DELAY	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_SELF_TIMER_DELAY = "selftimerdelay";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_SPEED	cap_gphoto2.cpp	/^    static const char * PROP_SPEED;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_SPEED	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_SPEED = "shutterspeed";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_VIEWFINDER	cap_gphoto2.cpp	/^    static const char * PROP_VIEWFINDER;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
PROP_VIEWFINDER	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::PROP_VIEWFINDER = "viewfinder";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
Pan	cap_msmf.cpp	/^        Parametr Pan;$/;"	m	struct:__anon1::CamParametrs	file:
Parametr	cap_msmf.cpp	/^Parametr::Parametr()$/;"	f	class:__anon1::Parametr
Parametr	cap_msmf.cpp	/^struct Parametr$/;"	s	namespace:__anon1	file:
Pause	cap_msmf.hpp	/^    HRESULT Pause()$/;"	f	class:StreamSink
PlaceMarker	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE PlaceMarker($/;"	f	class:StreamSink
PlaceMarker	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::PlaceMarker(__in MFSTREAMSINK_MARKER_TYPE \/*markerType*\/, __in const PROPVARIANT * \/*markerValue*\/, __in const PROPVARIANT * contextValue)$/;"	f	class:MediaStreamSink
Preview	cap_winrt/CaptureFrameGrabber.hpp	/^    Preview = 0,$/;"	m	class:Media::CaptureStreamType
ProcessSample	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE ProcessSample(IMFSample *pSample) {$/;"	f	class:StreamSink
ProcessSample	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::ProcessSample(__in_opt IMFSample *sample)$/;"	f	class:MediaStreamSink
Ptr	cap_msmf.hpp	/^    typedef T* Ptr;$/;"	t	class:ComPtrList
QTGIG_HEARTBEAT_TIME	cap_giganetix.cpp	63;"	d	file:
QTGIG_IMG_WAIT_TIME	cap_giganetix.cpp	65;"	d	file:
QTGIG_MAX_WAIT_TIME	cap_giganetix.cpp	64;"	d	file:
QueryInterface	cap_dshow.cpp	/^    STDMETHODIMP QueryInterface(REFIID, void **ppvObject){$/;"	f	class:SampleGrabberCallback
QueryInterface	cap_msmf.cpp	/^STDMETHODIMP ImageGrabber::QueryInterface(REFIID riid, void** ppv)$/;"	f	class:__anon1::ImageGrabber
QueryInterface	cap_msmf.hpp	/^    STDMETHOD(QueryInterface)(REFIID riid, _Outptr_result_nullonfailure_ void **ppv)$/;"	f	class:StreamSink
QueueEvent	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE QueueEvent($/;"	f	class:StreamSink
QueueEvent	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::QueueEvent($/;"	f	class:MediaStreamSink
REF_WRL_OBJ	cap_msmf.hpp	483;"	d
REF_WRL_OBJ	cap_msmf.hpp	566;"	d
RELEASE_AGILE_WRL	cap_msmf.hpp	464;"	d
RELEASE_AGILE_WRL	cap_msmf.hpp	554;"	d
RELEASE_WRL	cap_msmf.hpp	465;"	d
RELEASE_WRL	cap_msmf.hpp	555;"	d
RET_VAL	cap_msmf.hpp	447;"	d
RET_VAL	cap_msmf.hpp	537;"	d
RET_VAL_BASE	cap_msmf.hpp	448;"	d
RET_VAL_BASE	cap_msmf.hpp	539;"	d
RIFF_CC	cap_mjpeg_decoder.cpp	/^const uint32_t RIFF_CC = CV_FOURCC('R','I','F','F');$/;"	m	namespace:cv	file:
RUNTIMECLASS_Concurrency_winrt_details__AsyncInfoBase_DEFINED	ppltasks_winrt.hpp	7275;"	d
RUNTIMECLASS_Concurrency_winrt_details__AsyncInfoImpl_DEFINED	ppltasks_winrt.hpp	1674;"	d
RawDataLock	cap_msmf.cpp	/^        RawDataLock,$/;"	e	enum:__anon1::videoDevice::typeLock	file:
RawImage	cap_msmf.cpp	/^RawImage::RawImage(unsigned int size): ri_new(false), ri_pixels(NULL)$/;"	f	class:__anon1::RawImage
RawImage	cap_msmf.cpp	/^class RawImage$/;"	c	namespace:__anon1	file:
Read	cap_msmf.cpp	/^MediaType FormatReader::Read(IMFMediaType *pType)$/;"	f	class:__anon1::FormatReader
Read_InputMediaStream_FFMPEG_Plugin	cap_ffmpeg_api.hpp	/^typedef int (*Read_InputMediaStream_FFMPEG_Plugin)(struct InputMediaStream_FFMPEG* stream, unsigned char** data, int* size, int* endOfFile);$/;"	t
Release	cap_dshow.cpp	/^    STDMETHODIMP_(ULONG) Release() { return 2; }$/;"	f	class:SampleGrabberCallback
Release	cap_msmf.cpp	/^STDMETHODIMP_(ULONG) ImageGrabber::Release()$/;"	f	class:__anon1::ImageGrabber
Release	cap_msmf.hpp	/^    ULONG STDMETHODCALLTYPE Release()$/;"	f	class:StreamSink
ReleaseAndGetAddressOf	cap_msmf.hpp	/^    T** ReleaseAndGetAddressOf() throw()$/;"	f	class:ComPtr
ReleaseInContext	agile_wrl.hpp	/^        inline HRESULT ReleaseInContext(T *ObjectIn, IUnknown *ContextCallBack)$/;"	f	namespace:Details
Release_InputMediaStream_FFMPEG_Plugin	cap_ffmpeg_api.hpp	/^typedef void (*Release_InputMediaStream_FFMPEG_Plugin)(struct InputMediaStream_FFMPEG* stream);$/;"	t
Release_OutputMediaStream_FFMPEG_Plugin	cap_ffmpeg_api.hpp	/^typedef void (*Release_OutputMediaStream_FFMPEG_Plugin)(struct OutputMediaStream_FFMPEG* stream);$/;"	t
Remove	cap_msmf.hpp	/^    HRESULT Remove(POSITION& pos, T *ppItem)$/;"	f	class:List
RemoveBack	cap_msmf.hpp	/^    HRESULT RemoveBack(T *ppItem)$/;"	f	class:List
RemoveFront	cap_msmf.hpp	/^    HRESULT RemoveFront(T *ppItem)$/;"	f	class:List
RemoveItem	cap_msmf.hpp	/^    HRESULT RemoveItem(Node *pNode, Ptr *ppItem)$/;"	f	class:ComPtrList
RemoveItem	cap_msmf.hpp	/^    virtual HRESULT RemoveItem(Node *pNode, T *ppItem)$/;"	f	class:List
RemoveStreamSink	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE RemoveStreamSink(DWORD dwStreamSinkIdentifier) {$/;"	f	class:MediaSink
RemoveStreamSink	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP RemoveStreamSink(DWORD \/*streamSinkIdentifier*\/)$/;"	f	class:Media::WrlSealed
RequestAudioSample	cap_winrt/MediaSink.hpp	/^    void RequestAudioSample()$/;"	f	class:Media::WrlSealed
RequestSample	cap_winrt/MediaStreamSink.cpp	/^void MediaStreamSink::RequestSample()$/;"	f	class:MediaStreamSink
RequestVideoSample	cap_winrt/MediaSink.hpp	/^    void RequestVideoSample()$/;"	f	class:Media::WrlSealed
Reset	cap_msmf.hpp	/^    void Reset()$/;"	f	class:ComPtr
Restart	cap_msmf.hpp	/^    HRESULT Restart()$/;"	f	class:StreamSink
RiffChunk	cap_mjpeg_decoder.cpp	/^struct RiffChunk$/;"	s	namespace:cv	file:
RiffList	cap_mjpeg_decoder.cpp	/^struct RiffList$/;"	s	namespace:cv	file:
Roll	cap_msmf.cpp	/^        Parametr Roll;$/;"	m	struct:__anon1::CamParametrs	file:
RuntimeClassInitialize	cap_msmf.hpp	/^    STDMETHOD(RuntimeClassInitialize)() { return S_OK; }$/;"	f	class:StreamSink
RuntimeClass_CV_ImageGrabberWinRT	cap_msmf.cpp	/^extern const __declspec(selectany) WCHAR RuntimeClass_CV_ImageGrabberWinRT[] = L"cv.ImageGrabberWinRT";$/;"	m	namespace:__anon1	file:
RuntimeClass_CV_MediaSink	cap_msmf.hpp	/^extern const __declspec(selectany) WCHAR RuntimeClass_CV_MediaSink[] = L"cv.MediaSink";$/;"	v
RuntimeClass_Concurrency_winrt_details__AsyncInfoBase	ppltasks_winrt.hpp	/^    extern const __declspec(selectany) WCHAR RuntimeClass_Concurrency_winrt_details__AsyncInfoBase[] = L"Concurrency_winrt.details._AsyncInfoBase";$/;"	m	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
SAT	cap_v4l.cpp	1640;"	d	file:
SAVE_CURRENT_CONTEXT	cap_msmf.hpp	401;"	d
SEM_KEY_FOR_PROPERTY	cap_OPEL.cpp	29;"	d	file:
SEM_KEY_FOR_STATUS	cap_OPEL.cpp	30;"	d	file:
SEM_NAME	cap_OPEL.cpp	/^char SEM_NAME[] = "CCDSTATUS";$/;"	v
SHM_KEY_FOR_BUFFER	cap_OPEL.cpp	33;"	d	file:
SHM_KEY_FOR_PROPERTY	cap_OPEL.cpp	32;"	d	file:
SHM_KEY_FOR_STATUS	cap_OPEL.cpp	31;"	d	file:
STATUS	cap_gphoto2.cpp	/^        STATUS = (int) 'S',$/;"	e	enum:cv::gphoto2::DigitalCameraCapture::MsgType	file:
STORE_DESCALED	cap_mjpeg_encoder.cpp	934;"	d	file:
STRF_SIZE	cap_mjpeg_encoder.cpp	/^static const int STRF_SIZE = 40;$/;"	m	namespace:cv::mjpeg	file:
STRH_CC	cap_mjpeg_decoder.cpp	/^const uint32_t STRH_CC = CV_FOURCC('s','t','r','h');$/;"	m	namespace:cv	file:
STRL_CC	cap_mjpeg_decoder.cpp	/^const uint32_t STRL_CC = CV_FOURCC('s','t','r','l');$/;"	m	namespace:cv	file:
SUBTYPEMap	cap_msmf.cpp	/^typedef std::map<String, vectorNum> SUBTYPEMap;$/;"	t	namespace:__anon1	file:
SUG_BUFFER_SIZE	cap_mjpeg_encoder.cpp	/^static const int SUG_BUFFER_SIZE = 1048576;$/;"	m	namespace:cv::mjpeg	file:
SafeRelease	cap_msmf.cpp	/^template <class T> void SafeRelease(T **ppT)$/;"	f	namespace:__anon1
Sample	cap_winrt/MFIncludes.hpp	/^    MW::ComPtr<IMFSample> Sample;$/;"	m	class:sealed
SampleCB	cap_dshow.cpp	/^    STDMETHODIMP SampleCB(double , IMediaSample *pSample){$/;"	f	class:SampleGrabberCallback
SampleGrabberCallback	cap_dshow.cpp	/^    SampleGrabberCallback(){$/;"	f	class:SampleGrabberCallback
SampleGrabberCallback	cap_dshow.cpp	/^class SampleGrabberCallback : public ISampleGrabberCB{$/;"	c	file:
Saturation	cap_msmf.cpp	/^        Parametr Saturation;$/;"	m	struct:__anon1::CamParametrs	file:
SaveGraphFile	cap_dshow.cpp	/^HRESULT videoInput::SaveGraphFile(IGraphBuilder *pGraph, WCHAR *wszPath) {$/;"	f	class:videoInput
SerializeToBlob	cap_msmf.hpp	/^    HRESULT SerializeToBlob(UINT8 **ppBuffer, UINT *pcbSize)$/;"	f	class:CBaseAttributes
SerializeToStream	cap_msmf.hpp	/^    HRESULT SerializeToStream(DWORD dwOptions, IStream* pStm)$/;"	f	class:CBaseAttributes
SetBlob	cap_msmf.hpp	/^    STDMETHODIMP SetBlob(REFGUID guidKey, const UINT8* pBuf, UINT32 cbBufSize)$/;"	f	class:CBaseAttributes
SetCurrentAudioMediaType	cap_winrt/MediaSink.hpp	/^    void SetCurrentAudioMediaType(_In_ IMFMediaType* mt)$/;"	f	class:Media::WrlSealed
SetCurrentMediaType	cap_msmf.hpp	/^    STDMETHODIMP SetCurrentMediaType(IMFMediaType *pMediaType)$/;"	f	class:StreamSink
SetCurrentMediaType	cap_winrt/MediaStreamSink.cpp	/^HRESULT MediaStreamSink::SetCurrentMediaType(__in IMFMediaType *mediaType)$/;"	f	class:MediaStreamSink
SetCurrentVideoMediaType	cap_winrt/MediaSink.hpp	/^    void SetCurrentVideoMediaType(_In_ IMFMediaType* mt)$/;"	f	class:Media::WrlSealed
SetDouble	cap_msmf.hpp	/^    STDMETHODIMP SetDouble(REFGUID guidKey, double fValue)$/;"	f	class:CBaseAttributes
SetGUID	cap_msmf.hpp	/^    STDMETHODIMP SetGUID(REFGUID guidKey, REFGUID guidValue)$/;"	f	class:CBaseAttributes
SetItem	cap_msmf.hpp	/^    STDMETHODIMP SetItem(REFGUID guidKey, REFPROPVARIANT Value)$/;"	f	class:CBaseAttributes
SetMediaStreamProperties	cap_msmf.hpp	/^            HRESULT SetMediaStreamProperties(ABI::Windows::Media::Capture::MediaStreamType MediaStreamType,$/;"	f	class:MediaSink
SetObject	agile_wrl.hpp	/^        void SetObject(TypeT object)$/;"	f	class:Agile::AgileState
SetPresentationClock	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE SetPresentationClock($/;"	f	class:MediaSink
SetPresentationClock	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP SetPresentationClock(_In_ IMFPresentationClock *clock)$/;"	f	class:Media::WrlSealed
SetProperties	cap_msmf.hpp	/^    STDMETHODIMP SetProperties(ABI::Windows::Foundation::Collections::IPropertySet *pConfiguration)$/;"	f	class:MediaSink
SetProperties	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP SetProperties(_In_ AWFC::IPropertySet * \/*configuration*\/)$/;"	f	class:Media::WrlSealed
SetRatio	cap_msmf.hpp	/^    HRESULT SetRatio(REFGUID guidKey, UINT32 unNumerator, UINT32 unDenominator)$/;"	f	class:CBaseAttributes
SetSize	cap_msmf.hpp	/^    HRESULT SetSize(REFGUID guidKey, UINT32 unWidth, UINT32 unHeight)$/;"	f	class:CBaseAttributes
SetString	cap_msmf.hpp	/^    STDMETHODIMP SetString(REFGUID guidKey, LPCWSTR wszValue)$/;"	f	class:CBaseAttributes
SetUINT32	cap_msmf.hpp	/^    STDMETHODIMP SetUINT32(REFGUID guidKey, UINT32 unValue)$/;"	f	class:CBaseAttributes
SetUINT64	cap_msmf.hpp	/^    STDMETHODIMP SetUINT64(REFGUID guidKey,UINT64 unValue)$/;"	f	class:CBaseAttributes
SetUnknown	cap_msmf.hpp	/^    STDMETHODIMP SetUnknown(REFGUID guidKey, IUnknown* pUnknown)$/;"	f	class:CBaseAttributes
Sharpness	cap_msmf.cpp	/^        Parametr Sharpness;$/;"	m	struct:__anon1::CamParametrs	file:
ShowCameraSettings	cap_winrt/CaptureFrameGrabber.cpp	/^void Media::CaptureFrameGrabber::ShowCameraSettings()$/;"	f	class:Media::CaptureFrameGrabber
ShowFilterPropertyPages	cap_dshow.cpp	/^HRESULT videoInput::ShowFilterPropertyPages(IBaseFilter *pFilter){$/;"	f	class:videoInput
ShowStreamPropertyPages	cap_dshow.cpp	/^HRESULT videoInput::ShowStreamPropertyPages(IAMStreamConfig  * \/*pStream*\/){$/;"	f	class:videoInput
Shutdown	cap_msmf.hpp	/^    HRESULT STDMETHODCALLTYPE Shutdown(void) {$/;"	f	class:MediaSink
Shutdown	cap_msmf.hpp	/^    HRESULT Shutdown()$/;"	f	class:StreamSink
Shutdown	cap_winrt/MediaSink.hpp	/^    IFACEMETHODIMP Shutdown()$/;"	f	class:Media::WrlSealed
Shutdown	cap_winrt/MediaStreamSink.cpp	/^void MediaStreamSink::Shutdown()$/;"	f	class:MediaStreamSink
ShutdownFunc	cap_msmf.hpp	/^    class ShutdownFunc$/;"	c	class:MediaSink
SingleResult	ppltasks_winrt.hpp	/^        SingleResult = 0x0001,$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncResultType
Sleep	cap_pvapi.cpp	/^void CvCaptureCAM_PvAPI::Sleep(unsigned int time)$/;"	f	class:CvCaptureCAM_PvAPI
SpecialCaseAttributeValueNew	cap_msmf.cpp	/^HRESULT SpecialCaseAttributeValueNew(GUID guid, const PROPVARIANT& var, MediaType &out)$/;"	f	namespace:__anon1
Start	cap_msmf.hpp	/^    HRESULT Start(MFTIME start)$/;"	f	class:StreamSink
StartFunc	cap_msmf.hpp	/^        StartFunc(LONGLONG llStartTime)$/;"	f	class:MediaSink::StartFunc
StartFunc	cap_msmf.hpp	/^    class StartFunc$/;"	c	class:MediaSink
Started	cap_winrt/CaptureFrameGrabber.hpp	/^        Started,$/;"	m	class:Media::sealed::State
State	cap_msmf.hpp	/^    enum State$/;"	g	class:StreamSink
State	cap_winrt/CaptureFrameGrabber.hpp	/^    enum class State$/;"	c	class:Media::sealed
State_Count	cap_msmf.hpp	/^        State_Count              \/\/ Number of states$/;"	e	enum:StreamSink::State
State_Paused	cap_msmf.hpp	/^        State_Paused,$/;"	e	enum:StreamSink::State
State_Ready	cap_msmf.hpp	/^        State_Ready,             \/\/ Media type is set, Start has never been called.$/;"	e	enum:StreamSink::State
State_Started	cap_msmf.hpp	/^        State_Started,$/;"	e	enum:StreamSink::State
State_Stopped	cap_msmf.hpp	/^        State_Stopped,$/;"	e	enum:StreamSink::State
State_TypeNotSet	cap_msmf.hpp	/^        State_TypeNotSet = 0,    \/\/ No media type is set$/;"	e	enum:StreamSink::State
Step	cap_msmf.cpp	/^    long Step;$/;"	m	struct:__anon1::Parametr	file:
Stop	cap_msmf.hpp	/^    HRESULT Stop()$/;"	f	class:StreamSink
StopFunc	cap_msmf.hpp	/^    class StopFunc$/;"	c	class:MediaSink
StreamSink	cap_msmf.hpp	/^    StreamSink() : m_IsShutdown(false),$/;"	f	class:StreamSink
StreamSink	cap_msmf.hpp	/^class StreamSink :$/;"	c
String	cap_msmf.cpp	/^typedef std::wstring String;$/;"	t	namespace:__anon1	file:
SuppressVideoInputMessages	cap_msmf.cpp	/^    SuppressVideoInputMessages() { videoInput::setVerbose(true); }$/;"	f	struct:SuppressVideoInputMessages
SuppressVideoInputMessages	cap_msmf.cpp	/^struct SuppressVideoInputMessages$/;"	s	file:
TBBApproximateSynchronizer	cap_openni.cpp	/^        TBBApproximateSynchronizer( ApproximateSyncGrabber& _approxSyncGrabber ) :$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
TBBApproximateSynchronizer	cap_openni.cpp	/^    class TBBApproximateSynchronizer: public ApproximateSynchronizerBase$/;"	c	class:ApproximateSyncGrabber	file:
TBBApproximateSynchronizerTask	cap_openni.cpp	/^        TBBApproximateSynchronizerTask( ApproximateSyncGrabber& approxSyncGrabber ) :$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizerTask
TBBApproximateSynchronizerTask	cap_openni.cpp	/^    class TBBApproximateSynchronizerTask: public tbb::task$/;"	c	class:ApproximateSyncGrabber	file:
THROW_INVALID_ARG	cap_msmf.hpp	463;"	d
THROW_INVALID_ARG	cap_msmf.hpp	553;"	d
TIME_SCALE	cap_qt.cpp	/^static TimeScale const TIME_SCALE = 600;$/;"	v	file:
Tilt	cap_msmf.cpp	/^        Parametr Tilt;$/;"	m	struct:__anon1::CamParametrs	file:
TypeT	agile_wrl.hpp	/^        typename typedef Details::AgileTypeHelper<T>::agileMemberType TypeT;$/;"	t	class:Agile
UID	cap_pvapi.cpp	/^        unsigned long   UID;$/;"	m	struct:CvCaptureCAM_PvAPI::__anon2	file:
UINT64_C	ffmpeg_codecs.hpp	57;"	d
USE_TEMP_BUFFER	cap_libv4l.cpp	283;"	d	file:
Unknown	agile_wrl.hpp	/^            Unknown = 2$/;"	m	class:Agile::AgileState
UnlockStore	cap_msmf.hpp	/^    STDMETHODIMP UnlockStore()$/;"	f	class:CBaseAttributes
UnwrapAgile	agile_wrl.hpp	/^struct UnwrapAgile$/;"	s
UnwrapAgile	agile_wrl.hpp	/^struct UnwrapAgile<Agile<T, false>>$/;"	s
UnwrapAgile	agile_wrl.hpp	/^struct UnwrapAgile<Agile<T, true>>$/;"	s
V4L2_PIX_FMT_SBGGR8	cap_v4l.cpp	276;"	d	file:
V4L2_PIX_FMT_SGBRG	cap_v4l.cpp	283;"	d	file:
V4L2_PIX_FMT_SN9C10X	cap_v4l.cpp	279;"	d	file:
V4L2_SUPPORT	cap_v4l.cpp	/^int V4L2_SUPPORT = 0;$/;"	v
V4L_ABORT_BADJPEG	cap_v4l.cpp	257;"	d	file:
VDList	cap_dshow.cpp	/^        videoDevice * VDList[VI_MAX_CAMERAS];$/;"	m	class:videoInput	file:
VERSION_NUM	cap_gstreamer.cpp	61;"	d	file:
VI	cap_msmf.cpp	/^    videoInput VI;$/;"	m	class:CvCaptureCAM_MSMF	file:
VIDERE	cap_dc1394_v2.cpp	/^    enum { VIDERE = 0x5505 };$/;"	e	enum:CvCaptureCAM_DC1394_v2_CPP::__anon9	file:
VIDS_CC	cap_mjpeg_decoder.cpp	/^const uint32_t VIDS_CC = CV_FOURCC('v','i','d','s');$/;"	m	namespace:cv	file:
VI_1394	cap_dshow.cpp	376;"	d	file:
VI_COMPOSITE	cap_dshow.cpp	372;"	d	file:
VI_MAX_CAMERAS	cap_dshow.cpp	367;"	d	file:
VI_NTSC_433	cap_dshow.cpp	396;"	d	file:
VI_NTSC_M	cap_dshow.cpp	379;"	d	file:
VI_NTSC_M_J	cap_dshow.cpp	395;"	d	file:
VI_NUM_FORMATS	cap_dshow.cpp	369;"	d	file:
VI_NUM_TYPES	cap_dshow.cpp	368;"	d	file:
VI_PAL_B	cap_dshow.cpp	380;"	d	file:
VI_PAL_D	cap_dshow.cpp	381;"	d	file:
VI_PAL_G	cap_dshow.cpp	382;"	d	file:
VI_PAL_H	cap_dshow.cpp	383;"	d	file:
VI_PAL_I	cap_dshow.cpp	384;"	d	file:
VI_PAL_M	cap_dshow.cpp	385;"	d	file:
VI_PAL_N	cap_dshow.cpp	386;"	d	file:
VI_PAL_NC	cap_dshow.cpp	387;"	d	file:
VI_SECAM_B	cap_dshow.cpp	388;"	d	file:
VI_SECAM_D	cap_dshow.cpp	389;"	d	file:
VI_SECAM_G	cap_dshow.cpp	390;"	d	file:
VI_SECAM_H	cap_dshow.cpp	391;"	d	file:
VI_SECAM_K	cap_dshow.cpp	392;"	d	file:
VI_SECAM_K1	cap_dshow.cpp	393;"	d	file:
VI_SECAM_L	cap_dshow.cpp	394;"	d	file:
VI_S_VIDEO	cap_dshow.cpp	373;"	d	file:
VI_TUNER	cap_dshow.cpp	374;"	d	file:
VI_USB	cap_dshow.cpp	375;"	d	file:
VI_VERSION	cap_dshow.cpp	366;"	d	file:
Video	cap_winrt_video.cpp	/^Video::Video() {}$/;"	f	class:Video
Video	cap_winrt_video.hpp	/^class Video {$/;"	c
VideoCapture	cap.cpp	/^VideoCapture::VideoCapture()$/;"	f	class:cv::VideoCapture
VideoCapture	cap.cpp	/^VideoCapture::VideoCapture(const String& filename)$/;"	f	class:cv::VideoCapture
VideoCapture	cap.cpp	/^VideoCapture::VideoCapture(int device)$/;"	f	class:cv::VideoCapture
VideoCapture_DShow	cap_dshow.cpp	/^VideoCapture_DShow::VideoCapture_DShow(int index)$/;"	f	class:cv::VideoCapture_DShow
VideoCapture_DShow	cap_dshow.hpp	/^class VideoCapture_DShow : public IVideoCapture$/;"	c	namespace:cv
VideoCapture_IntelPerC	cap_intelperc.cpp	/^VideoCapture_IntelPerC::VideoCapture_IntelPerC()$/;"	f	class:cv::VideoCapture_IntelPerC
VideoCapture_IntelPerC	cap_intelperc.hpp	/^class VideoCapture_IntelPerC : public IVideoCapture$/;"	c	namespace:cv
VideoCapture_WinRT	cap_winrt_capture.cpp	/^    VideoCapture_WinRT::VideoCapture_WinRT(int device) : started(false)$/;"	f	class:cv::VideoCapture_WinRT
VideoCapture_WinRT	cap_winrt_capture.hpp	/^        VideoCapture_WinRT() : started(false) {}$/;"	f	class:cv::VideoCapture_WinRT
VideoCapture_WinRT	cap_winrt_capture.hpp	/^    class VideoCapture_WinRT : public IVideoCapture$/;"	c	namespace:cv
VideoChromaFormat_Monochrome	cap_ffmpeg_impl.hpp	/^    VideoChromaFormat_Monochrome = 0,$/;"	e	enum:__anon8
VideoChromaFormat_YUV420	cap_ffmpeg_impl.hpp	/^    VideoChromaFormat_YUV420,$/;"	e	enum:__anon8
VideoChromaFormat_YUV422	cap_ffmpeg_impl.hpp	/^    VideoChromaFormat_YUV422,$/;"	e	enum:__anon8
VideoChromaFormat_YUV444	cap_ffmpeg_impl.hpp	/^    VideoChromaFormat_YUV444$/;"	e	enum:__anon8
VideoCodec_H264	cap_ffmpeg_impl.hpp	/^    VideoCodec_H264,$/;"	e	enum:__anon7
VideoCodec_H264_MVC	cap_ffmpeg_impl.hpp	/^    VideoCodec_H264_MVC,$/;"	e	enum:__anon7
VideoCodec_H264_SVC	cap_ffmpeg_impl.hpp	/^    VideoCodec_H264_SVC,$/;"	e	enum:__anon7
VideoCodec_JPEG	cap_ffmpeg_impl.hpp	/^    VideoCodec_JPEG,$/;"	e	enum:__anon7
VideoCodec_MPEG1	cap_ffmpeg_impl.hpp	/^    VideoCodec_MPEG1 = 0,$/;"	e	enum:__anon7
VideoCodec_MPEG2	cap_ffmpeg_impl.hpp	/^    VideoCodec_MPEG2,$/;"	e	enum:__anon7
VideoCodec_MPEG4	cap_ffmpeg_impl.hpp	/^    VideoCodec_MPEG4,$/;"	e	enum:__anon7
VideoCodec_NV12	cap_ffmpeg_impl.hpp	/^    VideoCodec_NV12   = (('N'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/ Y,UV  (4:2:0)$/;"	e	enum:__anon7
VideoCodec_UYVY	cap_ffmpeg_impl.hpp	/^    VideoCodec_UYVY   = (('U'<<24)|('Y'<<16)|('V'<<8)|('Y'))    \/\/ UYVY (4:2:2)$/;"	e	enum:__anon7
VideoCodec_VC1	cap_ffmpeg_impl.hpp	/^    VideoCodec_VC1,$/;"	e	enum:__anon7
VideoCodec_YUV420	cap_ffmpeg_impl.hpp	/^    VideoCodec_YUV420 = (('I'<<24)|('Y'<<16)|('U'<<8)|('V')),   \/\/ Y,U,V (4:2:0)$/;"	e	enum:__anon7
VideoCodec_YUYV	cap_ffmpeg_impl.hpp	/^    VideoCodec_YUYV   = (('Y'<<24)|('U'<<16)|('Y'<<8)|('V')),   \/\/ YUYV\/YUY2 (4:2:2)$/;"	e	enum:__anon7
VideoCodec_YV12	cap_ffmpeg_impl.hpp	/^    VideoCodec_YV12   = (('Y'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/ Y,V,U (4:2:0)$/;"	e	enum:__anon7
VideoFormat	cap_msmf.cpp	/^        GUID VideoFormat);$/;"	m	class:__anon1::ImageGrabberWinRT	file:
VideoWriter	cap.cpp	/^VideoWriter::VideoWriter()$/;"	f	class:cv::VideoWriter
VideoWriter	cap.cpp	/^VideoWriter::VideoWriter(const String& filename, int _fourcc, double fps, Size frameSize, bool isColor)$/;"	f	class:cv::VideoWriter
VideoioBridge	cap_winrt_bridge.hpp	/^    VideoioBridge() {$/;"	f	class:VideoioBridge
VideoioBridge	cap_winrt_bridge.hpp	/^class VideoioBridge$/;"	c
WARNING	cap_gphoto2.cpp	/^        WARNING = (int) 'W',$/;"	e	enum:cv::gphoto2::DigitalCameraCapture::MsgType	file:
WINBOOL	cap_dshow.cpp	/^   typedef BOOL WINBOOL;$/;"	t	file:
WINRT_VIDEO	cap.cpp	50;"	d	file:
WINVER	cap_msmf.cpp	52;"	d	file:
WINVER	cap_msmf.cpp	53;"	d	file:
WITH_NEON	cap_mjpeg_encoder.cpp	46;"	d	file:
WM_CAP_FIRSTA	cap_vfw.cpp	47;"	d	file:
WORD	cap_mjpeg_decoder.cpp	/^typedef uint16_t WORD;$/;"	t	namespace:cv	file:
WRL_ENUM_GET	cap_msmf.hpp	470;"	d
WRL_ENUM_GET	cap_msmf.hpp	560;"	d
WRL_METHOD	cap_msmf.hpp	477;"	d
WRL_METHOD	cap_msmf.hpp	564;"	d
WRL_METHOD_BASE	cap_msmf.hpp	475;"	d
WRL_METHOD_BASE	cap_msmf.hpp	563;"	d
WRL_METHOD_NORET	cap_msmf.hpp	481;"	d
WRL_METHOD_NORET_BASE	cap_msmf.hpp	479;"	d
WRL_METHOD_NORET_BASE	cap_msmf.hpp	565;"	d
WRL_PROP_GET	cap_msmf.hpp	471;"	d
WRL_PROP_GET	cap_msmf.hpp	561;"	d
WRL_PROP_PUT	cap_msmf.hpp	473;"	d
WRL_PROP_PUT	cap_msmf.hpp	562;"	d
WhiteBalance	cap_msmf.cpp	/^        Parametr WhiteBalance;$/;"	m	struct:__anon1::CamParametrs	file:
WriteFrame	cap_msmf.cpp	/^HRESULT CvVideoWriter_MSMF::WriteFrame(DWORD *videoFrameBuffer, const LONGLONG& Start, const LONGLONG& Duration)$/;"	f	class:CvVideoWriter_MSMF
Write_OutputMediaStream_FFMPEG_Plugin	cap_ffmpeg_api.hpp	/^typedef void (*Write_OutputMediaStream_FFMPEG_Plugin)(struct OutputMediaStream_FFMPEG* stream, unsigned char* data, int size, int keyFrame);$/;"	t
WrlSealed	cap_winrt/MediaSink.hpp	/^class MediaSink WrlSealed$/;"	c	namespace:Media
WrlSealed	cap_winrt/MediaStreamSink.hpp	/^class MediaStreamSink WrlSealed :$/;"	c	namespace:Media
XINE_ENABLE_EXPERIMENTAL_FEATURES	cap_xine.cpp	52;"	d	file:
XMLConfig	cap_openni.cpp	/^const cv::String XMLConfig =$/;"	v
YUV2RGB	cap_dc1394.cpp	895;"	d	file:
Zoom	cap_msmf.cpp	/^        Parametr Zoom;$/;"	m	struct:__anon1::CamParametrs	file:
_ARC	cap_openni.cpp	60;"	d	file:
_ARC	cap_openni2.cpp	60;"	d	file:
_Argument1Type	ppltasks_winrt.hpp	/^        typedef decltype(_Arg1ClassHelperThunk(&(_T::operator()))) _Argument1Type;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_Argument1Type	ppltasks_winrt.hpp	/^        typedef decltype(_Arg1PFNHelperThunk(stdx::declval<_T*>())) _Argument1Type;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_Argument1Type	ppltasks_winrt.hpp	/^        typedef typename _FunctorTypeTraits<_Function>::_Argument1Type _Argument1Type;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_Argument1Type	ppltasks_winrt.hpp	/^        typedef typename _FunctorTypeTraits<_T>::_Argument1Type _Argument1Type;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_Argument2Type	ppltasks_winrt.hpp	/^        typedef decltype(_Arg2ClassHelperThunk(&(_T::operator()))) _Argument2Type;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_Argument2Type	ppltasks_winrt.hpp	/^        typedef decltype(_Arg2PFNHelperThunk(stdx::declval<_T*>())) _Argument2Type;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_Argument2Type	ppltasks_winrt.hpp	/^        typedef typename _FunctorTypeTraits<_T>::_Argument2Type _Argument2Type;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_Argument3Type	ppltasks_winrt.hpp	/^        typedef decltype(_Arg3ClassHelperThunk(&(_T::operator()))) _Argument3Type;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_Argument3Type	ppltasks_winrt.hpp	/^        typedef decltype(_Arg3PFNHelperThunk(stdx::declval<_T*>())) _Argument3Type;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_ArgumentCount	ppltasks_winrt.hpp	/^        static const size_t _ArgumentCount = _FunctorArguments<_ArgumentCountType>::_Count;$/;"	m	struct:Concurrency_winrt::details::_FunctorTypeTraits
_ArgumentCountType	ppltasks_winrt.hpp	/^        typedef decltype(_ArgumentCountHelper(&(_T::operator()))) _ArgumentCountType;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_ArgumentCountType	ppltasks_winrt.hpp	/^        typedef decltype(_ArgumentCountHelper(stdx::declval<_T*>())) _ArgumentCountType;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_AsyncAction	cap_msmf.hpp	422;"	d
_AsyncAction	cap_msmf.hpp	512;"	d
_AsyncAttributes	ppltasks_winrt.hpp	/^        typedef typename _AsyncAttributes<_Function, _ProgressType, typename _TaskTraits::_TaskRetType, _TaskTraits, _TakesToken, _TakesProgress> _AsyncAttributes;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_AsyncAttributes	ppltasks_winrt.hpp	/^    struct _AsyncAttributes$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncAttributes	ppltasks_winrt.hpp	/^    struct _AsyncAttributes<_Function, _ProgressType, _ReturnType, _TaskTraits, _TakesToken, false>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncAttributes	ppltasks_winrt.hpp	/^    struct _AsyncAttributes<_Function, _ProgressType, _ReturnType, _TaskTraits, _TakesToken, true>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncAttributes	ppltasks_winrt.hpp	/^    struct _AsyncAttributes<_Function, _ProgressType, void, _TaskTraits, _TakesToken, false>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncAttributes	ppltasks_winrt.hpp	/^    struct _AsyncAttributes<_Function, _ProgressType, void, _TaskTraits, _TakesToken, true>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncBaseType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncAction _AsyncBaseType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_AsyncBaseType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncActionWithProgress<_ProgressType> _AsyncBaseType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_AsyncBaseType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncOperation<_ReturnType> _AsyncBaseType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_AsyncBaseType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncOperationWithProgress<_ReturnType, _ProgressType> _AsyncBaseType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_AsyncBaseType	ppltasks_winrt.hpp	/^        typedef typename _Attributes::_AsyncBaseType _AsyncBaseType;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskGeneratorThunk
_AsyncCancelPending	ppltasks_winrt.hpp	/^        _AsyncCancelPending,$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncCanceled	ppltasks_winrt.hpp	/^        _AsyncCanceled = ABI::Windows::Foundation::AsyncStatus::Canceled, \/\/ 2$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncClosed	ppltasks_winrt.hpp	/^        _AsyncClosed,$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncCompleted	ppltasks_winrt.hpp	/^        _AsyncCompleted = ABI::Windows::Foundation::AsyncStatus::Completed, \/\/ 1$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncCreated	ppltasks_winrt.hpp	/^        _AsyncCreated = -1,  \/\/ externally invisible$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncError	ppltasks_winrt.hpp	/^        _AsyncError = ABI::Windows::Foundation::AsyncStatus::Error, \/\/ 3$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncInfo	cap_msmf.hpp	421;"	d
_AsyncInfo	cap_msmf.hpp	511;"	d
_AsyncInfoBase	ppltasks_winrt.hpp	/^        _AsyncInfoBase() :$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_AsyncKind	ppltasks_winrt.hpp	/^        typedef _TypeSelectorNoAsync _AsyncKind;$/;"	t	struct:Concurrency_winrt::details::_InitFunctorTypeTraits
_AsyncKind	ppltasks_winrt.hpp	/^        typedef _TypeSelectorNoAsync _AsyncKind;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_AsyncKind	ppltasks_winrt.hpp	/^        typedef decltype(_AsyncOperationKindSelector(stdx::declval<_Type>())) _AsyncKind;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_AsyncKind	ppltasks_winrt.hpp	/^        typedef typename _TaskTraits::_AsyncKind _AsyncKind;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_AsyncKind	ppltasks_winrt.hpp	/^        typedef typename _TaskTypeTraits<_FuncRetType>::_AsyncKind _AsyncKind;$/;"	t	struct:Concurrency_winrt::details::_InitFunctorTypeTraits
_AsyncLambdaTypeTraits	ppltasks_winrt.hpp	/^    struct _AsyncLambdaTypeTraits$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncOperation	cap_msmf.hpp	423;"	d
_AsyncOperation	cap_msmf.hpp	513;"	d
_AsyncProgressBase	ppltasks_winrt.hpp	/^        _AsyncProgressBase() : _AsyncInfoBase<_Attributes, _ResultType>(),$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_AsyncResultType	ppltasks_winrt.hpp	/^    enum _AsyncResultType$/;"	g	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncStarted	ppltasks_winrt.hpp	/^        _AsyncStarted = ABI::Windows::Foundation::AsyncStatus::Started, \/\/ 0$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_AsyncStatusInternal	ppltasks_winrt.hpp	/^    enum _AsyncStatusInternal$/;"	g	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncTaskGeneratorThunk	ppltasks_winrt.hpp	/^        _AsyncTaskGeneratorThunk(const _Function& _Func) : _M_func(_Func)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskGeneratorThunk
_AsyncTaskGeneratorThunk	ppltasks_winrt.hpp	/^    class _AsyncTaskGeneratorThunk : public _AsyncTaskThunk<typename _AsyncLambdaTypeTraits<_Function>::_AsyncAttributes>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncTaskThunk	ppltasks_winrt.hpp	/^        _AsyncTaskThunk()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskThunk
_AsyncTaskThunk	ppltasks_winrt.hpp	/^        _AsyncTaskThunk(const _TaskType& _Task) :$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskThunk
_AsyncTaskThunk	ppltasks_winrt.hpp	/^    class _AsyncTaskThunk : public _AsyncTaskReturn<_Attributes, typename _Attributes::_ReturnType_abi, typename _Attributes::_ReturnType>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_AsyncTaskThunkBase	ppltasks_winrt.hpp	/^        _AsyncTaskThunkBase()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_AsyncTaskThunkBase	ppltasks_winrt.hpp	/^        _AsyncTaskThunkBase(const _TaskType& _Task)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_AsyncUndefined	ppltasks_winrt.hpp	/^        _AsyncUndefined$/;"	e	enum:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncStatusInternal
_Attributes	ppltasks_winrt.hpp	/^        typedef typename _AsyncLambdaTypeTraits<_Function>::_AsyncAttributes _Attributes;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskGeneratorThunk
_BadArgType	ppltasks_winrt.hpp	/^    struct _BadArgType{};$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_Base	ppltasks_winrt.hpp	/^        typedef typename _AsyncTaskThunk<_Attributes> _Base;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskGeneratorThunk
_Bridge	ppltasks_winrt.hpp	/^        static void __cdecl _Bridge(void *_PData)$/;"	f	struct:Concurrency_winrt::details::_TaskProcThunk
_CAFunctorOptions	ppltasks_winrt.hpp	/^    struct _CAFunctorOptions$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_CAFunctorOptions	ppltasks_winrt.hpp	/^    struct _CAFunctorOptions<_T, 1>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_CAFunctorOptions	ppltasks_winrt.hpp	/^    struct _CAFunctorOptions<_T, 2>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_CAFunctorOptions	ppltasks_winrt.hpp	/^    struct _CAFunctorOptions<_T, 3>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_CAPTURE_CALLSTACK	ppltasks_winrt.hpp	160;"	d
_CAPTURE_CALLSTACK	ppltasks_winrt.hpp	165;"	d
_CAP_DSHOW_HPP_	cap_dshow.hpp	13;"	d
_CAP_INTELPERC_HPP_	cap_intelperc.hpp	13;"	d
_COM_SMARTPTR_DECLARE	cap_msmf.hpp	597;"	d
_CallbackFunction	ppltasks_winrt.hpp	/^        typedef std::function<HRESULT(void)> _CallbackFunction;$/;"	t	class:Concurrency_winrt::details::_ContextCallback
_Cancel	ppltasks_winrt.hpp	/^    void _Cancel() const \/\/ 'const' (even though it's not deep) allows to safely pass events by value into lambdas$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
_Cancel	ppltasks_winrt.hpp	/^    void _Cancel(const std::shared_ptr<details::_ExceptionHolder>& _ExHolder) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
_CaptureCurrent	ppltasks_winrt.hpp	/^        static _ContextCallback _CaptureCurrent()$/;"	f	class:Concurrency_winrt::details::_ContextCallback
_CaptureMultiFramesCallstack	ppltasks_winrt.hpp	/^            static _TaskCreationCallstack _CaptureMultiFramesCallstack(size_t _CaptureFrames)$/;"	f	class:Concurrency_winrt::details::_TaskCreationCallstack
_CaptureSingleFrameCallstack	ppltasks_winrt.hpp	/^        static _TaskCreationCallstack _CaptureSingleFrameCallstack(void *_SingleFrame)$/;"	f	class:Concurrency_winrt::details::_TaskCreationCallstack
_CheckValidStateForAsyncInfoCall	ppltasks_winrt.hpp	/^        inline HRESULT _CheckValidStateForAsyncInfoCall()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_CheckValidStateForDelegateCall	ppltasks_winrt.hpp	/^        inline HRESULT _CheckValidStateForDelegateCall()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_CheckValidStateForResultsCall	ppltasks_winrt.hpp	/^        inline HRESULT _CheckValidStateForResultsCall()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_ComPtr	cap_msmf.hpp	594;"	d
_ComPtr	cap_msmf.hpp	709;"	d
_CompletionDelegateType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncActionCompletedHandler _CompletionDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_CompletionDelegateType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncActionWithProgressCompletedHandler<_ProgressType> _CompletionDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_CompletionDelegateType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncOperationCompletedHandler<_ReturnType> _CompletionDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_CompletionDelegateType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<_ReturnType, _ProgressType> _CompletionDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ContextCallback	cap_msmf.hpp	386;"	d
_ContextCallback	cap_msmf.hpp	393;"	d
_ContextCallback	ppltasks_winrt.hpp	/^        _ContextCallback(bool _DeferCapture = false)$/;"	f	class:Concurrency_winrt::details::_ContextCallback
_ContextCallback	ppltasks_winrt.hpp	/^    class _ContextCallback$/;"	c	namespace:Concurrency_winrt::details
_ContinuationTaskHandle	ppltasks_winrt.hpp	/^        _ContinuationTaskHandle(const typename details::_Task_ptr<_ReturnType>::_Type & _AncestorImpl,$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_ContinuationTaskHandle	ppltasks_winrt.hpp	/^    struct _ContinuationTaskHandle :$/;"	s	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_ContinuationTaskHandleBase	ppltasks_winrt.hpp	/^        _ContinuationTaskHandleBase() :$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::_ContinuationTaskHandleBase
_ContinuationTaskHandleBase	ppltasks_winrt.hpp	/^    struct _ContinuationTaskHandleBase : _UnrealizedChore$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details
_ContinuationTypeTraits	ppltasks_winrt.hpp	/^    struct _ContinuationTypeTraits$/;"	s	namespace:Concurrency_winrt::details
_Continuation_func_transformer	ppltasks_winrt.hpp	/^    class _Continuation_func_transformer$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Continuation_func_transformer	ppltasks_winrt.hpp	/^    class _Continuation_func_transformer<_InType, void>$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Continuation_func_transformer	ppltasks_winrt.hpp	/^    class _Continuation_func_transformer<void, _OutType>$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Continuation_func_transformer	ppltasks_winrt.hpp	/^    class _Continuation_func_transformer<void, void>$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::false_type, details::_TypeSelectorAsyncAction) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::false_type, details::_TypeSelectorAsyncActionWithProgress) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::false_type, details::_TypeSelectorAsyncOperation) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::false_type, details::_TypeSelectorAsyncOperationWithProgress) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::false_type, details::_TypeSelectorAsyncTask) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::false_type, details::_TypeSelectorNoAsync) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::true_type, details::_TypeSelectorAsyncAction) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::true_type, details::_TypeSelectorAsyncActionWithProgress) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::true_type, details::_TypeSelectorAsyncOperation) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::true_type, details::_TypeSelectorAsyncOperationWithProgress) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::true_type, details::_TypeSelectorAsyncTask) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Continue	ppltasks_winrt.hpp	/^        void _Continue(std::true_type, details::_TypeSelectorNoAsync) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_ContinueAsyncOperation	ppltasks_winrt.hpp	/^        inline bool _ContinueAsyncOperation()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_Count	ppltasks_winrt.hpp	/^        static const size_t _Count = 0;$/;"	m	struct:Concurrency_winrt::details::_FunctorArguments
_Count	ppltasks_winrt.hpp	/^        static const size_t _Count = 1;$/;"	m	struct:Concurrency_winrt::details::_FunctorArguments
_Count	ppltasks_winrt.hpp	/^        static const size_t _Count = 2;$/;"	m	struct:Concurrency_winrt::details::_FunctorArguments
_Count	ppltasks_winrt.hpp	/^        static const size_t _Count = 3;$/;"	m	struct:Concurrency_winrt::details::_FunctorArguments
_CreateImpl	ppltasks_winrt.hpp	/^    void _CreateImpl(Concurrency::details::_CancellationTokenState * _Ct)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_CreateImpl	ppltasks_winrt.hpp	/^    void _CreateImpl(Concurrency::details::_CancellationTokenState * _Ct, Concurrency::scheduler_ptr _Scheduler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_CreateReporter	ppltasks_winrt.hpp	/^    static progress_reporter _CreateReporter(_ClassPtrType _Ptr)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::progress_reporter
_DBG_ONLY	ppltasks_winrt.hpp	86;"	d
_DBG_ONLY	ppltasks_winrt.hpp	88;"	d
_DeviceClass	cap_msmf.hpp	424;"	d
_DeviceClass	cap_msmf.hpp	514;"	d
_DeviceInformation	cap_msmf.hpp	426;"	d
_DeviceInformation	cap_msmf.hpp	516;"	d
_DeviceInformationCollection	cap_msmf.hpp	412;"	d
_DeviceInformationCollection	cap_msmf.hpp	502;"	d
_DeviceInformationStatics	cap_msmf.hpp	427;"	d
_DeviceInformationStatics	cap_msmf.hpp	517;"	d
_FilterValidTaskType	ppltasks_winrt.hpp	/^        typedef decltype(_FilterValidTaskType<_ReturnType>(stdx::declval<_Ty>(), 0)) _Type;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TaskTypeFromParam
_FindAllAsyncDeviceClass	cap_msmf.hpp	436;"	d
_FindAllAsyncDeviceClass	cap_msmf.hpp	526;"	d
_FireCompletion	ppltasks_winrt.hpp	/^        HRESULT _FireCompletion()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_FireProgress	ppltasks_winrt.hpp	/^        void _FireProgress(const typename _Attributes::_ProgressType_abi& _ProgressValue)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_FuncRetType	ppltasks_winrt.hpp	/^        typedef typename _Unhat<typename _FunctorTypeTraits<_Function>::_Argument1Type>::_Value _FuncRetType;$/;"	t	struct:Concurrency_winrt::details::_FunctionTypeTraits
_FuncRetType	ppltasks_winrt.hpp	/^        typedef typename _Unhat<typename _FunctorTypeTraits<_Function>::_Argument2Type>::_Value _FuncRetType;$/;"	t	struct:Concurrency_winrt::details::_FunctionTypeTraits
_FuncRetType	ppltasks_winrt.hpp	/^        typedef void _FuncRetType;$/;"	t	struct:Concurrency_winrt::details::_FunctionTypeTraits
_FunctionTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctionTypeTraits$/;"	s	namespace:Concurrency_winrt::details
_FunctionTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctionTypeTraits<_Function, _ExpectedParameterType, _IsVoidConversion, 0>$/;"	s	namespace:Concurrency_winrt::details
_FunctionTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctionTypeTraits<_Function, _ExpectedParameterType, _IsVoidConversion, 1>$/;"	s	namespace:Concurrency_winrt::details
_FunctionTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctionTypeTraits<_Function, void, false, 1>$/;"	s	namespace:Concurrency_winrt::details
_FunctionTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctionTypeTraits<_Function, void, true, 1>$/;"	s	namespace:Concurrency_winrt::details
_FunctorArguments	ppltasks_winrt.hpp	/^    struct _FunctorArguments$/;"	s	namespace:Concurrency_winrt::details
_FunctorArguments	ppltasks_winrt.hpp	/^    struct _FunctorArguments<_OneArgumentFunctor>$/;"	s	namespace:Concurrency_winrt::details
_FunctorArguments	ppltasks_winrt.hpp	/^    struct _FunctorArguments<_ThreeArgumentFunctor>$/;"	s	namespace:Concurrency_winrt::details
_FunctorArguments	ppltasks_winrt.hpp	/^    struct _FunctorArguments<_TwoArgumentFunctor>$/;"	s	namespace:Concurrency_winrt::details
_FunctorTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctorTypeTraits$/;"	s	namespace:Concurrency_winrt::details
_FunctorTypeTraits	ppltasks_winrt.hpp	/^    struct _FunctorTypeTraits<_T *>$/;"	s	namespace:Concurrency_winrt::details
_GenerateTask_0	ppltasks_winrt.hpp	/^            -> decltype(_Generator::_GenerateTask_0(_Func, _Cts, _callstack))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TaskGenerator
_GenerateTask_0	ppltasks_winrt.hpp	/^            -> decltype(_Generator::_GenerateTask_0(_Func, _Cts, _pRet, _callstack))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TaskGenerator
_GenerateTask_0	ppltasks_winrt.hpp	/^        static task<_ReturnType> _GenerateTask_0(const _Function& _Func, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_0	ppltasks_winrt.hpp	/^        static task<void> _GenerateTask_0(const _Function& _Func, Concurrency::cancellation_token_source _Cts, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_1C	ppltasks_winrt.hpp	/^        static task<_ReturnType> _GenerateTask_1C(const _Function& _Func, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_1C	ppltasks_winrt.hpp	/^        static task<void> _GenerateTask_1C(const _Function& _Func, Concurrency::cancellation_token_source _Cts, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_1P	ppltasks_winrt.hpp	/^        static task<_ReturnType> _GenerateTask_1P(const _Function& _Func, const _ProgressObject& _Progress, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_1P	ppltasks_winrt.hpp	/^        static task<void> _GenerateTask_1P(const _Function& _Func, const _ProgressObject& _Progress, Concurrency::cancellation_token_source _Cts, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_2PC	ppltasks_winrt.hpp	/^        static task<_ReturnType> _GenerateTask_2PC(const _Function& _Func, const _ProgressObject& _Progress, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_GenerateTask_2PC	ppltasks_winrt.hpp	/^        static task<void> _GenerateTask_2PC(const _Function& _Func, const _ProgressObject& _Progress, Concurrency::cancellation_token_source _Cts, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_SelectorTaskGenerator
_Generate_Task	ppltasks_winrt.hpp	/^        static task<task<void>> _Generate_Task(const _Function& _Func, _ClassPtr _Ptr, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_Generate_Task	ppltasks_winrt.hpp	/^        static task<task<void>> _Generate_Task(const _Function& _Func, _ClassPtr _Ptr, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_Generate_Task	ppltasks_winrt.hpp	/^        static task<typename _TaskTraits::_TaskRetType> _Generate_Task(const _Function& _Func, _ClassPtr _Ptr, Concurrency::cancellation_token_source _Cts, _ReturnType* _pRet, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_Generate_Task	ppltasks_winrt.hpp	/^        static task<void> _Generate_Task(const _Function& _Func, _ClassPtr _Ptr, Concurrency::cancellation_token_source _Cts)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_Generate_Task	ppltasks_winrt.hpp	/^        static task<void> _Generate_Task(const _Function& _Func, _ClassPtr _Ptr, Concurrency::cancellation_token_source _Cts, const _TaskCreationCallstack & _callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_GetImpl	ppltasks_winrt.hpp	/^    const details::_Task_ptr<details::_Unit_type>::_Type & _GetImpl() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_GetImpl	ppltasks_winrt.hpp	/^    const typename details::_Task_ptr<_ReturnType>::_Type & _GetImpl() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_GetOnProgress	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP _GetOnProgress(typename _Attributes::_ProgressDelegateType** _ProgressHandler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_GetProgressType	ppltasks_winrt.hpp	/^    struct _GetProgressType$/;"	s	namespace:Concurrency_winrt::details
_Holder	ppltasks_winrt.hpp	/^            _Holder(_TaskProcThunk * _PThunk) : _M_pThunk(_PThunk)$/;"	f	struct:Concurrency_winrt::details::_TaskProcThunk::_Holder
_Holder	ppltasks_winrt.hpp	/^        struct _Holder$/;"	s	struct:Concurrency_winrt::details::_TaskProcThunk
_IDeviceInformation	cap_msmf.hpp	425;"	d
_IDeviceInformation	cap_msmf.hpp	515;"	d
_Init	ppltasks_winrt.hpp	/^        void _Init(details::_TypeSelectorAsyncAction) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_Init	ppltasks_winrt.hpp	/^        void _Init(details::_TypeSelectorAsyncActionWithProgress) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_Init	ppltasks_winrt.hpp	/^        void _Init(details::_TypeSelectorAsyncOperation) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_Init	ppltasks_winrt.hpp	/^        void _Init(details::_TypeSelectorAsyncOperationWithProgress) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_Init	ppltasks_winrt.hpp	/^        void _Init(details::_TypeSelectorAsyncTask) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_Init	ppltasks_winrt.hpp	/^        void _Init(details::_TypeSelectorNoAsync) const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_InitFunctorTypeTraits	ppltasks_winrt.hpp	/^    struct _InitFunctorTypeTraits$/;"	s	namespace:Concurrency_winrt::details
_InitFunctorTypeTraits	ppltasks_winrt.hpp	/^    struct _InitFunctorTypeTraits<T, T>$/;"	s	namespace:Concurrency_winrt::details
_Init_func_transformer	ppltasks_winrt.hpp	/^    class _Init_func_transformer$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Init_func_transformer	ppltasks_winrt.hpp	/^    class _Init_func_transformer<void>$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_InitialTaskHandle	ppltasks_winrt.hpp	/^        _InitialTaskHandle(const typename details::_Task_ptr<_ReturnType>::_Type & _TaskImpl, const _Function & _Function) : _M_function(_Function), _PPLTaskHandle(_TaskImpl)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_InitialTaskHandle	ppltasks_winrt.hpp	/^    struct _InitialTaskHandle :$/;"	s	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_InitializeWithSettingsAsync	cap_msmf.hpp	435;"	d
_InitializeWithSettingsAsync	cap_msmf.hpp	525;"	d
_Internal_task_options	ppltasks_winrt.hpp	/^        _Internal_task_options()$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::_Internal_task_options
_Internal_task_options	ppltasks_winrt.hpp	/^    struct _Internal_task_options$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details
_IsAgile	agile_wrl.hpp	/^    static const bool _IsAgile = false;$/;"	m	struct:UnwrapAgile
_IsAgile	agile_wrl.hpp	/^    static const bool _IsAgile = true;$/;"	m	struct:UnwrapAgile
_IsAsyncTask	ppltasks_winrt.hpp	/^        static const bool _IsAsyncTask = _IsAsync;$/;"	m	struct:Concurrency_winrt::details::_TaskTypeTraits
_IsAsyncTask	ppltasks_winrt.hpp	/^        static const bool _IsAsyncTask = _TaskTypeTraits<_FuncRetType>::_IsAsyncTask;$/;"	m	struct:Concurrency_winrt::details::_InitFunctorTypeTraits
_IsAsyncTask	ppltasks_winrt.hpp	/^        static const bool _IsAsyncTask = false;$/;"	m	struct:Concurrency_winrt::details::_InitFunctorTypeTraits
_IsAsyncTask	ppltasks_winrt.hpp	/^        static const bool _IsAsyncTask = false;$/;"	m	struct:Concurrency_winrt::details::_TaskTypeTraits
_IsAsyncTask	ppltasks_winrt.hpp	/^        static const bool _IsAsyncTask = true;$/;"	m	struct:Concurrency_winrt::details::_TaskTypeTraits
_IsCallable	ppltasks_winrt.hpp	/^    template <typename _ReturnType, typename _Function> std::false_type _IsCallable(_Function, ...) { return std::false_type(); }$/;"	f	namespace:Concurrency_winrt::details
_IsCausalitySupported	ppltasks_winrt.hpp	/^    inline bool _IsCausalitySupported()$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details
_IsIAsyncInfo	ppltasks_winrt.hpp	/^    struct _IsIAsyncInfo$/;"	s	namespace:Concurrency_winrt::details
_IsIAsyncInfo	ppltasks_winrt.hpp	/^    struct _IsIAsyncInfo<void>$/;"	s	namespace:Concurrency_winrt::details
_IsMediaTypeSupported	cap_winrt/MediaStreamSink.cpp	/^bool MediaStreamSink::_IsMediaTypeSupported(__in const ComPtr<IMFMediaType>& mt) const$/;"	f	class:MediaStreamSink
_IsTerminalState	ppltasks_winrt.hpp	/^        inline bool _IsTerminalState()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_IsTerminalState	ppltasks_winrt.hpp	/^        inline bool _IsTerminalState(_AsyncStatusInternal status)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_IsTriggered	ppltasks_winrt.hpp	/^    bool _IsTriggered() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
_IsUnwrappedAsyncSelector	ppltasks_winrt.hpp	/^    struct _IsUnwrappedAsyncSelector$/;"	s	namespace:Concurrency_winrt::details
_IsUnwrappedAsyncSelector	ppltasks_winrt.hpp	/^    struct _IsUnwrappedAsyncSelector<_TypeSelectorNoAsync>$/;"	s	namespace:Concurrency_winrt::details
_IsUnwrappedTaskOrAsync	ppltasks_winrt.hpp	/^        static const bool _IsUnwrappedTaskOrAsync = _TaskTypeTraits<_FuncRetType>::_IsUnwrappedTaskOrAsync;$/;"	m	struct:Concurrency_winrt::details::_InitFunctorTypeTraits
_IsUnwrappedTaskOrAsync	ppltasks_winrt.hpp	/^        static const bool _IsUnwrappedTaskOrAsync = details::_IsUnwrappedAsyncSelector<_AsyncKind>::_Value;$/;"	m	struct:Concurrency_winrt::details::_TaskTypeTraits
_IsUnwrappedTaskOrAsync	ppltasks_winrt.hpp	/^        static const bool _IsUnwrappedTaskOrAsync = false;$/;"	m	struct:Concurrency_winrt::details::_InitFunctorTypeTraits
_IsUnwrappedTaskOrAsync	ppltasks_winrt.hpp	/^        static const bool _IsUnwrappedTaskOrAsync = false;$/;"	m	struct:Concurrency_winrt::details::_TaskTypeTraits
_LINUX	cap_pvapi.cpp	50;"	d	file:
_MAX_PATH	cap_images.cpp	62;"	d	file:
_M_CallbackMade	ppltasks_winrt.hpp	/^        long volatile                                   _M_CallbackMade;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_CancellationToken	ppltasks_winrt.hpp	/^    Concurrency::cancellation_token _M_CancellationToken;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::task_options
_M_CompleteDelegateAssigned	ppltasks_winrt.hpp	/^        long volatile                                   _M_CompleteDelegateAssigned;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_Completed	ppltasks_winrt.hpp	/^        task_completion_event<_CompletionType>      _M_Completed;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_M_ContinuationContext	ppltasks_winrt.hpp	/^    task_continuation_context _M_ContinuationContext;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::task_options
_M_HasCancellationToken	ppltasks_winrt.hpp	/^    bool _M_HasCancellationToken;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::task_options
_M_HasScheduler	ppltasks_winrt.hpp	/^    bool _M_HasScheduler;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::task_options
_M_Impl	ppltasks_winrt.hpp	/^    typename details::_Task_ptr<_ReturnType>::_Type _M_Impl;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_M_InternalTaskOptions	ppltasks_winrt.hpp	/^    details::_Internal_task_options _M_InternalTaskOptions;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::task_options
_M_Scheduler	ppltasks_winrt.hpp	/^    Concurrency::scheduler_ptr _M_Scheduler;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::task_options
_M_SingleFrame	ppltasks_winrt.hpp	/^        void* _M_SingleFrame;$/;"	m	class:Concurrency_winrt::details::_TaskCreationCallstack
_M_ancestorTaskImpl	ppltasks_winrt.hpp	/^        typename details::_Task_ptr<_ReturnType>::_Type _M_ancestorTaskImpl;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_M_cancellationSource	ppltasks_winrt.hpp	/^        Concurrency::cancellation_token_source                   _M_cancellationSource;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_M_completeCount	ppltasks_winrt.hpp	/^        atomic_size_t         _M_completeCount;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_M_completeDelegate	ppltasks_winrt.hpp	/^        Microsoft::WRL::ComPtr<typename _Attributes::_CompletionDelegateType>  _M_completeDelegate; \/\/ComPtr cannot be volatile as it does not have volatile accessors$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_completeDelegateContext	ppltasks_winrt.hpp	/^        _ContextCallback        _M_completeDelegateContext;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_continuationContext	ppltasks_winrt.hpp	/^        task_continuation_context _M_continuationContext;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::_ContinuationTaskHandleBase
_M_creationCallstack	ppltasks_winrt.hpp	/^        _TaskCreationCallstack _M_creationCallstack;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskGeneratorThunk
_M_cts	ppltasks_winrt.hpp	/^        Concurrency::cancellation_token_source _M_cts;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_currentStatus	ppltasks_winrt.hpp	/^        _AsyncStatusInternal volatile                   _M_currentStatus;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_dispatcher	ppltasks_winrt.hpp	/^    _PtrType _M_dispatcher;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::progress_reporter
_M_errorCode	ppltasks_winrt.hpp	/^        HRESULT volatile                                _M_errorCode;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_exceptionRelatedToken	ppltasks_winrt.hpp	/^        Concurrency::details::_CancellationTokenState*            _M_exceptionRelatedToken;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_M_fHasExplicitToken	ppltasks_winrt.hpp	/^        bool                                        _M_fHasExplicitToken;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_M_frames	ppltasks_winrt.hpp	/^        std::vector<void *> _M_frames;$/;"	m	class:Concurrency_winrt::details::_TaskCreationCallstack
_M_func	ppltasks_winrt.hpp	/^        _Function _M_func;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncTaskGeneratorThunk
_M_func	ppltasks_winrt.hpp	/^        std::function<HRESULT(void)> _M_func;$/;"	m	struct:Concurrency_winrt::details::_TaskProcThunk
_M_function	ppltasks_winrt.hpp	/^        _Function _M_function;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_M_function	ppltasks_winrt.hpp	/^        _Function _M_function;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_M_hasPresetCreationCallstack	ppltasks_winrt.hpp	/^        bool _M_hasPresetCreationCallstack;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::_Internal_task_options
_M_id	ppltasks_winrt.hpp	/^        unsigned int                                    _M_id;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_inliningMode	ppltasks_winrt.hpp	/^        _TaskInliningMode _M_inliningMode;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::_ContinuationTaskHandleBase
_M_isTaskBasedContinuation	ppltasks_winrt.hpp	/^        bool _M_isTaskBasedContinuation;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::_ContinuationTaskHandleBase
_M_next	ppltasks_winrt.hpp	/^        _ContinuationTaskHandleBase * _M_next;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::_ContinuationTaskHandleBase
_M_numTasks	ppltasks_winrt.hpp	/^        size_t                                      _M_numTasks;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_M_pThunk	ppltasks_winrt.hpp	/^            _TaskProcThunk * _M_pThunk;$/;"	m	struct:Concurrency_winrt::details::_TaskProcThunk::_Holder
_M_presetCreationCallstack	ppltasks_winrt.hpp	/^        _TaskCreationCallstack _M_presetCreationCallstack;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::_Internal_task_options
_M_progressDelegate	ppltasks_winrt.hpp	/^        typename _Attributes::_ProgressDelegateType* _M_progressDelegate;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_progressDelegateContext	ppltasks_winrt.hpp	/^        _ContextCallback _M_progressDelegateContext;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_ptr	ppltasks_winrt.hpp	/^        _ClassPtrType _M_ptr;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressDispatcher
_M_results	ppltasks_winrt.hpp	/^        _ReturnType _M_results;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_results	ppltasks_winrt.hpp	/^        task<void> _M_results;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_task	ppltasks_winrt.hpp	/^        _TaskType _M_task;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_M_unitEvent	ppltasks_winrt.hpp	/^    task_completion_event<details::_Unit_type> _M_unitEvent;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
_M_unitTask	ppltasks_winrt.hpp	/^    task<details::_Unit_type> _M_unitTask;$/;"	m	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Make	ppltasks_winrt.hpp	/^        static _Type _Make(Concurrency::details::_CancellationTokenState * _Ct) { return std::make_shared<_Task_impl<_ReturnType>>(_Ct); }$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::_Task_ptr
_Make	ppltasks_winrt.hpp	/^        static _Type _Make(Concurrency::details::_CancellationTokenState * _Ct, Concurrency::scheduler_ptr _Scheduler_arg) { return std::make_shared<_Task_impl<_ReturnType>>(_Ct, _Scheduler_arg); }$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::_Task_ptr
_MakeTToUnitFunc	ppltasks_winrt.hpp	/^        static auto _Perform(std::function<HRESULT(_InType)> _Func) -> decltype(details::_MakeTToUnitFunc<_InType>(_Func))$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_Continuation_func_transformer
_MakeUnitToTFunc	ppltasks_winrt.hpp	/^        static auto _Perform(std::function<HRESULT(_OutType*)> _Func) -> decltype(details::_MakeUnitToTFunc<_OutType>(_Func))$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_Continuation_func_transformer
_MakeUnitToUnitFunc	ppltasks_winrt.hpp	/^        static auto _Perform(std::function<HRESULT(void)> _Func) -> decltype(details::_MakeUnitToUnitFunc(_Func))$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_Continuation_func_transformer
_MakeVoidToUnitFunc	ppltasks_winrt.hpp	/^        static auto _Perform(std::function<HRESULT(void)> _Func) -> decltype(details::_MakeVoidToUnitFunc(_Func))$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_Init_func_transformer
_Map	cap_msmf.hpp	431;"	d
_Map	cap_msmf.hpp	521;"	d
_MediaCapture	cap_msmf.hpp	413;"	d
_MediaCapture	cap_msmf.hpp	503;"	d
_MediaCaptureInitializationSettings	cap_msmf.hpp	415;"	d
_MediaCaptureInitializationSettings	cap_msmf.hpp	505;"	d
_MediaCaptureVideoPreview	cap_msmf.hpp	414;"	d
_MediaCaptureVideoPreview	cap_msmf.hpp	504;"	d
_MediaDeviceController	cap_msmf.hpp	417;"	d
_MediaDeviceController	cap_msmf.hpp	507;"	d
_MediaEncodingProfile	cap_msmf.hpp	428;"	d
_MediaEncodingProfile	cap_msmf.hpp	518;"	d
_MediaEncodingProperties	cap_msmf.hpp	418;"	d
_MediaEncodingProperties	cap_msmf.hpp	508;"	d
_MediaExtension	cap_msmf.hpp	437;"	d
_MediaExtension	cap_msmf.hpp	527;"	d
_MediaStreamType	cap_msmf.hpp	420;"	d
_MediaStreamType	cap_msmf.hpp	510;"	d
_NormalizeVoidToUnitType	ppltasks_winrt.hpp	/^    struct _NormalizeVoidToUnitType$/;"	s	namespace:Concurrency_winrt::details
_NormalizeVoidToUnitType	ppltasks_winrt.hpp	/^    struct _NormalizeVoidToUnitType<void>$/;"	s	namespace:Concurrency_winrt::details
_NormalizedContinuationReturnType	ppltasks_winrt.hpp	/^        typedef typename details::_NormalizeVoidToUnitType<_ContinuationReturnType>::_Type _NormalizedContinuationReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_NormalizedTaskRetType	ppltasks_winrt.hpp	/^        typedef _TaskRetType _NormalizedTaskRetType;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_NormalizedTaskRetType	ppltasks_winrt.hpp	/^        typedef _Unit_type _NormalizedTaskRetType;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_NormalizedTaskRetType	ppltasks_winrt.hpp	/^        typedef typename details::_NormalizeVoidToUnitType<_TaskRetType>::_Type _NormalizedTaskRetType;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_Object	cap_msmf.hpp	406;"	d
_Object	cap_msmf.hpp	496;"	d
_ObjectObj	cap_msmf.hpp	407;"	d
_ObjectObj	cap_msmf.hpp	497;"	d
_OneArgumentFunctor	ppltasks_winrt.hpp	/^    struct _OneArgumentFunctor { };$/;"	s	namespace:Concurrency_winrt::details
_PLATFORM_AGILE_H_	agile_wrl.hpp	10;"	d
_PPLTASKS_WINRT_H	ppltasks_winrt.hpp	21;"	d
_PPLTASK_ASYNC_LOGGING	ppltasks_winrt.hpp	104;"	d
_Perform	ppltasks_winrt.hpp	/^        static task<std::pair<_ElementType, size_t>> _Perform(const task_options& _TaskOptions, _Iterator _Begin, _Iterator _End)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
_Perform	ppltasks_winrt.hpp	/^        void _Perform() const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_Perform	ppltasks_winrt.hpp	/^        void _Perform() const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_Perform	ppltasks_winrt.hpp	/^-> decltype (details::_WhenAllImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(_TaskOptions, _Begin, _End))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
_Perform	ppltasks_winrt.hpp	/^-> decltype (details::_WhenAllImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(nullptr, _Begin, _End))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
_Perform	ppltasks_winrt.hpp	/^-> decltype (details::_WhenAnyImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(_CancellationToken._GetImplValue(), _Begin, _End))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
_Perform	ppltasks_winrt.hpp	/^-> decltype (details::_WhenAnyImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(_TaskOptions, _Begin, _End))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
_ProgressDelegateType	ppltasks_winrt.hpp	/^        typedef _Zip _ProgressDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ProgressDelegateType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncActionProgressHandler<_ProgressType> _ProgressDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ProgressDelegateType	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::IAsyncOperationProgressHandler<_ReturnType, _ProgressType> _ProgressDelegateType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ProgressDispatcher	ppltasks_winrt.hpp	/^        _ProgressDispatcher(_ClassPtrType _Ptr) : _M_ptr(_Ptr)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressDispatcher
_ProgressDispatcher	ppltasks_winrt.hpp	/^    class _ProgressDispatcher : public _ProgressDispatcherBase<_ProgressType>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_ProgressDispatcherBase	ppltasks_winrt.hpp	/^    class _ProgressDispatcherBase$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_ProgressReporterCtorArgType	ppltasks_winrt.hpp	/^    class _ProgressReporterCtorArgType{};$/;"	c	namespace:Concurrency_winrt::details
_ProgressType	ppltasks_winrt.hpp	/^        typedef typename _CAFunctorOptions<_Function>::_ProgressType _ProgressType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_ProgressType	ppltasks_winrt.hpp	/^        typedef typename _ProgressType _ProgressType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ProgressType	ppltasks_winrt.hpp	/^        typedef typename _ProgressTypeTraits<_Argument1Type>::_ProgressType _ProgressType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_ProgressType	ppltasks_winrt.hpp	/^        typedef typename _T _ProgressType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressTypeTraits
_ProgressType	ppltasks_winrt.hpp	/^        typedef void _ProgressType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_ProgressType	ppltasks_winrt.hpp	/^        typedef void _ProgressType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressTypeTraits
_ProgressTypeTraits	ppltasks_winrt.hpp	/^    struct _ProgressTypeTraits$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_ProgressTypeTraits	ppltasks_winrt.hpp	/^    struct _ProgressTypeTraits<progress_reporter<_T>>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_ProgressType_abi	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncActionWithProgressSelector(stdx::declval<_AsyncBaseType*>()))>::type _ProgressType_abi;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ProgressType_abi	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationWithProgressProgressSelector(stdx::declval<_AsyncBaseType*>()))>::type _ProgressType_abi;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_PropType	cap_msmf.hpp	/^    static const ABI::Windows::Foundation::PropertyType _PropType = ABI::Windows::Foundation::PropertyType::PropertyType_Empty;$/;"	m	struct:winrt_type
_PropType	cap_msmf.hpp	/^    static const ABI::Windows::Foundation::PropertyType _PropType = ABI::Windows::Foundation::PropertyType::PropertyType_OtherType;$/;"	m	struct:winrt_type
_PropType	cap_msmf.hpp	/^    static const ABI::Windows::Foundation::PropertyType _PropType = ABI::Windows::Foundation::PropertyType::PropertyType_OtherTypeArray;$/;"	m	struct:winrt_array_type
_PropertySet	cap_msmf.hpp	430;"	d
_PropertySet	cap_msmf.hpp	520;"	d
_PropertyValueStatics	cap_msmf.hpp	432;"	d
_PropertyValueStatics	cap_msmf.hpp	522;"	d
_PtrType	ppltasks_winrt.hpp	/^    typedef std::shared_ptr<details::_ProgressDispatcherBase<_ProgressType>> _PtrType;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::progress_reporter
_PutOnProgress	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP _PutOnProgress(typename _Attributes::_ProgressDelegateType* _ProgressHandler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_RegisterTask	ppltasks_winrt.hpp	/^    void _RegisterTask(details::_Task_ptr<details::_Unit_type>::_Type _TaskParam)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
_Report	ppltasks_winrt.hpp	/^        virtual void _Report(const _ProgressType& _Val)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressDispatcher
_Resize	ppltasks_winrt.hpp	/^        void _Resize(size_t _Len, bool _SkipVector = false)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
_Resolve	ppltasks_winrt.hpp	/^        void _Resolve(bool _CaptureCurrent)$/;"	f	class:Concurrency_winrt::details::_ContextCallback
_ReturnType	ppltasks_winrt.hpp	/^        typedef decltype(_ReturnTypeClassHelperThunk(&(_T::operator()))) _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_ReturnType	ppltasks_winrt.hpp	/^        typedef decltype(_ReturnTypePFNHelperThunk(stdx::declval<_T*>())) _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_FunctorTypeTraits
_ReturnType	ppltasks_winrt.hpp	/^        typedef typename _FunctorTypeTraits<_T>::_Argument3Type _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_ReturnType	ppltasks_winrt.hpp	/^        typedef typename _ReturnType _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ReturnType	ppltasks_winrt.hpp	/^        typedef typename _T _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TokenTypeTraits
_ReturnType	ppltasks_winrt.hpp	/^        typedef typename _TokenTypeTraits<_Argument1Type>::_ReturnType _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_ReturnType	ppltasks_winrt.hpp	/^        typedef typename _TokenTypeTraits<_Argument2Type>::_ReturnType _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_ReturnType	ppltasks_winrt.hpp	/^        typedef typename _Unhat<typename _CAFunctorOptions<_Function>::_ReturnType>::_Value _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_ReturnType	ppltasks_winrt.hpp	/^        typedef void _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ReturnType	ppltasks_winrt.hpp	/^        typedef void _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_ReturnType	ppltasks_winrt.hpp	/^        typedef void _ReturnType;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TokenTypeTraits
_ReturnType_abi	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationSelector(stdx::declval<_AsyncBaseType*>()))>::type _ReturnType_abi;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ReturnType_abi	ppltasks_winrt.hpp	/^        typedef typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationWithProgressSelector(stdx::declval<_AsyncBaseType*>()))>::type _ReturnType_abi;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_ReturnType_abi	ppltasks_winrt.hpp	/^        typedef void _ReturnType_abi;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_RunAllParam	ppltasks_winrt.hpp	/^        _RunAllParam() : _M_completeCount(0), _M_numTasks(0)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
_RunAllParam	ppltasks_winrt.hpp	/^    struct _RunAllParam$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_RunAnyParam	ppltasks_winrt.hpp	/^        _RunAnyParam() : _M_completeCount(0), _M_numTasks(0), _M_exceptionRelatedToken(nullptr), _M_fHasExplicitToken(false)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
_RunAnyParam	ppltasks_winrt.hpp	/^    struct _RunAnyParam$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details
_ScheduleFuncWithAutoInline	ppltasks_winrt.hpp	/^    static void _ScheduleFuncWithAutoInline(const std::function<HRESULT(void)> & _Func, _TaskInliningMode _InliningMode)$/;"	f	namespace:Concurrency_winrt::details
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^        typedef typename _SelectorTaskGenerator<_AsyncKind, _ReturnType> _SelectorTaskGenerator;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^    struct _SelectorTaskGenerator$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^    struct _SelectorTaskGenerator<_AsyncSelector, void>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^    struct _SelectorTaskGenerator<details::_TypeSelectorAsyncTask, _ReturnType>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^    struct _SelectorTaskGenerator<details::_TypeSelectorAsyncTask, void>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^    struct _SelectorTaskGenerator<details::_TypeSelectorNoAsync, _ReturnType>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_SelectorTaskGenerator	ppltasks_winrt.hpp	/^    struct _SelectorTaskGenerator<details::_TypeSelectorNoAsync, void>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_SetAsync	ppltasks_winrt.hpp	/^    void _SetAsync(bool _Async = true)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_SetImpl	ppltasks_winrt.hpp	/^    void _SetImpl(const details::_Task_ptr<details::_Unit_type>::_Type & _Impl)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_SetImpl	ppltasks_winrt.hpp	/^    void _SetImpl(const typename details::_Task_ptr<_ReturnType>::_Type & _Impl)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_SetImpl	ppltasks_winrt.hpp	/^    void _SetImpl(details::_Task_ptr<details::_Unit_type>::_Type && _Impl)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_SetImpl	ppltasks_winrt.hpp	/^    void _SetImpl(typename details::_Task_ptr<_ReturnType>::_Type && _Impl)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_SetTaskCreationAddressHint	ppltasks_winrt.hpp	/^        void _SetTaskCreationAddressHint(void* _SourceAddressHint)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_SetTaskCreationAddressHint	ppltasks_winrt.hpp	/^    void _SetTaskCreationAddressHint(void* _Address)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_SetTaskCreationCallstack	ppltasks_winrt.hpp	/^    void _SetTaskCreationCallstack(const details::_TaskCreationCallstack &_callstack)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_Start	ppltasks_winrt.hpp	/^        STDMETHODIMP _Start()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_StartPreviewToCustomSinkIdAsync	cap_msmf.hpp	434;"	d
_StartPreviewToCustomSinkIdAsync	cap_msmf.hpp	524;"	d
_StoreException	ppltasks_winrt.hpp	/^    bool _StoreException(const std::shared_ptr<details::_ExceptionHolder>& _ExHolder) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
_StreamingCaptureMode	cap_msmf.hpp	429;"	d
_StreamingCaptureMode	cap_msmf.hpp	519;"	d
_String	cap_msmf.hpp	408;"	d
_String	cap_msmf.hpp	498;"	d
_StringObj	cap_msmf.hpp	409;"	d
_StringObj	cap_msmf.hpp	499;"	d
_StringReference	cap_msmf.hpp	410;"	d
_StringReference	cap_msmf.hpp	500;"	d
_StringReferenceObj	cap_msmf.hpp	411;"	d
_StringReferenceObj	cap_msmf.hpp	501;"	d
_SyncCancelAndPropagateException	ppltasks_winrt.hpp	/^        void _SyncCancelAndPropagateException() const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
_SyncCancelAndPropagateException	ppltasks_winrt.hpp	/^        void _SyncCancelAndPropagateException() const$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = _CAFunctorOptions<_Function>::_TakesProgress;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = _ProgressTypeTraits<_Argument1Type>::_TakesProgress;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = false;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = false;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = false;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressTypeTraits
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = true;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = true;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesProgress	ppltasks_winrt.hpp	/^        static const bool _TakesProgress = true;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressTypeTraits
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = !_TakesProgress ? true : _TokenTypeTraits<_Argument2Type>::_TakesToken;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = _CAFunctorOptions<_Function>::_TakesToken;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = _TakesToken;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = _TokenTypeTraits<_Argument1Type>::_TakesToken;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = false;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = false;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TokenTypeTraits
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = true;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_CAFunctorOptions
_TakesToken	ppltasks_winrt.hpp	/^        static const bool _TakesToken = true;$/;"	m	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TokenTypeTraits
_Takes_task	ppltasks_winrt.hpp	/^        typedef decltype(_VoidIsTaskHelper(stdx::declval<_FunctorTypeTraits<_Function>::_Argument1Type>(), 0)) _Takes_task;$/;"	t	struct:Concurrency_winrt::details::_FunctionTypeTraits
_Takes_task	ppltasks_winrt.hpp	/^        typedef std::false_type _Takes_task;$/;"	t	struct:Concurrency_winrt::details::_FunctionTypeTraits
_TaskCreationCallstack	ppltasks_winrt.hpp	/^        _TaskCreationCallstack()$/;"	f	class:Concurrency_winrt::details::_TaskCreationCallstack
_TaskCreationCallstack	ppltasks_winrt.hpp	/^    class _TaskCreationCallstack$/;"	c	namespace:Concurrency_winrt::details
_TaskGenerator	ppltasks_winrt.hpp	/^        typedef typename _TaskGenerator<_SelectorTaskGenerator, _TakesToken, false> _TaskGenerator;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_TaskGenerator	ppltasks_winrt.hpp	/^        typedef typename _TaskGenerator<_SelectorTaskGenerator, _TakesToken, true> _TaskGenerator;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncAttributes
_TaskGenerator	ppltasks_winrt.hpp	/^    struct _TaskGenerator$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TaskGenerator	ppltasks_winrt.hpp	/^    struct _TaskGenerator<_Generator, false, false>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TaskGenerator	ppltasks_winrt.hpp	/^    struct _TaskGenerator<_Generator, false, true>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TaskGenerator	ppltasks_winrt.hpp	/^    struct _TaskGenerator<_Generator, true, false>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TaskGenerator	ppltasks_winrt.hpp	/^    struct _TaskGenerator<_Generator, true, true>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TaskInitAsyncOp	ppltasks_winrt.hpp	/^    void _TaskInitAsyncOp(details::_AsyncInfoImpl<_OpType, _CompHandlerType, _ResultType>* _AsyncOp)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitMaybeFunctor	ppltasks_winrt.hpp	/^    void _TaskInitMaybeFunctor(_Function & _Func, std::true_type)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitMaybeFunctor	ppltasks_winrt.hpp	/^    void _TaskInitMaybeFunctor(_T & _Param, std::false_type)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitMaybeFunctor	ppltasks_winrt.hpp	/^    void _TaskInitMaybeFunctor(_Ty & _Param, std::false_type)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitNoFunctor	ppltasks_winrt.hpp	/^    void _TaskInitNoFunctor(ABI::Windows::Foundation::IAsyncAction* _AsyncAction)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitNoFunctor	ppltasks_winrt.hpp	/^    void _TaskInitNoFunctor(ABI::Windows::Foundation::IAsyncActionWithProgress<_P>* _AsyncActionWithProgress)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitNoFunctor	ppltasks_winrt.hpp	/^    void _TaskInitNoFunctor(ABI::Windows::Foundation::IAsyncOperation<_Result>* _AsyncOp)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitNoFunctor	ppltasks_winrt.hpp	/^    void _TaskInitNoFunctor(ABI::Windows::Foundation::IAsyncOperationWithProgress<_Result, _Progress>* _AsyncOp)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitNoFunctor	ppltasks_winrt.hpp	/^    void _TaskInitNoFunctor(task_completion_event<_ReturnType>& _Event)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitNoFunctor	ppltasks_winrt.hpp	/^    void _TaskInitNoFunctor(task_completion_event<void>& _Event)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInitWithFunctor	ppltasks_winrt.hpp	/^    void _TaskInitWithFunctor(const _Function& _Func)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
_TaskInliningMode	ppltasks_winrt.hpp	/^    typedef Concurrency::details::_TaskInliningMode _TaskInliningMode;$/;"	t	namespace:Concurrency_winrt::details
_TaskInliningMode	ppltasks_winrt.hpp	/^    typedef Concurrency::details::_TaskInliningMode_t _TaskInliningMode;$/;"	t	namespace:Concurrency_winrt::details
_TaskOfType	ppltasks_winrt.hpp	/^        typedef typename task<typename _TaskTypeTraits<typename _FunctionTypeTraits<_Function, _ReturnType>::_FuncRetType>::_TaskRetType_abi> _TaskOfType;$/;"	t	struct:Concurrency_winrt::details::_ContinuationTypeTraits
_TaskProcThunk	ppltasks_winrt.hpp	/^        _TaskProcThunk(const std::function<HRESULT(void)> & _Callback) :$/;"	f	struct:Concurrency_winrt::details::_TaskProcThunk
_TaskProcThunk	ppltasks_winrt.hpp	/^    struct _TaskProcThunk$/;"	s	namespace:Concurrency_winrt::details
_TaskRetType	ppltasks_winrt.hpp	/^        typedef decltype(_ReturnAsyncOperationKindSelector(stdx::declval<_Type>())) _TaskRetType;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_TaskRetType	ppltasks_winrt.hpp	/^        typedef typename details::_UnwrapTaskType<_Type>::_Type _TaskRetType;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_TaskRetType	ppltasks_winrt.hpp	/^        typedef void _TaskRetType;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_TaskRetType_abi	ppltasks_winrt.hpp	/^        typedef _TaskRetType _TaskRetType_abi;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_TaskRetType_abi	ppltasks_winrt.hpp	/^        typedef decltype(_GetUnwrappedType(stdx::declval<_Type>())) _TaskRetType_abi;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_TaskRetType_abi	ppltasks_winrt.hpp	/^        typedef void _TaskRetType_abi;$/;"	t	struct:Concurrency_winrt::details::_TaskTypeTraits
_TaskTraits	ppltasks_winrt.hpp	/^        typedef typename _TaskTypeTraits<_ReturnType> _TaskTraits;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_AsyncLambdaTypeTraits
_TaskType	ppltasks_winrt.hpp	/^        typedef task<_ReturnType> _TaskType;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_TaskTypeFromParam	ppltasks_winrt.hpp	/^    struct _TaskTypeFromParam$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TaskTypeTraits	ppltasks_winrt.hpp	/^    struct _TaskTypeTraits$/;"	s	namespace:Concurrency_winrt::details
_TaskTypeTraits	ppltasks_winrt.hpp	/^    struct _TaskTypeTraits<_Type, true>$/;"	s	namespace:Concurrency_winrt::details
_TaskTypeTraits	ppltasks_winrt.hpp	/^    struct _TaskTypeTraits<void>$/;"	s	namespace:Concurrency_winrt::details
_Task_generator_oversubscriber	ppltasks_winrt.hpp	/^        _Task_generator_oversubscriber()$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_Task_generator_oversubscriber
_Task_generator_oversubscriber	ppltasks_winrt.hpp	/^    struct _Task_generator_oversubscriber$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_Task_ptr	ppltasks_winrt.hpp	/^    struct _Task_ptr$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details
_Task_ptr_base	ppltasks_winrt.hpp	/^    typedef std::shared_ptr<_Task_impl_base> _Task_ptr_base;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
_ThreeArgumentFunctor	ppltasks_winrt.hpp	/^    struct _ThreeArgumentFunctor { };$/;"	s	namespace:Concurrency_winrt::details
_To_task_helper	ppltasks_winrt.hpp	/^    inline task<void> _To_task_helper(ABI::Windows::Foundation::IAsyncAction* op)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_To_task_helper	ppltasks_winrt.hpp	/^    task<typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationSelector(stdx::declval<ABI::Windows::Foundation::IAsyncOperation<_T>*>()))>::type> _To_task_helper(ABI::Windows::Foundation::IAsyncOperation<_T>* op)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_To_task_helper	ppltasks_winrt.hpp	/^    task<typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationWithProgressSelector(stdx::declval<ABI::Windows::Foundation::IAsyncOperationWithProgress<_T, _Progress>*>()))>::type> _To_task_helper(ABI::Windows::Foundation::IAsyncOperationWithProgress<_T, _Progress>* op)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_To_task_helper	ppltasks_winrt.hpp	/^    task<void> _To_task_helper(ABI::Windows::Foundation::IAsyncActionWithProgress<_Progress>* op)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TokenTypeTraits	ppltasks_winrt.hpp	/^    struct _TokenTypeTraits$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TokenTypeTraits	ppltasks_winrt.hpp	/^    struct _TokenTypeTraits<_T, false, true>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TokenTypeTraits	ppltasks_winrt.hpp	/^    struct _TokenTypeTraits<_T, true, false>$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_TransitionToState	ppltasks_winrt.hpp	/^        inline bool _TransitionToState(const _AsyncStatusInternal _NewState)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_TryTransitionToCancelled	ppltasks_winrt.hpp	/^        bool _TryTransitionToCancelled()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_TryTransitionToCompleted	ppltasks_winrt.hpp	/^        bool _TryTransitionToCompleted()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_TryTransitionToError	ppltasks_winrt.hpp	/^        bool _TryTransitionToError(const HRESULT error)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
_TwoArgumentFunctor	ppltasks_winrt.hpp	/^    struct _TwoArgumentFunctor { };$/;"	s	namespace:Concurrency_winrt::details
_Type	cap_msmf.hpp	/^    typedef void _Type;$/;"	t	struct:winrt_prop_type
_Type	ppltasks_winrt.hpp	/^        typedef _Ty _Type;$/;"	t	struct:Concurrency_winrt::details::_NormalizeVoidToUnitType
_Type	ppltasks_winrt.hpp	/^        typedef _Ty _Type;$/;"	t	struct:Concurrency_winrt::details::_UnwrapTaskType
_Type	ppltasks_winrt.hpp	/^        typedef _Unit_type _Type;$/;"	t	struct:Concurrency_winrt::details::_NormalizeVoidToUnitType
_Type	ppltasks_winrt.hpp	/^        typedef decltype(_FilterValidTaskType<_ReturnType>(stdx::declval<_Ty>(), 0)) _Type;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_TaskTypeFromParam
_Type	ppltasks_winrt.hpp	/^        typedef std::shared_ptr<_Task_impl<_ReturnType>> _Type;$/;"	t	struct:Concurrency_winrt::details::_ContextCallback::details::_Task_ptr
_TypeSelectorAsyncAction	ppltasks_winrt.hpp	/^    struct _TypeSelectorAsyncAction {};$/;"	s	namespace:Concurrency_winrt::details
_TypeSelectorAsyncActionWithProgress	ppltasks_winrt.hpp	/^    struct _TypeSelectorAsyncActionWithProgress {};$/;"	s	namespace:Concurrency_winrt::details
_TypeSelectorAsyncOperation	ppltasks_winrt.hpp	/^    struct _TypeSelectorAsyncOperation : public _TypeSelectorAsyncOperationOrTask { };$/;"	s	namespace:Concurrency_winrt::details
_TypeSelectorAsyncOperationOrTask	ppltasks_winrt.hpp	/^    struct _TypeSelectorAsyncOperationOrTask {};$/;"	s	namespace:Concurrency_winrt::details
_TypeSelectorAsyncOperationWithProgress	ppltasks_winrt.hpp	/^    struct _TypeSelectorAsyncOperationWithProgress {};$/;"	s	namespace:Concurrency_winrt::details
_TypeSelectorAsyncTask	ppltasks_winrt.hpp	/^    struct _TypeSelectorAsyncTask : public _TypeSelectorAsyncOperationOrTask { };$/;"	s	namespace:Concurrency_winrt::details
_TypeSelectorNoAsync	ppltasks_winrt.hpp	/^    struct _TypeSelectorNoAsync {};$/;"	s	namespace:Concurrency_winrt::details
_UITHREADCTXT_SUPPORT	ppltasks_winrt.hpp	64;"	d
_UITHREADCTXT_SUPPORT	ppltasks_winrt.hpp	67;"	d
_UITHREADCTXT_SUPPORT	ppltasks_winrt.hpp	69;"	d
_UITHREADCTXT_SUPPORT	ppltasks_winrt.hpp	74;"	d
_Unhat	ppltasks_winrt.hpp	/^    struct _Unhat$/;"	s	namespace:Concurrency_winrt::details
_Unhat	ppltasks_winrt.hpp	/^    struct _Unhat<_Type*>$/;"	s	namespace:Concurrency_winrt::details
_Unit_type	ppltasks_winrt.hpp	/^    typedef UINT32 _Unit_type;$/;"	t	namespace:Concurrency_winrt::details
_UnrealizedChore	ppltasks_winrt.hpp	/^    typedef Concurrency::details::_UnrealizedChore _UnrealizedChore;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
_UnrealizedChore	ppltasks_winrt.hpp	/^    typedef _UnrealizedChore_t _UnrealizedChore;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
_UnrealizedChore_t	ppltasks_winrt.hpp	/^    typedef Concurrency::details::_TaskCollection_t::_TaskProcHandle_t _UnrealizedChore_t;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
_UnwrapTaskType	ppltasks_winrt.hpp	/^    struct _UnwrapTaskType$/;"	s	namespace:Concurrency_winrt::details
_UnwrapTaskType	ppltasks_winrt.hpp	/^    struct _UnwrapTaskType<task<_Ty>>$/;"	s	namespace:Concurrency_winrt::details
_UpdateMediaType	cap_winrt/MediaStreamSink.cpp	/^void MediaStreamSink::_UpdateMediaType(__in const ComPtr<IMFMediaType>& mt)$/;"	f	class:MediaStreamSink
_ValidateTaskConstructorArgs	ppltasks_winrt.hpp	/^    void _ValidateTaskConstructorArgs(_Ty _Param)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
_Value	ppltasks_winrt.hpp	/^        static const bool _Value = false;$/;"	m	struct:Concurrency_winrt::details::_IsIAsyncInfo
_Value	ppltasks_winrt.hpp	/^        static const bool _Value = false;$/;"	m	struct:Concurrency_winrt::details::_IsUnwrappedAsyncSelector
_Value	ppltasks_winrt.hpp	/^        static const bool _Value = std::is_base_of<ABI::Windows::Foundation::IAsyncInfo, typename _Unhat<_Type>::_Value>::value ||$/;"	m	struct:Concurrency_winrt::details::_IsIAsyncInfo
_Value	ppltasks_winrt.hpp	/^        static const bool _Value = true;$/;"	m	struct:Concurrency_winrt::details::_IsUnwrappedAsyncSelector
_Value	ppltasks_winrt.hpp	/^        typedef _Type _Value;$/;"	t	struct:Concurrency_winrt::details::_Unhat
_Value	ppltasks_winrt.hpp	/^        typedef _Type _Value;$/;"	t	struct:Concurrency_winrt::details::_ValueTypeOrRefType
_Value	ppltasks_winrt.hpp	/^        typedef _Unit_type _Value;$/;"	t	struct:Concurrency_winrt::details::_ValueTypeOrRefType
_Value	ppltasks_winrt.hpp	/^        typedef decltype(_ProgressTypeSelector(stdx::declval<_Type>())) _Value;$/;"	t	struct:Concurrency_winrt::details::_GetProgressType
_ValueTypeOrRefType	ppltasks_winrt.hpp	/^    struct _ValueTypeOrRefType$/;"	s	namespace:Concurrency_winrt::details
_ValueTypeOrRefType	ppltasks_winrt.hpp	/^    struct _ValueTypeOrRefType<_Type, true>$/;"	s	namespace:Concurrency_winrt::details
_VectorView	cap_msmf.hpp	433;"	d
_VectorView	cap_msmf.hpp	523;"	d
_VerifyNotShutdown	cap_winrt/MediaSink.hpp	/^    void _VerifyNotShutdown()$/;"	f	class:Media::WrlSealed
_VerifyNotShutdown	cap_winrt/MediaStreamSink.hpp	/^    void _VerifyNotShutdown()$/;"	f	class:Media::WrlSealed
_VideoDeviceController	cap_msmf.hpp	416;"	d
_VideoDeviceController	cap_msmf.hpp	506;"	d
_VideoEncodingProperties	cap_msmf.hpp	419;"	d
_VideoEncodingProperties	cap_msmf.hpp	509;"	d
_VoidIsTaskHelper	ppltasks_winrt.hpp	/^        typedef decltype(_VoidIsTaskHelper(stdx::declval<_FunctorTypeTraits<_Function>::_Argument1Type>(), 0)) _Takes_task;$/;"	t	struct:Concurrency_winrt::details::_FunctionTypeTraits
_WIN32_WINNT	cap_dshow.cpp	161;"	d	file:
_WIN32_WINNT	precomp.hpp	66;"	d
_WIN32_WINNT	precomp.hpp	68;"	d
_WhenAnyContinuationWrapper	ppltasks_winrt.hpp	/^    void _WhenAnyContinuationWrapper(_RunAnyParam<_CompletionType> * _PParam, const _Function & _Func, task<_TaskType>& _Task)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details
_WhenAnyImpl	ppltasks_winrt.hpp	/^    struct _WhenAnyImpl$/;"	s	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details
_ZeroArgumentFunctor	ppltasks_winrt.hpp	/^    struct _ZeroArgumentFunctor { };$/;"	s	namespace:Concurrency_winrt::details
_Zip	ppltasks_winrt.hpp	/^    class _Zip$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
__APPLE__	cap_openni.cpp	63;"	d	file:
__APPLE__	cap_openni2.cpp	63;"	d	file:
__BEGIN__	precomp.hpp	79;"	d
__END__	precomp.hpp	80;"	d
__OPENCV_FFMPEG_H__	cap_ffmpeg_api.hpp	2;"	d
__SYS_SELECT_H__	cap_dc1394_v2.cpp	52;"	d	file:
__VIDEOIO_H_	precomp.hpp	43;"	d
__a	cap_msmf.cpp	/^    unsigned long  __a;$/;"	m	struct:Guid	file:
__abi_ThrowIfFailed	cap_msmf.cpp	/^inline void __abi_ThrowIfFailed(long __hrArg)$/;"	f
__arm__	cap_openni.cpp	57;"	d	file:
__arm__	cap_openni2.cpp	57;"	d	file:
__b	cap_msmf.cpp	/^    unsigned short __b;$/;"	m	struct:Guid	file:
__c	cap_msmf.cpp	/^    unsigned short __c;$/;"	m	struct:Guid	file:
__d	cap_msmf.cpp	/^    unsigned char __d;$/;"	m	struct:Guid	file:
__e	cap_msmf.cpp	/^    unsigned char __e;$/;"	m	struct:Guid	file:
__extension__	cap_dshow.cpp	114;"	d	file:
__f	cap_msmf.cpp	/^    unsigned char __f;$/;"	m	struct:Guid	file:
__g	cap_msmf.cpp	/^    unsigned char __g;$/;"	m	struct:Guid	file:
__h	cap_msmf.cpp	/^    unsigned char __h;$/;"	m	struct:Guid	file:
__i	cap_msmf.cpp	/^    unsigned char __i;$/;"	m	struct:Guid	file:
__is_valid_winrt_type	cap_msmf.hpp	162;"	d
__is_win_class	agile_wrl.hpp	43;"	d
__is_win_interface	agile_wrl.hpp	41;"	d
__is_winrt_agile	agile_wrl.hpp	39;"	d
__is_winrt_array	cap_msmf.hpp	5;"	d
__j	cap_msmf.cpp	/^    unsigned char __j;$/;"	m	struct:Guid	file:
__k	cap_msmf.cpp	/^    unsigned char __k;$/;"	m	struct:Guid	file:
__rcGUID_t	cap_msmf.cpp	/^inline Guid::operator ::__rcGUID_t()$/;"	f	class:Guid::operator
__remove_hat	agile_wrl.hpp	/^        struct __remove_hat$/;"	s	namespace:Details
__remove_hat	agile_wrl.hpp	/^        struct __remove_hat<T*>$/;"	s	namespace:Details
_agileState	agile_wrl.hpp	/^        AgileState _agileState;$/;"	m	class:Agile::AgileState
_audioStreamSink	cap_winrt/MediaSink.hpp	/^    MW::ComPtr<MediaStreamSink> _audioStreamSink;$/;"	m	class:Media::WrlSealed
_bInitialized	cap_winrt/MFIncludes.hpp	/^    bool _bInitialized;$/;"	m	class:AutoMF
_capture	cap_winrt/CaptureFrameGrabber.cpp	/^, _capture(capture)$/;"	f
_capture	cap_winrt/CaptureFrameGrabber.hpp	/^    Platform::Agile<WMC::MediaCapture> _capture;$/;"	m	class:Media::sealed
_capture_V4L	cap_libv4l.cpp	/^static int _capture_V4L (CvCaptureCAM_V4L *capture, char *deviceName)$/;"	f	file:
_capture_V4L	cap_v4l.cpp	/^static int _capture_V4L (CvCaptureCAM_V4L *capture, char *deviceName)$/;"	f	file:
_capture_V4L2	cap_libv4l.cpp	/^static int _capture_V4L2 (CvCaptureCAM_V4L *capture, char *deviceName)$/;"	f	file:
_capture_V4L2	cap_v4l.cpp	/^static int _capture_V4L2 (CvCaptureCAM_V4L *capture, char *deviceName)$/;"	f	file:
_clock	cap_winrt/MediaSink.hpp	/^    MW::ComPtr<IMFPresentationClock> _clock;$/;"	m	class:Media::WrlSealed
_contextCallback	agile_wrl.hpp	/^        ::Microsoft::WRL::ComPtr<IUnknown> _contextCallback;$/;"	m	class:Agile
_contextToken	agile_wrl.hpp	/^        ULONG_PTR _contextToken;$/;"	m	class:Agile
_curMT	cap_winrt/MediaStreamSink.hpp	/^    MW::ComPtr<IMFMediaType> _curMT;$/;"	m	class:Media::WrlSealed
_eventQueue	cap_winrt/MediaStreamSink.hpp	/^    MW::ComPtr<IMFMediaEventQueue> _eventQueue;$/;"	m	class:Media::WrlSealed
_func	ppltasks_winrt.hpp	/^        auto _LogWorkItemAndInvokeUserLambda(_Func && _func, _RetArg && _retArg) const -> decltype(_func(std::forward<_RetArg>(_retArg)))$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
_get_internal_task_options	ppltasks_winrt.hpp	/^    inline _Internal_task_options & _get_internal_task_options(task_options &options)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details
_get_internal_task_options	ppltasks_winrt.hpp	/^    inline const _Internal_task_options & _get_internal_task_options(const task_options &options)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details
_height	cap_winrt/MediaStreamSink.hpp	/^    unsigned int _height;$/;"	m	class:Media::WrlSealed
_icvInitFFMPEG_mutex	cap_ffmpeg.cpp	/^static cv::Mutex _icvInitFFMPEG_mutex;$/;"	v	file:
_id	cap_winrt/MediaStreamSink.hpp	/^    DWORD _id;$/;"	m	class:Media::WrlSealed
_init	cap_ffmpeg_impl.hpp	/^static InternalFFMpegRegister _init;$/;"	v
_initialized	cap_ffmpeg_impl.hpp	/^static bool _initialized = false;$/;"	v
_interlockedExchangeAdd	cap_ffmpeg_impl.hpp	/^static int _interlockedExchangeAdd(int* addr, int delta)$/;"	f
_isCausalitySupported	ppltasks_winrt.hpp	/^    __declspec(selectany) volatile long _isCausalitySupported = 0;$/;"	m	namespace:Concurrency_winrt::details::_ContextCallback::details
_llStartTime	cap_msmf.hpp	/^        LONGLONG _llStartTime;$/;"	m	class:MediaSink::StartFunc
_lock	cap_winrt/CaptureFrameGrabber.hpp	/^    MWW::SRWLock _lock;$/;"	m	class:Media::sealed
_lock	cap_winrt/MediaSink.hpp	/^    MWW::SRWLock _lock;$/;"	m	class:Media::WrlSealed
_lock	cap_winrt/MediaStreamSink.hpp	/^    MWW::SRWLock _lock;$/;"	m	class:Media::WrlSealed
_majorType	cap_winrt/MediaStreamSink.hpp	/^    GUID _majorType;$/;"	m	class:Media::WrlSealed
_mediaExtension	cap_winrt/CaptureFrameGrabber.hpp	/^    ::Windows::Media::IMediaExtension^ _mediaExtension;$/;"	m	class:Media::sealed
_mediaSink	cap_winrt/CaptureFrameGrabber.hpp	/^    MW::ComPtr<MediaSink> _mediaSink;$/;"	m	class:Media::sealed
_mf	cap_winrt/CaptureFrameGrabber.hpp	/^    AutoMF _mf;$/;"	m	class:Media::sealed
_mutex	cap_ffmpeg_impl.hpp	/^static ImplMutex _mutex;$/;"	v
_object	agile_wrl.hpp	/^        TypeT _object;$/;"	m	class:Agile
_opencv_ffmpeg_free	cap_ffmpeg_impl.hpp	/^inline void _opencv_ffmpeg_free(void** ptr)$/;"	f
_p	agile_wrl.hpp	/^            __abi_IUnknown* _p;$/;"	m	class:Details::AgileHelper
_release	agile_wrl.hpp	/^            bool _release;$/;"	m	class:Details::AgileHelper
_sampleHandler	cap_winrt/MediaStreamSink.hpp	/^    MediaSampleHandler^ _sampleHandler;$/;"	m	class:Media::WrlSealed
_set_creation_callstack	ppltasks_winrt.hpp	/^        void _set_creation_callstack(const _TaskCreationCallstack &_callstack)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::_Internal_task_options
_shutdown	cap_winrt/MediaSink.hpp	/^        : _shutdown(false)$/;"	f	class:Media::WrlSealed
_shutdown	cap_winrt/MediaSink.hpp	/^    bool _shutdown;$/;"	m	class:Media::WrlSealed
_shutdown	cap_winrt/MediaStreamSink.hpp	/^    bool _shutdown;$/;"	m	class:Media::WrlSealed
_sink	cap_winrt/MediaStreamSink.hpp	/^    MW::ComPtr<IMFMediaSink> _sink;$/;"	m	class:Media::WrlSealed
_spAttributes	cap_msmf.hpp	/^    _ComPtr<IMFAttributes> _spAttributes;$/;"	m	class:CBaseAttributes
_state	cap_winrt/CaptureFrameGrabber.hpp	/^    } _state;$/;"	m	class:Media::sealed	typeref:class:Media::sealed::State
_streamType	cap_winrt/CaptureFrameGrabber.hpp	/^    CaptureStreamType _streamType;$/;"	m	class:Media::sealed
_subType	cap_winrt/MediaStreamSink.hpp	/^    GUID _subType;$/;"	m	class:Media::WrlSealed
_videoSampleRequestQueue	cap_winrt/CaptureFrameGrabber.hpp	/^    std::queue<concurrency::task_completion_event<MW::ComPtr<IMF2DBuffer2>>> _videoSampleRequestQueue;$/;"	m	class:Media::sealed
_videoStreamSink	cap_winrt/MediaSink.hpp	/^    MW::ComPtr<MediaStreamSink> _videoStreamSink;$/;"	m	class:Media::WrlSealed
_width	cap_winrt/MediaStreamSink.hpp	/^    unsigned int _width;$/;"	m	class:Media::WrlSealed
_x64	cap_pvapi.cpp	54;"	d	file:
_x86	cap_pvapi.cpp	56;"	d	file:
aan_fdct8x8	cap_mjpeg_encoder.cpp	/^static void aan_fdct8x8( const short *src, short *dst,$/;"	f	namespace:cv::mjpeg
abilitiesList	cap_gphoto2.cpp	/^    CameraAbilitiesList * abilitiesList = NULL;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
abs	precomp.hpp	76;"	d
abstract	ppltasks_winrt.hpp	/^    class _AsyncBaseProgressLayer abstract : public _AsyncProgressBase<_Attributes, _Attributes::_TakesProgress, _ResultType>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncInfoBase abstract : public Microsoft::WRL::RuntimeClass<$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncProgressBase abstract : public _AsyncInfoBase<_Attributes, _ResultType>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncProgressBase<_Attributes, true, _ResultType> abstract : public _AsyncInfoBase<_Attributes, _ResultType>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncTaskReturn abstract : public _AsyncTaskThunkBase<_Attributes, _Return>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncTaskReturn<_Attributes, _ReturnType, void> abstract : public _AsyncTaskThunkBase<_Attributes, void>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncTaskReturn<_Attributes, void, task<void>> abstract : public _AsyncTaskThunkBase<_Attributes, task<void>>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
abstract	ppltasks_winrt.hpp	/^    class _AsyncTaskThunkBase abstract : public _AsyncBaseProgressLayer<_Attributes>$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details
accessToDevices	cap_msmf.cpp	/^    bool accessToDevices;$/;"	m	class:__anon1::videoInput	file:
action	cap_msmf.cpp	/^    HRESULT startGrabbing(MAKE_WRL_REF(_AsyncAction)* action);$/;"	m	class:__anon1::ImageGrabberWinRT	file:
action	cap_msmf.cpp	/^    HRESULT stopGrabbing(MAKE_WRL_REF(_AsyncAction)* action);$/;"	m	class:__anon1::ImageGrabberWinRT	file:
adaptBufferStereoLocal	cap_dc1394_v2.cpp	/^static dc1394error_t adaptBufferStereoLocal(dc1394video_frame_t *in, dc1394video_frame_t *out)$/;"	f	file:
addVideoStream	cap_ffmpeg_impl.hpp	/^AVStream* OutputMediaStream_FFMPEG::addVideoStream(AVFormatContext *oc, CV_CODEC_ID codec_id, int w, int h, int bitrate, double fps, PixelFormat pixel_format)$/;"	f	class:OutputMediaStream_FFMPEG
agileMemberType	agile_wrl.hpp	/^            typename typedef __remove_hat<T>::type* agileMemberType;$/;"	t	struct:Details::AgileTypeHelper
allDevices	cap_gphoto2.cpp	/^    CameraList * allDevices = NULL;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
allocateBuffers	cap_winrt_bridge.cpp	/^void VideoioBridge::allocateBuffers(int width, int height)$/;"	f	class:VideoioBridge
allocateOutputBuffers	cap_winrt_bridge.cpp	/^void VideoioBridge::allocateOutputBuffers()$/;"	f	class:VideoioBridge
allowRunning	cap_OPEL.cpp	/^	bool allowRunning;$/;"	m	struct:property	file:
approxSyncGrabber	cap_openni.cpp	/^        ApproximateSyncGrabber& approxSyncGrabber;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizerBase	file:
approxSyncGrabber	cap_openni.cpp	/^    cv::Ptr<ApproximateSyncGrabber> approxSyncGrabber;$/;"	m	class:CvCapture_OpenNI	file:
atomic_size_t	ppltasks_winrt.hpp	/^    typedef Concurrency::details::atomic_size_t atomic_size_t;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
atomic_size_t	ppltasks_winrt.hpp	/^    typedef volatile size_t atomic_size_t;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
attemptFramerate	cap_winrt_video.hpp	/^    int						attemptFramerate;$/;"	m	class:Video
autoReconnect	cap_dshow.cpp	/^        bool autoReconnect;$/;"	m	class:videoDevice	file:
autosetup_capture_mode_v4l	cap_v4l.cpp	/^static int autosetup_capture_mode_v4l(CvCaptureCAM_V4L* capture)$/;"	f	file:
autosetup_capture_mode_v4l2	cap_v4l.cpp	/^static int autosetup_capture_mode_v4l2(CvCaptureCAM_V4L* capture)$/;"	f	file:
avcodec	cap_ffmpeg_impl.hpp	/^    AVCodec         * avcodec;$/;"	m	struct:CvCapture_FFMPEG
avifile	cap_vfw.cpp	/^    PAVIFILE            avifile;$/;"	m	class:CvCaptureAVI_VFW	file:
avifile	cap_vfw.cpp	/^    PAVIFILE      avifile;$/;"	m	class:CvVideoWriter_VFW	file:
aviinfo	cap_vfw.cpp	/^    AVISTREAMINFO       aviinfo;$/;"	m	class:CvCaptureAVI_VFW	file:
avistream	cap_vfw.cpp	/^    PAVISTREAM          avistream;$/;"	m	class:CvCaptureAVI_VFW	file:
bCallback	cap_dshow.cpp	/^        bool bCallback;$/;"	m	class:videoInput	file:
bChooseDevice	cap_winrt_video.hpp	/^    bool					bChooseDevice;$/;"	m	class:Video
bFlipImageX	cap_winrt_video.hpp	/^    bool                    bFlipImageX;$/;"	m	class:Video
bGrabberInitInProgress	cap_winrt_video.hpp	/^    std::atomic<bool>       bGrabberInitInProgress;$/;"	m	class:Video
bGrabberInited	cap_winrt_video.hpp	/^    std::atomic<bool>       bGrabberInited;$/;"	m	class:Video
bIsFrameNew	cap_winrt_bridge.hpp	/^    std::atomic<bool>           bIsFrameNew;$/;"	m	class:VideoioBridge
bIsFrameNew	cap_winrt_video.hpp	/^    std::atomic<bool>       bIsFrameNew;$/;"	m	class:Video
bVerbose	cap_winrt_video.hpp	/^    bool 					bVerbose;$/;"	m	class:Video
backInputMat	cap_winrt_bridge.hpp	/^    cv::Mat backInputMat;$/;"	m	class:VideoioBridge
backInputPtr	cap_winrt_bridge.hpp	/^    unsigned char *             backInputPtr;       \/\/ Video grabber writes this$/;"	m	class:VideoioBridge
backOutputBuffer	cap_winrt_bridge.hpp	/^    Windows::UI::Xaml::Media::Imaging::WriteableBitmap^ backOutputBuffer;   \/\/ XAML reads this$/;"	m	class:VideoioBridge
baseline	cap_openni.cpp	/^    XnDouble baseline;$/;"	m	class:CvCapture_OpenNI	file:
baseline	cap_openni2.cpp	/^    double baseline;$/;"	m	class:CvCapture_OpenNI2	file:
basicThread	cap_dshow.cpp	/^void __cdecl videoInput::basicThread(void * objPtr){$/;"	f	class:videoInput
bayer	cap_dc1394_v2.cpp	/^    dc1394bayer_method_t bayer;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
bayer2rgb24	cap_v4l.cpp	/^static void bayer2rgb24(long int WIDTH, long int HEIGHT, unsigned char *src, unsigned char *dst)$/;"	f	file:
bayerFilter	cap_dc1394_v2.cpp	/^    dc1394color_filter_t bayerFilter;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
bgr_frame	cap_xine.cpp	/^    IplImage	* bgr_frame;$/;"	m	struct:CvCaptureAVI_XINE	file:
biBitCount	cap_mjpeg_decoder.cpp	/^    WORD  biBitCount;            \/\/ Number of bits per pixel$/;"	m	struct:cv::BitmapInfoHeader	file:
biClrImportant	cap_mjpeg_decoder.cpp	/^    DWORD biClrImportant;        \/\/ Specifies that the first x colors of the color table. Are important to the DIB.$/;"	m	struct:cv::BitmapInfoHeader	file:
biClrUsed	cap_mjpeg_decoder.cpp	/^    DWORD biClrUsed;             \/\/ 256 (color table size; for 8-bit only)$/;"	m	struct:cv::BitmapInfoHeader	file:
biCompression	cap_mjpeg_decoder.cpp	/^    DWORD biCompression;         \/\/ Type of compression used (uncompressed: NO_COMPRESSION=0)$/;"	m	struct:cv::BitmapInfoHeader	file:
biHeight	cap_mjpeg_decoder.cpp	/^    LONG  biHeight;              \/\/ heigth in pixels$/;"	m	struct:cv::BitmapInfoHeader	file:
biPlanes	cap_mjpeg_decoder.cpp	/^    WORD  biPlanes;              \/\/ Number of color planes in which the data is stored$/;"	m	struct:cv::BitmapInfoHeader	file:
biSize	cap_mjpeg_decoder.cpp	/^    DWORD biSize;                \/\/ Write header size of BITMAPINFO header structure$/;"	m	struct:cv::BitmapInfoHeader	file:
biSizeImage	cap_mjpeg_decoder.cpp	/^    DWORD biSizeImage;           \/\/ Image Buffer. Quicktime needs 3 bytes also for 8-bit png$/;"	m	struct:cv::BitmapInfoHeader	file:
biWidth	cap_mjpeg_decoder.cpp	/^    LONG  biWidth;               \/\/ width in pixels$/;"	m	struct:cv::BitmapInfoHeader	file:
biXPelsPerMeter	cap_mjpeg_decoder.cpp	/^    LONG  biXPelsPerMeter;       \/\/ Horizontal resolution in pixels per meter$/;"	m	struct:cv::BitmapInfoHeader	file:
biYPelsPerMeter	cap_mjpeg_decoder.cpp	/^    LONG  biYPelsPerMeter;       \/\/ Vertical resolution in pixels per meter$/;"	m	struct:cv::BitmapInfoHeader	file:
bitRate	cap_msmf.cpp	/^    UINT32 bitRate;$/;"	m	class:CvVideoWriter_MSMF	file:
bit_mask	cap_mjpeg_encoder.cpp	/^static const unsigned bit_mask[] =$/;"	m	namespace:cv::mjpeg	file:
bmiColors	cap_vfw.cpp	/^    RGBQUAD          bmiColors[256];$/;"	m	struct:BITMAPINFO_8Bit	file:
bmiHeader	cap_vfw.cpp	/^    BITMAPINFOHEADER bmiHeader;$/;"	m	struct:BITMAPINFO_8Bit	file:
bmih	cap_vfw.cpp	/^    BITMAPINFOHEADER  * bmih;$/;"	m	class:CvCaptureAVI_VFW	file:
bottom	cap_mjpeg_decoder.cpp	/^        short int bottom;$/;"	m	struct:cv::AviStreamHeader::__anon3	file:
bounds	cap_qt.cpp	/^        Rect               bounds;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
buffer	cap_gstreamer.cpp	/^    GstBuffer*    buffer;$/;"	m	class:CvCapture_GStreamer	file:
buffer	cap_gstreamer.cpp	/^    GstBuffer* buffer;$/;"	m	class:CvVideoWriter_GStreamer	file:
buffer	cap_libv4l.cpp	/^struct buffer$/;"	s	file:
buffer	cap_unicap.cpp	/^  unicap_data_buffer_t buffer;$/;"	m	struct:CvCapture_Unicap	file:
buffer	cap_v4l.cpp	/^struct buffer$/;"	s	file:
bufferIndex	cap_libv4l.cpp	/^    int bufferIndex;$/;"	m	struct:CvCaptureCAM_V4L	file:
bufferIndex	cap_v4l.cpp	/^    int bufferIndex;$/;"	m	struct:CvCaptureCAM_V4L	file:
bufferSetup	cap_dshow.cpp	/^    bool bufferSetup;$/;"	m	class:SampleGrabberCallback	file:
buffer_index	cap_OPEL.cpp	/^					unsigned buffer_index;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
buffer_is_writeable	cap_dc1394.cpp	/^    int buffer_is_writeable;  \/\/ indicates whether frame.imageData is allocated by OpenCV or DC1394$/;"	m	struct:CvCaptureCAM_DC1394	file:
buffer_num	cap_OPEL.cpp	/^	int buffer_num;$/;"	m	struct:property	file:
buffer_size	cap_OPEL.cpp	/^					unsigned buffer_size;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
buffer_size	cap_OPEL.cpp	/^	int buffer_size;$/;"	m	struct:property	file:
buffers	cap_libv4l.cpp	/^   buffer buffers[MAX_V4L_BUFFERS + 1];$/;"	m	struct:CvCaptureCAM_V4L	file:
buffers	cap_v4l.cpp	/^   buffer buffers[MAX_V4L_BUFFERS + 1];$/;"	m	struct:CvCaptureCAM_V4L	file:
buildLibraryofTypes	cap_msmf.cpp	/^void videoDevice::buildLibraryofTypes()$/;"	f	class:__anon1::videoDevice
buildListOfDevices	cap_msmf.cpp	/^bool Media_Foundation::buildListOfDevices()$/;"	f	class:__anon1::Media_Foundation
bytesPerPixel	cap_winrt_capture.hpp	/^        int                     bytesPerPixel;$/;"	m	class:cv::VideoCapture_WinRT
bytesPerPixel	cap_winrt_video.hpp	/^    int                     bytesPerPixel;$/;"	m	class:Video
c_audioStreamSinkId	cap_winrt/MediaSink.hpp	/^const unsigned int c_audioStreamSinkId = 0;$/;"	m	namespace:Media
c_videoStreamSinkId	cap_winrt/MediaSink.hpp	/^const unsigned int c_videoStreamSinkId = 1;$/;"	m	namespace:Media
callbackSetCount	cap_dshow.cpp	/^        int  callbackSetCount;$/;"	m	class:videoInput	file:
cam	cap_dc1394.cpp	/^struct camnode {dc1394_cameracapture cam;int portnum;} cameras[MAX_CAMERAS];$/;"	m	struct:camnode	file:
camCount	cap_dc1394.cpp	/^static int camCount[MAX_PORTS];$/;"	v	file:
camFds	cap_dc1394_v2.cpp	/^    fd_set camFds;$/;"	m	struct:CvDC1394	file:
camera	cap_cmu.cpp	/^C1394Camera* CvCaptureCAM_CMU::camera()$/;"	f	class:CvCaptureCAM_CMU
camera	cap_dc1394.cpp	/^    dc1394_cameracapture* camera;$/;"	m	struct:CvCaptureCAM_DC1394	file:
camera	cap_gphoto2.cpp	/^    Camera * camera = NULL;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
cameraAbilities	cap_gphoto2.cpp	/^    CameraAbilities cameraAbilities;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
cameraId	cap_dc1394_v2.cpp	/^    int cameraId;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
camera_node	cap_dc1394.cpp	/^    nodeid_t  camera_node;$/;"	m	struct:CvCaptureCAM_DC1394	file:
camera_nodes	cap_dc1394.cpp	/^static nodeid_t *camera_nodes;$/;"	v	file:
cameras	cap_dc1394.cpp	/^struct camnode {dc1394_cameracapture cam;int portnum;} cameras[MAX_CAMERAS];$/;"	v	typeref:struct:camnode
camnode	cap_dc1394.cpp	/^struct camnode {dc1394_cameracapture cam;int portnum;} cameras[MAX_CAMERAS];$/;"	s	file:
cancel_current_task	ppltasks_winrt.hpp	/^inline __declspec(noreturn) void __cdecl cancel_current_task()$/;"	f	namespace:Concurrency_winrt
cap	cap_libv4l.cpp	/^   struct v4l2_capability cap;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_capability	file:
cap	cap_v4l.cpp	/^   struct v4l2_capability cap;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_capability	file:
capSendMessage	cap_vfw.cpp	48;"	d	file:
capWnd	cap_vfw.cpp	/^    HWND   capWnd;$/;"	m	class:CvCaptureCAM_VFW	file:
capability	cap_libv4l.cpp	/^    struct video_capability capability;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_capability	file:
capability	cap_v4l.cpp	/^    struct video_capability capability;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_capability	file:
capablePorts	cap_gphoto2.cpp	/^    GPPortInfoList * capablePorts = NULL;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
caps	cap_gstreamer.cpp	/^    GstCaps*      caps;$/;"	m	class:CvCapture_GStreamer	file:
caps	cap_vfw.cpp	/^    CAPDRIVERCAPS caps;$/;"	m	class:CvCaptureCAM_VFW	file:
captureDC1394	cap_dc1394.cpp	/^    CvCaptureCAM_DC1394* captureDC1394;$/;"	m	class:CvCaptureCAM_DC1394_CPP	file:
captureFormatIndex	cap_msmf.cpp	/^    int captureFormatIndex;$/;"	m	class:CvCaptureFile_MSMF	file:
captureFormats	cap_msmf.cpp	/^    std::vector<MediaType> captureFormats;$/;"	m	class:CvCaptureFile_MSMF	file:
captureQT	cap_qt.cpp	/^    CvCapture_QT_Cam* captureQT;$/;"	m	class:CvCapture_QT_Cam_CPP	file:
captureQT	cap_qt.cpp	/^    CvCapture_QT_Movie* captureQT;$/;"	m	class:CvCapture_QT_Movie_CPP	file:
captureV4L	cap_libv4l.cpp	/^    CvCaptureCAM_V4L* captureV4L;$/;"	m	class:CvCaptureCAM_V4L_CPP	file:
captureV4L	cap_v4l.cpp	/^    CvCaptureCAM_V4L* captureV4L;$/;"	m	class:CvCaptureCAM_V4L_CPP	file:
captureWindow	cap_libv4l.cpp	/^    struct video_window     captureWindow;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_window	file:
captureWindow	cap_v4l.cpp	/^    struct video_window     captureWindow;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_window	file:
captureXINE	cap_xine.cpp	/^    CvCaptureAVI_XINE* captureXINE;$/;"	m	class:CvCaptureAVI_XINE_CPP	file:
capturedFrames	cap_gphoto2.cpp	/^    unsigned long int capturedFrames;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
cb_b	cap_mjpeg_encoder.cpp	/^static const int cb_b = fix(0.5, fixc);$/;"	m	namespace:cv::mjpeg	file:
cb_g	cap_mjpeg_encoder.cpp	/^static const int cb_g = -fix(0.3313, fixc);$/;"	m	namespace:cv::mjpeg	file:
cb_r	cap_mjpeg_encoder.cpp	/^static const int cb_r = -fix(0.1687, fixc);$/;"	m	namespace:cv::mjpeg	file:
channel	cap_qt.cpp	/^        SGChannel          channel;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
channel	cap_qt.cpp	/^        short              channel;$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
channels	cap_mjpeg_encoder.cpp	/^    int width, height, channels;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
channels_for_mode	cap_OPEL.cpp	/^static inline int channels_for_mode(int mode)$/;"	f	file:
channels_for_mode	cap_libv4l.cpp	/^static inline int channels_for_mode(int mode)$/;"	f	file:
checkDevice	cap_msmf.cpp	/^long videoDevice::checkDevice(IMFAttributes *pAttributes, IMFActivate **pDevice)$/;"	f	class:__anon1::videoDevice
checkDevice	cap_msmf.cpp	/^long videoDevice::checkDevice(_DeviceClass devClass, DEFINE_TASK<void>* pTask, MAKE_WRL_REF(_IDeviceInformation)* ppDevice)$/;"	f	class:__anon1::videoDevice
ckid	cap_mjpeg_decoder.cpp	/^    DWORD ckid;$/;"	m	struct:cv::AviIndex	file:
clearDevices	cap_msmf.cpp	/^void videoDevices::clearDevices()$/;"	f	class:__anon1::videoDevices
close	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::close()$/;"	f	class:CvCaptureCAM_OPEL_CPP
close	cap_cmu.cpp	/^void CvCaptureCAM_CMU::close()$/;"	f	class:CvCaptureCAM_CMU
close	cap_dc1394.cpp	/^void CvCaptureCAM_DC1394_CPP::close()$/;"	f	class:CvCaptureCAM_DC1394_CPP
close	cap_dc1394_v2.cpp	/^void CvCaptureCAM_DC1394_v2_CPP::close()$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
close	cap_dshow.cpp	/^void VideoCapture_DShow::close()$/;"	f	class:cv::VideoCapture_DShow
close	cap_ffmpeg.cpp	/^    virtual void close()$/;"	f	class:CvCapture_FFMPEG_proxy
close	cap_ffmpeg.cpp	/^    virtual void close()$/;"	f	class:CvVideoWriter_FFMPEG_proxy
close	cap_ffmpeg_impl.hpp	/^void CvCapture_FFMPEG::close()$/;"	f	class:CvCapture_FFMPEG
close	cap_ffmpeg_impl.hpp	/^void CvVideoWriter_FFMPEG::close()$/;"	f	class:CvVideoWriter_FFMPEG
close	cap_ffmpeg_impl.hpp	/^void InputMediaStream_FFMPEG::close()$/;"	f	class:InputMediaStream_FFMPEG
close	cap_ffmpeg_impl.hpp	/^void OutputMediaStream_FFMPEG::close()$/;"	f	class:OutputMediaStream_FFMPEG
close	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::close()$/;"	f	class:CvCaptureCAM_Giganetix
close	cap_gphoto2.cpp	/^void DigitalCameraCapture::close()$/;"	f	class:cv::gphoto2::DigitalCameraCapture
close	cap_gstreamer.cpp	/^void CvCapture_GStreamer::close()$/;"	f	class:CvCapture_GStreamer
close	cap_gstreamer.cpp	/^void CvVideoWriter_GStreamer::close()$/;"	f	class:CvVideoWriter_GStreamer
close	cap_images.cpp	/^void CvCapture_Images::close()$/;"	f	class:CvCapture_Images
close	cap_images.cpp	/^void CvVideoWriter_Images::close()$/;"	f	class:CvVideoWriter_Images
close	cap_libv4l.cpp	/^void CvCaptureCAM_V4L_CPP::close()$/;"	f	class:CvCaptureCAM_V4L_CPP
close	cap_mjpeg_decoder.cpp	/^void MjpegInputStream::close()$/;"	f	class:cv::MjpegInputStream
close	cap_mjpeg_decoder.cpp	/^void MotionJpegCapture::close()$/;"	f	class:cv::MotionJpegCapture
close	cap_mjpeg_encoder.cpp	/^    void close()$/;"	f	class:cv::mjpeg::BitStream
close	cap_mjpeg_encoder.cpp	/^    void close()$/;"	f	class:cv::mjpeg::MotionJpegWriter
close	cap_msmf.cpp	/^void CvCaptureCAM_MSMF::close()$/;"	f	class:CvCaptureCAM_MSMF
close	cap_msmf.cpp	/^void CvCaptureFile_MSMF::close()$/;"	f	class:CvCaptureFile_MSMF
close	cap_msmf.cpp	/^void CvVideoWriter_MSMF::close()$/;"	f	class:CvVideoWriter_MSMF
close	cap_pvapi.cpp	/^void CvCaptureCAM_PvAPI::close()$/;"	f	class:CvCaptureCAM_PvAPI
close	cap_qt.cpp	/^void CvCapture_QT_Cam_CPP::close()$/;"	f	class:CvCapture_QT_Cam_CPP
close	cap_qt.cpp	/^void CvCapture_QT_Movie_CPP::close()$/;"	f	class:CvCapture_QT_Movie_CPP
close	cap_qt.cpp	/^void CvVideoWriter_QT_CPP::close()$/;"	f	class:CvVideoWriter_QT_CPP
close	cap_unicap.cpp	/^void CvCapture_Unicap::close() {$/;"	f	class:CvCapture_Unicap
close	cap_v4l.cpp	/^void CvCaptureCAM_V4L_CPP::close()$/;"	f	class:CvCaptureCAM_V4L_CPP
close	cap_vfw.cpp	/^void CvCaptureAVI_VFW::close()$/;"	f	class:CvCaptureAVI_VFW
close	cap_vfw.cpp	/^void CvCaptureCAM_VFW::close()$/;"	f	class:CvCaptureCAM_VFW
close	cap_vfw.cpp	/^void CvVideoWriter_VFW::close()$/;"	f	class:CvVideoWriter_VFW
close	cap_ximea.cpp	/^void CvCaptureCAM_XIMEA::close()$/;"	f	class:CvCaptureCAM_XIMEA
close	cap_xine.cpp	/^void CvCaptureAVI_XINE_CPP::close()$/;"	f	class:CvCaptureAVI_XINE_CPP
closeAllDevices	cap_msmf.cpp	/^void videoInput::closeAllDevices()$/;"	f	class:__anon1::videoInput
closeDevice	cap_msmf.cpp	/^void videoDevice::closeDevice()$/;"	f	class:__anon1::videoDevice
closeDevice	cap_msmf.cpp	/^void videoInput::closeDevice(int deviceID)$/;"	f	class:__anon1::videoInput
closeGrabber	cap_winrt_video.cpp	/^void Video::closeGrabber() {$/;"	f	class:Video
closeHIC	cap_vfw.cpp	/^void CvCaptureCAM_VFW::closeHIC()$/;"	f	class:CvCaptureCAM_VFW
cn	cap_ffmpeg_impl.hpp	/^    int cn;$/;"	m	struct:Image_FFMPEG
code_table_t	cap_v4l.cpp	/^} code_table_t;$/;"	t	typeref:struct:__anon6	file:
codec_bmp_tags	ffmpeg_codecs.hpp	/^const AVCodecTag codec_bmp_tags[] = {$/;"	v
collectMsgs	cap_gphoto2.cpp	/^    bool collectMsgs; \/\/ CV_CAP_PROP_GPHOTO2_COLLECT_MSGS$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
collectWidgets	cap_gphoto2.cpp	/^int DigitalCameraCapture::collectWidgets(std::ostream & os,$/;"	f	class:cv::gphoto2::DigitalCameraCapture
color	cap_gstreamer.cpp	/^    GstElement*   color;$/;"	m	class:CvCapture_GStreamer	file:
color	cap_openni2.cpp	/^    openni::VideoStream depth, color, **streams;$/;"	m	class:CvCapture_OpenNI2	file:
colorFrame	cap_openni2.cpp	/^    openni::VideoFrameRef depthFrame, colorFrame;$/;"	m	class:CvCapture_OpenNI2	file:
colorImage	cap_openni2.cpp	/^    cv::Mat depthImage, colorImage;$/;"	m	class:CvCapture_OpenNI2	file:
colorStereo	cap_dc1394_v2.cpp	/^    bool colorStereo;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
color_mode	cap_dc1394.cpp	/^    int color_mode;$/;"	m	struct:CvCaptureCAM_DC1394	file:
comInit	cap_dshow.cpp	/^bool videoInput::comInit(){$/;"	f	class:videoInput
comUnInit	cap_dshow.cpp	/^bool videoInput::comUnInit(){$/;"	f	class:videoInput
compr	cap_libv4l.cpp	/^   struct v4l2_jpegcompression compr;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_jpegcompression	file:
compressed	cap_vfw.cpp	/^    PAVISTREAM    compressed;$/;"	m	class:CvVideoWriter_VFW	file:
compression_session_ref	cap_qt.cpp	/^    ICMCompressionSessionRef compression_session_ref;$/;"	m	struct:CvVideoWriter_QT	file:
computeDisparity_32F	cap_openni.cpp	/^static void computeDisparity_32F( const xn::DepthMetaData& depthMetaData, cv::Mat& disp, XnDouble baseline, XnUInt64 F,$/;"	f	file:
computeDisparity_32F	cap_openni2.cpp	/^static void computeDisparity_32F( const openni::VideoFrameRef& depthMetaData, cv::Mat& disp, double baseline, int F, int noSampleValue, int shadowValue)$/;"	f	file:
connection	cap_OPEL.cpp	/^					DBusConnection* connection;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
connection	cap_dshow.cpp	/^        int  connection;$/;"	m	class:videoDevice	file:
connection	cap_dshow.cpp	/^        int  connection;$/;"	m	class:videoInput	file:
context	cap_gphoto2.cpp	/^    GPContext * context = NULL;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
context	cap_openni.cpp	/^    xn::Context &context;$/;"	m	class:ApproximateSyncGrabber	file:
context	cap_openni.cpp	/^    xn::Context context;$/;"	m	class:CvCapture_OpenNI	file:
control	cap_libv4l.cpp	/^   struct v4l2_control control;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_control	file:
control	cap_v4l.cpp	/^   struct v4l2_control control;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_control	file:
convert	cap_dc1394.cpp	/^    int convert;$/;"	m	struct:CvCaptureCAM_DC1394	file:
convert_rgb	cap_unicap.cpp	/^  bool convert_rgb;$/;"	m	struct:CvCapture_Unicap	file:
count	cap_msmf.cpp	/^    UINT32 count;$/;"	m	class:__anon1::videoDevices	file:
cr_b	cap_mjpeg_encoder.cpp	/^static const int cr_b = -fix(0.0813, fixc);$/;"	m	namespace:cv::mjpeg	file:
cr_g	cap_mjpeg_encoder.cpp	/^static const int cr_g = -fix(0.4187, fixc);$/;"	m	namespace:cv::mjpeg	file:
cr_r	cap_mjpeg_encoder.cpp	/^static const int cr_r = fix(0.5, fixc);$/;"	m	namespace:cv::mjpeg	file:
create	cap_msmf.hpp	/^    static HRESULT create(ABI::Windows::Foundation::IPropertyValueStatics* spPropVal, void* _ObjInCtx, IInspectable** ppInsp) {$/;"	f	struct:winrt_type
create	cap_msmf.hpp	/^    static IUnknown* create(_Type* _ObjInCtx) {$/;"	f	struct:winrt_type
create	cap_msmf.hpp	/^    static IUnknown* create(_Type* _ObjInCtx, size_t N) {$/;"	f	struct:winrt_array_type
createEncodeHuffmanTable	cap_mjpeg_encoder.cpp	/^    static bool createEncodeHuffmanTable( const int* src, unsigned* table, int max_size )$/;"	f	class:cv::mjpeg::BitStream
createGPhoto2Capture	cap_gphoto2.cpp	/^Ptr<IVideoCapture> createGPhoto2Capture(const String & deviceName)$/;"	f	namespace:cv::gphoto2
createGPhoto2Capture	cap_gphoto2.cpp	/^Ptr<IVideoCapture> createGPhoto2Capture(int index)$/;"	f	namespace:cv::gphoto2
createMotionJpegCapture	cap_mjpeg_decoder.cpp	/^Ptr<IVideoCapture> createMotionJpegCapture(const String& filename)$/;"	f	namespace:cv
createMotionJpegWriter	cap_mjpeg_encoder.cpp	/^Ptr<IVideoWriter> createMotionJpegWriter( const String& filename, double fps, Size frameSize, bool iscolor )$/;"	f	namespace:cv
createSourceHuffmanTable	cap_mjpeg_encoder.cpp	/^    static int* createSourceHuffmanTable(const uchar* src, int* dst,$/;"	f	class:cv::mjpeg::BitStream
createStreams	cap_vfw.cpp	/^bool CvVideoWriter_VFW::createStreams( CvSize frameSize, bool isColor )$/;"	f	class:CvVideoWriter_VFW
create_InputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^InputMediaStream_FFMPEG* create_InputMediaStream_FFMPEG(const char* fileName, int* codec, int* chroma_format, int* width, int* height)$/;"	f
create_OutputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^struct OutputMediaStream_FFMPEG* create_OutputMediaStream_FFMPEG(const char* fileName, int width, int height, double fps)$/;"	f
create_async	ppltasks_winrt.hpp	/^details::_AsyncTaskGeneratorThunk<_Function>* create_async(const _Function& _Func)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
create_task	ppltasks_winrt.hpp	/^task<_ReturnType> create_task(const task<_ReturnType>& _Task)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
critSection	cap_dshow.cpp	/^    CRITICAL_SECTION critSection;$/;"	m	class:SampleGrabberCallback	file:
critical_section	ppltasks_winrt.hpp	/^    typedef Concurrency::critical_section critical_section;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
critical_section	ppltasks_winrt.hpp	/^    typedef Concurrency::extensibility::critical_section_t critical_section;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
crop	cap_libv4l.cpp	/^   struct v4l2_crop crop;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_crop	file:
crop	cap_v4l.cpp	/^   struct v4l2_crop crop;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_crop	file:
cropcap	cap_libv4l.cpp	/^   struct v4l2_cropcap cropcap;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_cropcap	file:
cropcap	cap_v4l.cpp	/^   struct v4l2_cropcap cropcap;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_cropcap	file:
cs	cap_ffmpeg_impl.hpp	/^    CRITICAL_SECTION cs;$/;"	m	struct:ImplMutex::Impl
ctrl_id	cap_libv4l.cpp	/^  __u32 ctrl_id;$/;"	m	struct:v4l2_ctrl_range	file:
ctxErrorFunc	cap_gphoto2.cpp	/^void ctxErrorFunc(GPContext *, const char * str, void * thatGPhotoCap)$/;"	f	namespace:cv::gphoto2
ctxMessageFunc	cap_gphoto2.cpp	/^void ctxMessageFunc(GPContext *, const char * str, void * thatGPhotoCap)$/;"	f	namespace:cv::gphoto2
ctxStatusFunc	cap_gphoto2.cpp	/^void ctxStatusFunc(GPContext *, const char * str, void * thatGPhotoCap)$/;"	f	namespace:cv::gphoto2
ctx_	cap_ffmpeg_impl.hpp	/^    AVFormatContext* ctx_;$/;"	m	struct:InputMediaStream_FFMPEG
currentFrame	cap_winrt_bridge.hpp	/^    unsigned long               currentFrame;$/;"	m	class:VideoioBridge
currentStream	cap_openni2.cpp	/^    int currentStream;$/;"	m	class:CvCapture_OpenNI2	file:
current_value	cap_libv4l.cpp	/^  __s32 current_value;$/;"	m	struct:v4l2_ctrl_range	file:
currentframe	cap_images.cpp	/^    unsigned currentframe;$/;"	m	class:CvCapture_Images	file:
currentframe	cap_images.cpp	/^    unsigned currentframe;$/;"	m	class:CvVideoWriter_Images	file:
cv	cap.cpp	/^namespace cv$/;"	n	file:
cv	cap_dshow.cpp	/^namespace cv$/;"	n	file:
cv	cap_dshow.hpp	/^namespace cv$/;"	n
cv	cap_gphoto2.cpp	/^namespace cv$/;"	n	file:
cv	cap_intelperc.cpp	/^namespace cv$/;"	n	file:
cv	cap_intelperc.hpp	/^namespace cv$/;"	n
cv	cap_mjpeg_decoder.cpp	/^namespace cv$/;"	n	file:
cv	cap_mjpeg_encoder.cpp	/^namespace cv$/;"	n	file:
cv	cap_winrt_capture.cpp	/^namespace cv {$/;"	n	file:
cv	cap_winrt_capture.hpp	/^namespace cv {$/;"	n
cv	precomp.hpp	/^namespace cv$/;"	n
cvCreateCameraCapture	cap.cpp	/^CV_IMPL CvCapture * cvCreateCameraCapture (int index)$/;"	f
cvCreateCameraCapture_CMU	cap_cmu.cpp	/^CvCapture * cvCreateCameraCapture_CMU (int index)$/;"	f
cvCreateCameraCapture_DC1394	cap_dc1394.cpp	/^CvCapture* cvCreateCameraCapture_DC1394( int index )$/;"	f
cvCreateCameraCapture_DC1394_2	cap_dc1394_v2.cpp	/^CvCapture* cvCreateCameraCapture_DC1394_2(int index)$/;"	f
cvCreateCameraCapture_Giganetix	cap_giganetix.cpp	/^cvCreateCameraCapture_Giganetix( int index )$/;"	f
cvCreateCameraCapture_MSMF	cap_msmf.cpp	/^CvCapture* cvCreateCameraCapture_MSMF( int index )$/;"	f
cvCreateCameraCapture_OpenNI	cap_openni.cpp	/^CvCapture* cvCreateCameraCapture_OpenNI( int index )$/;"	f
cvCreateCameraCapture_OpenNI	cap_openni2.cpp	/^CvCapture* cvCreateCameraCapture_OpenNI( int index )$/;"	f
cvCreateCameraCapture_PvAPI	cap_pvapi.cpp	/^CvCapture* cvCreateCameraCapture_PvAPI( int index )$/;"	f
cvCreateCameraCapture_QT	cap_qt.cpp	/^CvCapture* cvCreateCameraCapture_QT( int index )$/;"	f
cvCreateCameraCapture_Unicap	cap_unicap.cpp	/^CvCapture * cvCreateCameraCapture_Unicap(const int index)$/;"	f
cvCreateCameraCapture_V4L	cap_OPEL.cpp	/^CvCapture* cvCreateCameraCapture_V4L(int index)$/;"	f
cvCreateCameraCapture_V4L	cap_libv4l.cpp	/^CvCapture* cvCreateCameraCapture_V4L( int index )$/;"	f
cvCreateCameraCapture_V4L	cap_v4l.cpp	/^CvCapture* cvCreateCameraCapture_V4L( int index )$/;"	f
cvCreateCameraCapture_VFW	cap_vfw.cpp	/^CvCapture* cvCreateCameraCapture_VFW( int index )$/;"	f
cvCreateCameraCapture_XIMEA	cap_ximea.cpp	/^CvCapture* cvCreateCameraCapture_XIMEA( int index )$/;"	f
cvCreateCapture_GStreamer	cap_gstreamer.cpp	/^CvCapture* cvCreateCapture_GStreamer(int type, const char* filename )$/;"	f
cvCreateFileCapture	cap.cpp	/^CV_IMPL CvCapture * cvCreateFileCapture (const char * filename)$/;"	f
cvCreateFileCapture_FFMPEG	cap_ffmpeg_impl.hpp	/^CvCapture_FFMPEG* cvCreateFileCapture_FFMPEG( const char* filename )$/;"	f
cvCreateFileCapture_FFMPEG_proxy	cap_ffmpeg.cpp	/^CvCapture* cvCreateFileCapture_FFMPEG_proxy(const char * filename)$/;"	f
cvCreateFileCapture_Images	cap_images.cpp	/^CvCapture* cvCreateFileCapture_Images(const char * filename)$/;"	f
cvCreateFileCapture_MSMF	cap_msmf.cpp	/^CvCapture* cvCreateFileCapture_MSMF (const char* filename)$/;"	f
cvCreateFileCapture_OpenNI	cap_openni.cpp	/^CvCapture* cvCreateFileCapture_OpenNI( const char* filename )$/;"	f
cvCreateFileCapture_OpenNI	cap_openni2.cpp	/^CvCapture* cvCreateFileCapture_OpenNI( const char* filename )$/;"	f
cvCreateFileCapture_QT	cap_qt.cpp	/^CvCapture* cvCreateFileCapture_QT( const char* filename )$/;"	f
cvCreateFileCapture_VFW	cap_vfw.cpp	/^CvCapture* cvCreateFileCapture_VFW (const char* filename)$/;"	f
cvCreateFileCapture_XINE	cap_xine.cpp	/^CvCapture* cvCreateFileCapture_XINE(const char* filename)$/;"	f
cvCreateVideoWriter	cap.cpp	/^CV_IMPL CvVideoWriter* cvCreateVideoWriter( const char* filename, int fourcc,$/;"	f
cvCreateVideoWriter_FFMPEG	cap_ffmpeg_impl.hpp	/^CvVideoWriter_FFMPEG* cvCreateVideoWriter_FFMPEG( const char* filename, int fourcc, double fps,$/;"	f
cvCreateVideoWriter_FFMPEG_proxy	cap_ffmpeg.cpp	/^CvVideoWriter* cvCreateVideoWriter_FFMPEG_proxy( const char* filename, int fourcc,$/;"	f
cvCreateVideoWriter_GStreamer	cap_gstreamer.cpp	/^CvVideoWriter* cvCreateVideoWriter_GStreamer(const char* filename, int fourcc, double fps,$/;"	f
cvCreateVideoWriter_Images	cap_images.cpp	/^CvVideoWriter* cvCreateVideoWriter_Images( const char* filename )$/;"	f
cvCreateVideoWriter_MSMF	cap_msmf.cpp	/^CvVideoWriter* cvCreateVideoWriter_MSMF( const char* filename, int fourcc,$/;"	f
cvCreateVideoWriter_QT	cap_qt.cpp	/^CvVideoWriter* cvCreateVideoWriter_QT( const char* filename, int fourcc,$/;"	f
cvCreateVideoWriter_VFW	cap_vfw.cpp	/^CvVideoWriter* cvCreateVideoWriter_VFW( const char* filename, int fourcc,$/;"	f
cvGetCaptureDomain	cap.cpp	/^CV_IMPL int cvGetCaptureDomain( CvCapture* capture)$/;"	f
cvGetCaptureProperty	cap.cpp	/^CV_IMPL double cvGetCaptureProperty( CvCapture* capture, int id )$/;"	f
cvGetCaptureProperty_FFMPEG	cap_ffmpeg_impl.hpp	/^double cvGetCaptureProperty_FFMPEG(CvCapture_FFMPEG* capture, int prop_id)$/;"	f
cvGrabFrame	cap.cpp	/^CV_IMPL int cvGrabFrame( CvCapture* capture )$/;"	f
cvGrabFrame_FFMPEG	cap_ffmpeg_impl.hpp	/^int cvGrabFrame_FFMPEG(CvCapture_FFMPEG* capture)$/;"	f
cvImage	cap_winrt_bridge.hpp	/^    Windows::UI::Xaml::Controls::Image ^cvImage;$/;"	m	class:VideoioBridge
cvQueryFrame	cap.cpp	/^CV_IMPL IplImage* cvQueryFrame( CvCapture* capture )$/;"	f
cvReleaseCapture	cap.cpp	/^CV_IMPL void cvReleaseCapture( CvCapture** pcapture )$/;"	f
cvReleaseCapture_FFMPEG	cap_ffmpeg_impl.hpp	/^void cvReleaseCapture_FFMPEG(CvCapture_FFMPEG** capture)$/;"	f
cvReleaseVideoWriter	cap.cpp	/^CV_IMPL void cvReleaseVideoWriter( CvVideoWriter** pwriter )$/;"	f
cvReleaseVideoWriter_FFMPEG	cap_ffmpeg_impl.hpp	/^void cvReleaseVideoWriter_FFMPEG( CvVideoWriter_FFMPEG** writer )$/;"	f
cvRetrieveFrame	cap.cpp	/^CV_IMPL IplImage* cvRetrieveFrame( CvCapture* capture, int idx )$/;"	f
cvRetrieveFrame_FFMPEG	cap_ffmpeg_impl.hpp	/^int cvRetrieveFrame_FFMPEG(CvCapture_FFMPEG* capture, unsigned char** data, int* step, int* width, int* height, int* cn)$/;"	f
cvSetCaptureProperty	cap.cpp	/^CV_IMPL int cvSetCaptureProperty( CvCapture* capture, int id, double value )$/;"	f
cvSetCaptureProperty_FFMPEG	cap_ffmpeg_impl.hpp	/^int cvSetCaptureProperty_FFMPEG(CvCapture_FFMPEG* capture, int prop_id, double value)$/;"	f
cvWriteFrame	cap.cpp	/^CV_IMPL int cvWriteFrame( CvVideoWriter* writer, const IplImage* image )$/;"	f
cvWriteFrame_FFMPEG	cap_ffmpeg_impl.hpp	/^int cvWriteFrame_FFMPEG( CvVideoWriter_FFMPEG* writer,$/;"	f
cv_ff_codec_tag_list_match	cap_ffmpeg_impl.hpp	/^static inline bool cv_ff_codec_tag_list_match(const AVCodecTag *const *tags, enum AVCodecID id, unsigned int tag)$/;"	f
cv_ff_codec_tag_match	cap_ffmpeg_impl.hpp	/^static inline bool cv_ff_codec_tag_match(const AVCodecTag *tags, enum AVCodecID id, unsigned int tag)$/;"	f
data	cap_ffmpeg_impl.hpp	/^    unsigned char* data;$/;"	m	struct:Image_FFMPEG
data_handler	cap_qt.cpp	/^    DataHandler data_handler;$/;"	m	struct:CvVideoWriter_QT	file:
dc	cap_dc1394_v2.cpp	/^    dc1394_t* dc;$/;"	m	struct:CvDC1394	file:
dc1394	cap_dc1394_v2.cpp	/^static CvDC1394 dc1394;$/;"	v	file:
dc1394_deinterlace_stereo_frames_fixed	cap_dc1394_v2.cpp	/^static dc1394error_t dc1394_deinterlace_stereo_frames_fixed(dc1394video_frame_t *in,$/;"	f	file:
dc1394properties	cap_dc1394_v2.cpp	/^    static int dc1394properties[CV_CAP_PROP_MAX_DC1394];$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
dc1394properties	cap_dc1394_v2.cpp	/^int CvCaptureCAM_DC1394_v2_CPP::dc1394properties[CV_CAP_PROP_MAX_DC1394] = {$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
dcCam	cap_dc1394_v2.cpp	/^    dc1394camera_t* dcCam;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
decltype	ppltasks_winrt.hpp	/^        static auto _Perform(std::function<HRESULT(_InpType, _OutType*)> _Func) -> decltype(_Func)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_Continuation_func_transformer
decltype	ppltasks_winrt.hpp	/^        static auto _Perform(std::function<HRESULT(_RetType*)> _Func) -> decltype(_Func)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_Init_func_transformer
defaultColorOutputMode	cap_openni2.cpp	/^openni::VideoMode CvCapture_OpenNI2::defaultColorOutputMode()$/;"	f	class:CvCapture_OpenNI2
defaultDepthOutputMode	cap_openni2.cpp	/^openni::VideoMode CvCapture_OpenNI2::defaultDepthOutputMode()$/;"	f	class:CvCapture_OpenNI2
defaultMapOutputMode	cap_openni.cpp	/^XnMapOutputMode CvCapture_OpenNI::defaultMapOutputMode()$/;"	f	class:CvCapture_OpenNI
default_value	cap_libv4l.cpp	/^  __s32 default_value;$/;"	m	struct:v4l2_ctrl_range	file:
depth	cap_openni.cpp	/^        xn::DepthMetaData depth;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizerBase	file:
depth	cap_openni2.cpp	/^    openni::VideoStream depth, color, **streams;$/;"	m	class:CvCapture_OpenNI2	file:
depthFocalLength_VGA	cap_openni.cpp	/^    XnUInt64 depthFocalLength_VGA;$/;"	m	class:CvCapture_OpenNI	file:
depthFocalLength_VGA	cap_openni2.cpp	/^    int depthFocalLength_VGA;$/;"	m	class:CvCapture_OpenNI2	file:
depthFrame	cap_openni2.cpp	/^    openni::VideoFrameRef depthFrame, colorFrame;$/;"	m	class:CvCapture_OpenNI2	file:
depthGenerator	cap_openni.cpp	/^    xn::DepthGenerator &depthGenerator;$/;"	m	class:ApproximateSyncGrabber	file:
depthGenerator	cap_openni.cpp	/^    xn::DepthGenerator depthGenerator;$/;"	m	class:CvCapture_OpenNI	file:
depthImage	cap_openni2.cpp	/^    cv::Mat depthImage, colorImage;$/;"	m	class:CvCapture_OpenNI2	file:
depthMetaData	cap_openni.cpp	/^    xn::DepthMetaData  depthMetaData;$/;"	m	class:CvCapture_OpenNI	file:
depthQueue	cap_openni.cpp	/^        std::queue<cv::Ptr<xn::DepthMetaData> > depthQueue;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizer	file:
depthQueue	cap_openni.cpp	/^        tbb::concurrent_bounded_queue<cv::Ptr<xn::DepthMetaData> > depthQueue;$/;"	m	class:ApproximateSyncGrabber::TBBApproximateSynchronizer	file:
desired_device	cap_unicap.cpp	/^  int desired_device;$/;"	m	struct:CvCapture_Unicap	file:
desired_format	cap_unicap.cpp	/^  int desired_format;$/;"	m	struct:CvCapture_Unicap	file:
desired_size	cap_unicap.cpp	/^  CvSize desired_size;$/;"	m	struct:CvCapture_Unicap	file:
destroy	cap_ffmpeg_impl.hpp	/^    void destroy() { DeleteCriticalSection(&cs); }$/;"	f	struct:ImplMutex::Impl
destroy	cap_ffmpeg_impl.hpp	/^    void destroy() { pthread_mutex_destroy(&sl); }$/;"	f	struct:ImplMutex::Impl
destroy	cap_ffmpeg_impl.hpp	/^    void destroy() { pthread_spin_destroy(&sl); }$/;"	f	struct:ImplMutex::Impl
destroy	cap_ffmpeg_impl.hpp	/^    void destroy() { }$/;"	f	struct:ImplMutex::Impl
destroy	cap_ffmpeg_impl.hpp	/^void ImplMutex::destroy()$/;"	f	class:ImplMutex
destroyGraph	cap_dshow.cpp	/^void videoDevice::destroyGraph(){$/;"	f	class:videoDevice
details	ppltasks_winrt.hpp	/^namespace details$/;"	n	class:Concurrency_winrt::details::_ContextCallback
details	ppltasks_winrt.hpp	/^namespace details$/;"	n	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
details	ppltasks_winrt.hpp	/^namespace details$/;"	n	namespace:Concurrency_winrt
details	ppltasks_winrt.hpp	/^namespace details$/;"	n	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
details	ppltasks_winrt.hpp	/^namespace details$/;"	n	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
dev_name	cap_OPEL.cpp	/^const char* dev_name = "\/dev\/video0";$/;"	v
device	cap_openni2.cpp	/^    openni::Device device;$/;"	m	class:CvCapture_OpenNI2	file:
device	cap_unicap.cpp	/^  unicap_device_t device;$/;"	m	struct:CvCapture_Unicap	file:
deviceExist	cap_gphoto2.cpp	/^bool DigitalCameraCapture::deviceExist(int index) const$/;"	f	class:cv::gphoto2::DigitalCameraCapture
deviceHandle	cap_libv4l.cpp	/^    int deviceHandle;$/;"	m	struct:CvCaptureCAM_V4L	file:
deviceHandle	cap_v4l.cpp	/^    int deviceHandle;$/;"	m	struct:CvCaptureCAM_V4L	file:
deviceIndex	cap_winrt_bridge.hpp	/^    int deviceIndex, width, height;$/;"	m	class:VideoioBridge
deviceName	cap_libv4l.cpp	/^    char* deviceName;$/;"	m	struct:CvCaptureCAM_V4L	file:
deviceNames	cap_dshow.cpp	/^        static char deviceNames[VI_MAX_CAMERAS][255];$/;"	m	class:videoInput	file:
deviceNames	cap_dshow.cpp	/^char videoInput::deviceNames[VI_MAX_CAMERAS][255]={{0}};$/;"	m	class:videoInput	file:
deviceReady	cap_winrt_bridge.hpp	/^    std::atomic<bool>   deviceReady;$/;"	m	class:VideoioBridge
device_initialized	cap_unicap.cpp	/^  bool device_initialized;$/;"	m	struct:CvCapture_Unicap	file:
device_name	cap_dc1394.cpp	/^    const char * device_name;$/;"	m	struct:CvCaptureCAM_DC1394	file:
devicesFound	cap_dshow.cpp	/^        int  devicesFound;$/;"	m	class:videoInput	file:
dict	cap_ffmpeg_impl.hpp	/^    AVDictionary *dict;$/;"	m	struct:CvCapture_FFMPEG
did_enter_movies	cap_qt.cpp	/^static int did_enter_movies = 0;$/;"	v	file:
do_it	cap_msmf.cpp	/^static SuppressVideoInputMessages do_it;$/;"	v	file:
do_while	ppltasks_winrt.hpp	/^    task<bool> do_while(std::function<task<bool>(void)> func)$/;"	f	namespace:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl::details
dts_to_frame_number	cap_ffmpeg_impl.hpp	/^int64_t CvCapture_FFMPEG::dts_to_frame_number(int64_t dts)$/;"	f	class:CvCapture_FFMPEG
dts_to_sec	cap_ffmpeg_impl.hpp	/^double CvCapture_FFMPEG::dts_to_sec(int64_t dts)$/;"	f	class:CvCapture_FFMPEG
duration	cap_gstreamer.cpp	/^    gint64        duration;$/;"	m	class:CvCapture_GStreamer	file:
duration_per_sample	cap_qt.cpp	/^    TimeValue duration_per_sample;$/;"	m	struct:CvVideoWriter_QT	file:
dwChunkLength	cap_mjpeg_decoder.cpp	/^    DWORD dwChunkLength;$/;"	m	struct:cv::AviIndex	file:
dwChunkOffset	cap_mjpeg_decoder.cpp	/^    DWORD dwChunkOffset;$/;"	m	struct:cv::AviIndex	file:
dwFlags	cap_mjpeg_decoder.cpp	/^    DWORD dwFlags;               \/\/  0x10 AVIF_HASINDEX: The AVI file has an idx1 chunk containing an index at the end of the file.$/;"	m	struct:cv::AviMainHeader	file:
dwFlags	cap_mjpeg_decoder.cpp	/^    DWORD dwFlags;               \/\/ 0$/;"	m	struct:cv::AviStreamHeader	file:
dwFlags	cap_mjpeg_decoder.cpp	/^    DWORD dwFlags;$/;"	m	struct:cv::AviIndex	file:
dwFormatIndex	cap_msmf.cpp	/^    long setDeviceFormat(MAKE_WRL_REF(_MediaCapture) pSource, unsigned long dwFormatIndex, MAKE_WRL_REF(_AsyncAction)* pAction);$/;"	m	class:__anon1::videoDevice	file:
dwFormatIndex	cap_msmf.cpp	/^long videoDevice::setDeviceFormat(MAKE_WRL_REF(_MediaCapture) pSource, unsigned long  dwFormatIndex, MAKE_WRL_REF(_AsyncAction)* pAction)$/;"	m	namespace:__anon1	file:
dwHeight	cap_mjpeg_decoder.cpp	/^    DWORD dwHeight;              \/\/ Fields specify the height of the AVIfile in pixels.$/;"	m	struct:cv::AviMainHeader	file:
dwInitialFrames	cap_mjpeg_decoder.cpp	/^    DWORD dwInitialFrames;       \/\/ 0$/;"	m	struct:cv::AviStreamHeader	file:
dwInitialFrames	cap_mjpeg_decoder.cpp	/^    DWORD dwInitialFrames;       \/\/ Is used for interleaved files$/;"	m	struct:cv::AviMainHeader	file:
dwLength	cap_mjpeg_decoder.cpp	/^    DWORD dwLength;              \/\/ Frames number (playing time of AVI file as defined by scale and rate)$/;"	m	struct:cv::AviStreamHeader	file:
dwMaxBytesPerSec	cap_mjpeg_decoder.cpp	/^    DWORD dwMaxBytesPerSec;      \/\/  Maximum data rate of the file$/;"	m	struct:cv::AviMainHeader	file:
dwMicroSecPerFrame	cap_mjpeg_decoder.cpp	/^    DWORD dwMicroSecPerFrame;    \/\/  The period between video frames$/;"	m	struct:cv::AviMainHeader	file:
dwPriority	cap_mjpeg_decoder.cpp	/^    DWORD dwPriority;            \/\/ 0$/;"	m	struct:cv::AviStreamHeader	file:
dwQuality	cap_mjpeg_decoder.cpp	/^    DWORD dwQuality;             \/\/ -1 (encoding quality. If set to -1, drivers use the default quality value)$/;"	m	struct:cv::AviStreamHeader	file:
dwRate	cap_mjpeg_decoder.cpp	/^    DWORD dwRate;                \/\/ Fps (dwRate - frame rate for video streams)$/;"	m	struct:cv::AviStreamHeader	file:
dwReserved	cap_mjpeg_decoder.cpp	/^    DWORD dwReserved[4];         \/\/ 0, 0, 0, 0$/;"	m	struct:cv::AviMainHeader	file:
dwReserved1	cap_mjpeg_decoder.cpp	/^    DWORD dwReserved1;           \/\/ 0$/;"	m	struct:cv::AviMainHeader	file:
dwSampleSize	cap_mjpeg_decoder.cpp	/^    DWORD dwSampleSize;          \/\/ 0 means that each frame is in its own chunk$/;"	m	struct:cv::AviStreamHeader	file:
dwScale	cap_mjpeg_decoder.cpp	/^    DWORD dwScale;               \/\/ 1$/;"	m	struct:cv::AviStreamHeader	file:
dwStart	cap_mjpeg_decoder.cpp	/^    DWORD dwStart;               \/\/ 0$/;"	m	struct:cv::AviStreamHeader	file:
dwStreams	cap_mjpeg_decoder.cpp	/^    DWORD dwStreams;             \/\/ Specifies the number of streams in the file.$/;"	m	struct:cv::AviMainHeader	file:
dwSuggestedBufferSize	cap_mjpeg_decoder.cpp	/^    DWORD dwSuggestedBufferSize; \/\/ Field specifies the suggested buffer size forreading the file$/;"	m	struct:cv::AviMainHeader	file:
dwSuggestedBufferSize	cap_mjpeg_decoder.cpp	/^    DWORD dwSuggestedBufferSize; \/\/ For reading the stream$/;"	m	struct:cv::AviStreamHeader	file:
dwTotalFrames	cap_mjpeg_decoder.cpp	/^    DWORD dwTotalFrames;         \/\/ Field of the main header specifies the total number of frames of data in file.$/;"	m	struct:cv::AviMainHeader	file:
dwWidth	cap_mjpeg_decoder.cpp	/^    DWORD dwWidth;               \/\/ Fields specify the width of the AVIfile in pixels.$/;"	m	struct:cv::AviMainHeader	file:
emergensyStopEventCallback	cap_msmf.cpp	/^typedef void(*emergensyStopEventCallback)(int, void *);$/;"	t	namespace:__anon1	file:
encodebin	cap_gstreamer.cpp	/^    GstElement* encodebin;$/;"	m	class:CvVideoWriter_GStreamer	file:
encodingFormat	cap_msmf.cpp	/^    GUID   encodingFormat;$/;"	m	class:CvVideoWriter_MSMF	file:
endWriteChunk	cap_mjpeg_encoder.cpp	/^    void endWriteChunk()$/;"	f	class:cv::mjpeg::MotionJpegWriter
enumProfiles	cap_intelperc.cpp	/^void IntelPerCStreamBase::enumProfiles()$/;"	f	class:cv::IntelPerCStreamBase
enumerateCaptureFormats	cap_msmf.cpp	/^HRESULT CvCaptureFile_MSMF::enumerateCaptureFormats(IMFMediaSource *pSource)$/;"	f	class:CvCaptureFile_MSMF
enumerateCaptureFormats	cap_msmf.cpp	/^HRESULT videoDevice::enumerateCaptureFormats(IMFMediaSource *pSource)$/;"	f	class:__anon1::videoDevice
eps_zero	cap_ffmpeg_impl.hpp	/^    double eps_zero;$/;"	m	struct:CvCapture_FFMPEG
errMsg	cap_ximea.cpp	/^void CvCaptureCAM_XIMEA::errMsg(const char* msg, int errNum)$/;"	f	class:CvCaptureCAM_XIMEA
error	cap_OPEL.cpp	/^					DBusError error;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
execute	cap_openni.cpp	/^        tbb::task* execute()$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizerTask	file:
fastCopy	cap_msmf.cpp	/^void RawImage::fastCopy(const BYTE * pSampleBuffer)$/;"	f	class:__anon1::RawImage
fccHandler	cap_mjpeg_decoder.cpp	/^    uint32_t fccHandler;           \/\/ "cvid", "DIB "$/;"	m	struct:cv::AviStreamHeader	file:
fccType	cap_mjpeg_decoder.cpp	/^    uint32_t fccType;              \/\/ 'vids', 'auds', 'txts'...$/;"	m	struct:cv::AviStreamHeader	file:
fd	cap_OPEL.cpp	/^					int fd;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
feature_set	cap_dc1394_v2.cpp	/^    dc1394featureset_t feature_set;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
ffmpegCapture	cap_ffmpeg.cpp	/^    void* ffmpegCapture;$/;"	m	class:CvCapture_FFMPEG_proxy	file:
ffmpegWriter	cap_ffmpeg.cpp	/^    void* ffmpegWriter;$/;"	m	class:CvVideoWriter_FFMPEG_proxy	file:
file	cap_gstreamer.cpp	/^    GstElement* file;$/;"	m	class:CvVideoWriter_GStreamer	file:
filename	cap_ffmpeg_impl.hpp	/^    char              * filename;$/;"	m	struct:CvCapture_FFMPEG
filename	cap_images.cpp	/^    char*  filename; \/\/ actually a printf-pattern$/;"	m	class:CvCapture_Images	file:
filename	cap_images.cpp	/^    char* filename;$/;"	m	class:CvVideoWriter_Images	file:
filenameToMimetype	cap_gstreamer.cpp	/^const char* CvVideoWriter_GStreamer::filenameToMimetype(const char *filename)$/;"	f	class:CvVideoWriter_GStreamer
film_range	cap_vfw.cpp	/^    CvSlice             film_range;$/;"	m	class:CvCaptureAVI_VFW	file:
findClosestSizeAndSubtype	cap_dshow.cpp	/^static void findClosestSizeAndSubtype(videoDevice * VD, int widthIn, int heightIn, int &widthOut, int &heightOut, GUID & mediatypeOut){$/;"	f	file:
findDevice	cap_gphoto2.cpp	/^int DigitalCameraCapture::findDevice(const char * deviceName) const$/;"	f	class:cv::gphoto2::DigitalCameraCapture
findType	cap_msmf.cpp	/^int videoDevice::findType(unsigned int size, unsigned int frameRate)$/;"	f	class:__anon1::videoDevice
findWidgetByName	cap_gphoto2.cpp	/^CameraWidget * DigitalCameraCapture::findWidgetByName($/;"	f	class:cv::gphoto2::DigitalCameraCapture
finish	cap_openni.cpp	/^    void finish()$/;"	f	class:ApproximateSyncGrabber
finishWriteAVI	cap_mjpeg_encoder.cpp	/^    void finishWriteAVI()$/;"	f	class:cv::mjpeg::MotionJpegWriter
firstCapturedFrameTime	cap_gphoto2.cpp	/^    time_t firstCapturedFrameTime;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
first_frame_number	cap_ffmpeg_impl.hpp	/^    int64_t frame_number, first_frame_number;$/;"	m	struct:CvCapture_FFMPEG
firstframe	cap_images.cpp	/^    unsigned firstframe; \/\/ number of first frame$/;"	m	class:CvCapture_Images	file:
fix	cap_mjpeg_encoder.cpp	646;"	d	file:
fixb	cap_mjpeg_encoder.cpp	/^    fixb = 14,$/;"	e	enum:cv::mjpeg::__anon15	file:
fixc	cap_mjpeg_encoder.cpp	/^    fixc = 12,$/;"	e	enum:cv::mjpeg::__anon15	file:
fmt	cap_ffmpeg_impl.hpp	/^    AVOutputFormat  * fmt;$/;"	m	struct:CvVideoWriter_FFMPEG
fmt_	cap_ffmpeg_impl.hpp	/^    AVOutputFormat* fmt_;$/;"	m	struct:OutputMediaStream_FFMPEG
form	cap_libv4l.cpp	/^   struct v4l2_format form;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_format	file:
form	cap_v4l.cpp	/^   struct v4l2_format form;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_format	file:
format	cap_cmu.cpp	/^    int  format; \/\/ 0-2, 7 ?$/;"	m	class:CvCaptureCAM_CMU	file:
format	cap_dc1394.cpp	/^    int format;$/;"	m	struct:CvCaptureCAM_DC1394	file:
format	cap_unicap.cpp	/^  unicap_format_t format;$/;"	m	struct:CvCapture_Unicap	file:
formatType	cap_dshow.cpp	/^        long formatType;$/;"	m	class:videoDevice	file:
formatTypes	cap_dshow.cpp	/^        long formatTypes[VI_NUM_FORMATS];$/;"	m	class:videoInput	file:
format_spec	cap_unicap.cpp	/^  unicap_format_t format_spec;$/;"	m	struct:CvCapture_Unicap	file:
forward	ppltasks_winrt.hpp	/^        auto _LogWorkItemAndInvokeUserLambda(_Func && _func, _Arg && _value, _RetArg && _retArg) const -> decltype(_func(std::forward<_Arg>(_value), std::forward<_RetArg>(_retArg)))$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle::std
fourCC	cap_mjpeg_encoder.cpp	56;"	d	file:
fourcc	cap.cpp	/^int VideoWriter::fourcc(char c1, char c2, char c3, char c4)$/;"	f	class:cv::VideoWriter
fourcc	cap_msmf.cpp	/^    int index, width, height, fourcc;$/;"	m	class:CvCaptureCAM_MSMF	file:
fourcc	cap_vfw.cpp	/^    DWORD  fourcc;$/;"	m	class:CvCaptureCAM_VFW	file:
fourcc	cap_vfw.cpp	/^    int           fourcc;$/;"	m	class:CvVideoWriter_VFW	file:
fourccToString	cap_mjpeg_decoder.cpp	/^String fourccToString(uint32_t fourcc)$/;"	f	namespace:cv
fps	cap_cmu.cpp	/^    int  fps;    \/\/ 0-5$/;"	m	class:CvCaptureCAM_CMU	file:
fps	cap_dc1394_v2.cpp	/^    double fps;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
fps	cap_gstreamer.cpp	/^    double        fps;$/;"	m	class:CvCapture_GStreamer	file:
fps	cap_msmf.cpp	/^    double fps;$/;"	m	class:CvVideoWriter_MSMF	file:
fps	cap_vfw.cpp	/^    double              fps;$/;"	m	class:CvCaptureAVI_VFW	file:
fps	cap_vfw.cpp	/^    double        fps;$/;"	m	class:CvVideoWriter_VFW	file:
frame	cap_OPEL.cpp	/^					IplImage frame;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
frame	cap_dc1394.cpp	/^    IplImage frame;$/;"	m	struct:CvCaptureCAM_DC1394	file:
frame	cap_ffmpeg.cpp	/^    IplImage frame;$/;"	m	class:CvCapture_FFMPEG_proxy	file:
frame	cap_ffmpeg_impl.hpp	/^    Image_FFMPEG      frame;$/;"	m	struct:CvCapture_FFMPEG
frame	cap_gphoto2.cpp	/^    Mat frame;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
frame	cap_gstreamer.cpp	/^    IplImage*     frame;$/;"	m	class:CvCapture_GStreamer	file:
frame	cap_images.cpp	/^    IplImage* frame;$/;"	m	class:CvCapture_Images	file:
frame	cap_libv4l.cpp	/^    IplImage frame;$/;"	m	struct:CvCaptureCAM_V4L	file:
frame	cap_msmf.cpp	/^    IplImage* frame;$/;"	m	class:CvCaptureCAM_MSMF	file:
frame	cap_msmf.cpp	/^    IplImage* frame;$/;"	m	class:CvCaptureFile_MSMF	file:
frame	cap_pvapi.cpp	/^    IplImage *frame;$/;"	m	class:CvCaptureCAM_PvAPI	file:
frame	cap_unicap.cpp	/^  IplImage *frame;$/;"	m	struct:CvCapture_Unicap	file:
frame	cap_v4l.cpp	/^    IplImage frame;$/;"	m	struct:CvCaptureCAM_V4L	file:
frame	cap_vfw.cpp	/^    IplImage*           frame;$/;"	m	class:CvCaptureAVI_VFW	file:
frame	cap_vfw.cpp	/^    IplImage* frame;$/;"	m	class:CvCaptureCAM_VFW	file:
frame	cap_ximea.cpp	/^    IplImage* frame;$/;"	m	class:CvCaptureCAM_XIMEA	file:
frameC	cap_dc1394_v2.cpp	/^    dc1394video_frame_t* frameC;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
frameCallback	cap_vfw.cpp	/^LRESULT PASCAL CvCaptureCAM_VFW::frameCallback( HWND hWnd, VIDEOHDR* hdr )$/;"	f	class:CvCaptureCAM_VFW
frameCounter	cap_winrt_bridge.hpp	/^    std::atomic<unsigned long>  frameCounter;$/;"	m	class:VideoioBridge
frameCurrent	cap_winrt_capture.hpp	/^        unsigned long           frameCurrent;$/;"	m	class:cv::VideoCapture_WinRT
frameHeight	cap_dc1394_v2.cpp	/^    int frameWidth, frameHeight;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
frameNumIndexes	cap_mjpeg_encoder.cpp	/^    std::vector<size_t> frameOffset, frameSize, AVIChunkSizeIndex, frameNumIndexes;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
frameOffset	cap_mjpeg_encoder.cpp	/^    std::vector<size_t> frameOffset, frameSize, AVIChunkSizeIndex, frameNumIndexes;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
frameSize	cap_mjpeg_encoder.cpp	/^    std::vector<size_t> frameOffset, frameSize, AVIChunkSizeIndex, frameNumIndexes;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
frameSize	cap_msmf.cpp	/^    UINT32 frameSize;$/;"	m	class:CvVideoWriter_MSMF	file:
frameWidth	cap_dc1394_v2.cpp	/^    int frameWidth, frameHeight;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
frame_duration	cap_xine.cpp	/^    double	frame_duration;$/;"	m	struct:CvCaptureAVI_XINE	file:
frame_height	cap_ffmpeg_impl.hpp	/^    int               frame_width, frame_height;$/;"	m	struct:CvVideoWriter_FFMPEG
frame_idx	cap_ffmpeg_impl.hpp	/^    int               frame_idx;$/;"	m	struct:CvVideoWriter_FFMPEG
frame_iterator	cap_mjpeg_decoder.cpp	/^typedef frame_list::iterator frame_iterator;$/;"	t	namespace:cv	file:
frame_list	cap_mjpeg_decoder.cpp	/^typedef std::deque< std::pair<uint64_t, uint32_t> > frame_list;$/;"	t	namespace:cv	file:
frame_number	cap_ffmpeg_impl.hpp	/^    int64_t frame_number, first_frame_number;$/;"	m	struct:CvCapture_FFMPEG
frame_number	cap_xine.cpp	/^    int	frame_number;$/;"	m	struct:CvCaptureAVI_XINE	file:
frame_rate	cap_dc1394.cpp	/^    int frame_rate;$/;"	m	struct:CvCaptureCAM_DC1394	file:
frame_rate	cap_xine.cpp	/^    double	frame_rate;$/;"	m	struct:CvCaptureAVI_XINE	file:
frame_width	cap_ffmpeg_impl.hpp	/^    int               frame_width, frame_height;$/;"	m	struct:CvVideoWriter_FFMPEG
framerate	cap_gstreamer.cpp	/^    double framerate;$/;"	m	class:CvVideoWriter_GStreamer	file:
freezeCheck	cap_dshow.cpp	/^    int freezeCheck;$/;"	m	class:SampleGrabberCallback	file:
frontInputMat	cap_winrt_bridge.hpp	/^    cv::Mat frontInputMat;$/;"	m	class:VideoioBridge
frontInputPtr	cap_winrt_bridge.hpp	/^    unsigned char *             frontInputPtr;      \/\/ OpenCV reads this$/;"	m	class:VideoioBridge
frontOutputBuffer	cap_winrt_bridge.hpp	/^    Windows::UI::Xaml::Media::Imaging::WriteableBitmap^ frontOutputBuffer;  \/\/ OpenCV write this$/;"	m	class:VideoioBridge
g_VI	cap_dshow.cpp	/^videoInput VideoCapture_DShow::g_VI;$/;"	m	class:cv::VideoCapture_DShow	file:
g_VI	cap_dshow.hpp	/^    static videoInput g_VI;$/;"	m	class:cv::VideoCapture_DShow
get	cap.cpp	/^double VideoCapture::get(int propId) const$/;"	f	class:cv::VideoCapture
get	cap.cpp	/^double VideoWriter::get(int propId) const$/;"	f	class:cv::VideoWriter
get	ppltasks_winrt.hpp	/^    _ReturnType get() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
get	ppltasks_winrt.hpp	/^    void get() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
getBGRImageFromMetaData	cap_openni.cpp	/^inline void getBGRImageFromMetaData( const xn::ImageMetaData& imageMetaData, cv::Mat& bgrImage )$/;"	f
getBGRImageFromMetaData	cap_openni2.cpp	/^inline void getBGRImageFromMetaData( const openni::VideoFrameRef& imageMetaData, cv::Mat& bgrImage )$/;"	f
getBpp	cap_ximea.cpp	/^int  CvCaptureCAM_XIMEA::getBpp()$/;"	f	class:CvCaptureCAM_XIMEA
getCameraPropertyAsString	cap_dshow.cpp	/^void videoInput::getCameraPropertyAsString(int prop, char * propertyAsString){$/;"	f	class:videoInput
getCameraPropertyFromCV	cap_dshow.cpp	/^int videoInput::getCameraPropertyFromCV(int cv_property){$/;"	f	class:videoInput
getCaptureDomain	cap_dc1394.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_DC1394; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCaptureCAM_DC1394_CPP
getCaptureDomain	cap_dc1394_v2.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_DC1394; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
getCaptureDomain	cap_dshow.cpp	/^int VideoCapture_DShow::getCaptureDomain()$/;"	f	class:cv::VideoCapture_DShow
getCaptureDomain	cap_giganetix.cpp	/^    virtual int getCaptureDomain()$/;"	f	class:CvCaptureCAM_Giganetix
getCaptureDomain	cap_gphoto2.cpp	/^    virtual int getCaptureDomain()$/;"	f	class:cv::gphoto2::DigitalCameraCapture
getCaptureDomain	cap_intelperc.cpp	/^int VideoCapture_IntelPerC::getCaptureDomain()$/;"	f	class:cv::VideoCapture_IntelPerC
getCaptureDomain	cap_mjpeg_decoder.cpp	/^    virtual int getCaptureDomain() { return CAP_ANY; } \/\/ Return the type of the capture object: CAP_VFW, etc...$/;"	f	class:cv::MotionJpegCapture
getCaptureDomain	cap_msmf.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_MSMF; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCaptureCAM_MSMF
getCaptureDomain	cap_msmf.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_MSMF; }$/;"	f	class:CvCaptureFile_MSMF
getCaptureDomain	cap_pvapi.cpp	/^    virtual int getCaptureDomain()$/;"	f	class:CvCaptureCAM_PvAPI
getCaptureDomain	cap_qt.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_QT; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCapture_QT_Cam_CPP
getCaptureDomain	cap_qt.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_QT; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCapture_QT_Movie_CPP
getCaptureDomain	cap_unicap.cpp	/^  virtual int getCaptureDomain() { return CV_CAP_UNICAP; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	struct:CvCapture_Unicap
getCaptureDomain	cap_vfw.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_VFW; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCaptureAVI_VFW
getCaptureDomain	cap_vfw.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_VFW; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCaptureCAM_VFW
getCaptureDomain	cap_winrt_capture.hpp	/^        virtual int getCaptureDomain() { return CAP_WINRT; }$/;"	f	class:cv::VideoCapture_WinRT
getCaptureDomain	cap_ximea.cpp	/^    virtual int getCaptureDomain() { return CV_CAP_XIAPI; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	class:CvCaptureCAM_XIMEA
getCaptureDomain	precomp.hpp	/^        virtual int getCaptureDomain() { return CAP_ANY; } \/\/ Return the type of the capture object: CAP_VFW, etc...$/;"	f	class:cv::IVideoCapture
getCaptureDomain	precomp.hpp	/^    virtual int getCaptureDomain() { return CV_CAP_ANY; } \/\/ Return the type of the capture object: CV_CAP_VFW, etc...$/;"	f	struct:CvCapture
getCommonProperty	cap_openni.cpp	/^double CvCapture_OpenNI::getCommonProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI
getCommonProperty	cap_openni2.cpp	/^double CvCapture_OpenNI2::getCommonProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI2
getControlRegister	cap_dc1394_v2.cpp	/^static uint32_t getControlRegister(dc1394camera_t *camera, uint64_t offset)$/;"	f	file:
getCount	cap_msmf.cpp	/^unsigned int videoDevices::getCount()$/;"	f	class:__anon1::videoDevices
getCountFormats	cap_msmf.cpp	/^int videoDevice::getCountFormats()$/;"	f	class:__anon1::videoDevice
getCountFormats	cap_msmf.cpp	/^unsigned int videoInput::getCountFormats(int deviceID) const$/;"	f	class:__anon1::videoInput
getDepth	cap_cmu.cpp	/^int CvCaptureCAM_CMU::getDepth()$/;"	f	class:CvCaptureCAM_CMU
getDepthGeneratorProperty	cap_openni.cpp	/^double CvCapture_OpenNI::getDepthGeneratorProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI
getDepthGeneratorProperty	cap_openni2.cpp	/^double CvCapture_OpenNI2::getDepthGeneratorProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI2
getDepthMapFromMetaData	cap_openni.cpp	/^inline void getDepthMapFromMetaData( const xn::DepthMetaData& depthMetaData, cv::Mat& depthMap, XnUInt64 noSampleValue, XnUInt64 shadowValue )$/;"	f
getDepthMapFromMetaData	cap_openni2.cpp	/^inline void getDepthMapFromMetaData(const openni::VideoFrameRef& depthMetaData, cv::Mat& depthMap, int noSampleValue, int shadowValue)$/;"	f
getDevice	cap_dshow.cpp	/^HRESULT videoInput::getDevice(IBaseFilter** gottaFilter, int deviceId, WCHAR * wDeviceName, char * nDeviceName){$/;"	f	class:videoInput
getDevice	cap_msmf.cpp	/^videoDevice * videoDevices::getDevice(unsigned int i)$/;"	f	class:__anon1::videoDevices
getDeviceCount	cap_dshow.cpp	/^int videoInput::getDeviceCount(){$/;"	f	class:videoInput
getDeviceIndex	cap_winrt_bridge.cpp	/^int VideoioBridge::getDeviceIndex()$/;"	f	class:VideoioBridge
getDeviceName	cap_dshow.cpp	/^char * videoInput::getDeviceName(int deviceID){$/;"	f	class:videoInput
getFPS	cap_dshow.cpp	/^double videoInput::getFPS(int id) const$/;"	f	class:videoInput
getFormat	cap_msmf.cpp	/^MediaType videoDevice::getFormat(unsigned int id)$/;"	f	class:__anon1::videoDevice
getFormat	cap_msmf.cpp	/^MediaType videoInput::getFormat(int deviceID, unsigned int id)$/;"	f	class:__anon1::videoInput
getFourcc	cap_dshow.cpp	/^int videoInput::getFourcc(int id) const$/;"	f	class:videoInput
getFourccFromMediaSubtype	cap_dshow.cpp	/^int videoInput::getFourccFromMediaSubtype(GUID type) const$/;"	f	class:videoInput
getFps	cap_mjpeg_decoder.cpp	/^double AviMjpegStream::getFps()$/;"	f	class:cv::AviMjpegStream
getFramePos	cap_mjpeg_decoder.cpp	/^uint64_t MotionJpegCapture::getFramePos() const$/;"	f	class:cv::MotionJpegCapture
getFrameRate	cap_msmf.cpp	/^unsigned int videoDevice::getFrameRate() const$/;"	f	class:__anon1::videoDevice
getFrameRate	cap_msmf.cpp	/^unsigned int videoInput::getFrameRate(int deviceID) const$/;"	f	class:__anon1::videoInput
getFrames	cap_mjpeg_decoder.cpp	/^frame_list& AviMjpegStream::getFrames()$/;"	f	class:cv::AviMjpegStream
getFramesCount	cap_mjpeg_decoder.cpp	/^size_t AviMjpegStream::getFramesCount()$/;"	f	class:cv::AviMjpegStream
getGenericProperty	cap_gphoto2.cpp	/^CameraWidget * DigitalCameraCapture::getGenericProperty(int propertyId,$/;"	f	class:cv::gphoto2::DigitalCameraCapture
getHeight	cap_dshow.cpp	/^int videoInput::getHeight(int id) const$/;"	f	class:videoInput
getHeight	cap_mjpeg_decoder.cpp	/^uint32_t AviMjpegStream::getHeight()$/;"	f	class:cv::AviMjpegStream
getHeight	cap_msmf.cpp	/^unsigned int videoDevice::getHeight()$/;"	f	class:__anon1::videoDevice
getHeight	cap_msmf.cpp	/^unsigned int videoInput::getHeight(int deviceID) const$/;"	f	class:__anon1::videoInput
getHeight	cap_winrt_bridge.cpp	/^int VideoioBridge::getHeight()$/;"	f	class:VideoioBridge
getImageGeneratorProperty	cap_openni.cpp	/^double CvCapture_OpenNI::getImageGeneratorProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI
getImageGeneratorProperty	cap_openni2.cpp	/^double CvCapture_OpenNI2::getImageGeneratorProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI2
getImageGrabber	cap_msmf.cpp	/^ImageGrabber *ImageGrabberThread::getImageGrabber()$/;"	f	class:__anon1::ImageGrabberThread
getInstance	cap_msmf.cpp	/^DPO& DPO::getInstance()$/;"	f	class:__anon1::DPO
getInstance	cap_msmf.cpp	/^Media_Foundation& Media_Foundation::getInstance()$/;"	f	class:__anon1::Media_Foundation
getInstance	cap_msmf.cpp	/^videoDevices& videoDevices::getInstance()$/;"	f	class:__anon1::videoDevices
getInstance	cap_msmf.cpp	/^videoInput& videoInput::getInstance()$/;"	f	class:__anon1::videoInput
getInstance	cap_winrt_bridge.cpp	/^VideoioBridge& VideoioBridge::getInstance()$/;"	f	class:VideoioBridge
getInstance	cap_winrt_video.cpp	/^Video &Video::getInstance() {$/;"	f	class:Video
getIplImagePtr	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::OutputMap::getIplImagePtr()$/;"	f	class:CvCapture_OpenNI::OutputMap
getIplImagePtr	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::OutputMap::getIplImagePtr()$/;"	f	class:CvCapture_OpenNI2::OutputMap
getIsCircleBuffer	cap_openni.cpp	/^    bool getIsCircleBuffer() const { return isCircleBuffer; }$/;"	f	class:ApproximateSyncGrabber
getMaxBufferSize	cap_openni.cpp	/^    inline int getMaxBufferSize() const { return maxBufferSize; }$/;"	f	class:ApproximateSyncGrabber
getMaxTimeDuration	cap_openni.cpp	/^    int getMaxTimeDuration() const { return maxTimeDuration; }$/;"	f	class:ApproximateSyncGrabber
getMediaSource	cap_msmf.cpp	/^IMFMediaSource *videoDevice::getMediaSource()$/;"	f	class:__anon1::videoDevice
getMediaSource	cap_msmf.cpp	/^IMFMediaSource *videoInput::getMediaSource(int deviceID)$/;"	f	class:__anon1::videoInput
getMediaSubtypeAsString	cap_dshow.cpp	/^void videoInput::getMediaSubtypeAsString(GUID type, char * typeAsString){$/;"	f	class:videoInput
getMediaSubtypeFromFourcc	cap_dshow.cpp	/^GUID *videoInput::getMediaSubtypeFromFourcc(int fourcc){$/;"	f	class:videoInput
getNChannels	cap_cmu.cpp	/^int CvCaptureCAM_CMU::getNChannels()$/;"	f	class:CvCaptureCAM_CMU
getName	cap_msmf.cpp	/^wchar_t *videoDevice::getName()$/;"	f	class:__anon1::videoDevice
getNameVideoDevice	cap_msmf.cpp	/^wchar_t *videoInput::getNameVideoDevice(int deviceID)$/;"	f	class:__anon1::videoInput
getParametrs	cap_msmf.cpp	/^CamParametrs videoDevice::getParametrs()$/;"	f	class:__anon1::videoDevice
getParametrs	cap_msmf.cpp	/^CamParametrs videoInput::getParametrs(int deviceID)$/;"	f	class:__anon1::videoInput
getPixels	cap_dshow.cpp	/^bool videoInput::getPixels(int id, unsigned char * dstBuffer, bool flipRedAndBlue, bool flipImage){$/;"	f	class:videoInput
getPixels	cap_dshow.cpp	/^unsigned char * videoInput::getPixels(int id, bool flipRedAndBlue, bool flipImage){$/;"	f	class:videoInput
getPixels	cap_msmf.cpp	/^bool videoInput::getPixels(int deviceID, unsigned char * dstBuffer, bool flipRedAndBlue, bool flipImage)$/;"	f	class:__anon1::videoInput
getPos	cap_mjpeg_encoder.cpp	/^    size_t getPos() const$/;"	f	class:cv::mjpeg::BitStream
getProfileIDX	cap_intelperc.cpp	/^int IntelPerCStreamBase::getProfileIDX() const$/;"	f	class:cv::IntelPerCStreamBase
getProperty	cap_OPEL.cpp	/^double CvCaptureCAM_OPEL_CPP::getProperty(int) const$/;"	f	class:CvCaptureCAM_OPEL_CPP
getProperty	cap_cmu.cpp	/^double CvCaptureCAM_CMU::getProperty( int property_id ) const$/;"	f	class:CvCaptureCAM_CMU
getProperty	cap_dc1394.cpp	/^double CvCaptureCAM_DC1394_CPP::getProperty( int propId ) const$/;"	f	class:CvCaptureCAM_DC1394_CPP
getProperty	cap_dc1394_v2.cpp	/^double CvCaptureCAM_DC1394_v2_CPP::getProperty(int propId) const$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
getProperty	cap_dshow.cpp	/^double VideoCapture_DShow::getProperty(int propIdx) const$/;"	f	class:cv::VideoCapture_DShow
getProperty	cap_ffmpeg.cpp	/^    virtual double getProperty(int propId) const$/;"	f	class:CvCapture_FFMPEG_proxy
getProperty	cap_ffmpeg_impl.hpp	/^double CvCapture_FFMPEG::getProperty( int property_id ) const$/;"	f	class:CvCapture_FFMPEG
getProperty	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::getProperty( int property_id ) const$/;"	f	class:CvCaptureCAM_Giganetix
getProperty	cap_gphoto2.cpp	/^double DigitalCameraCapture::getProperty(int propertyId) const$/;"	f	class:cv::gphoto2::DigitalCameraCapture
getProperty	cap_gstreamer.cpp	/^double CvCapture_GStreamer::getProperty( int propId ) const$/;"	f	class:CvCapture_GStreamer
getProperty	cap_images.cpp	/^double CvCapture_Images::getProperty(int id) const$/;"	f	class:CvCapture_Images
getProperty	cap_intelperc.cpp	/^double IntelPerCStreamBase::getProperty(int propIdx) const$/;"	f	class:cv::IntelPerCStreamBase
getProperty	cap_intelperc.cpp	/^double IntelPerCStreamDepth::getProperty(int propIdx) const$/;"	f	class:cv::IntelPerCStreamDepth
getProperty	cap_intelperc.cpp	/^double IntelPerCStreamImage::getProperty(int propIdx) const$/;"	f	class:cv::IntelPerCStreamImage
getProperty	cap_intelperc.cpp	/^double VideoCapture_IntelPerC::getProperty(int propIdx) const$/;"	f	class:cv::VideoCapture_IntelPerC
getProperty	cap_libv4l.cpp	/^double CvCaptureCAM_V4L_CPP::getProperty( int propId ) const$/;"	f	class:CvCaptureCAM_V4L_CPP
getProperty	cap_mjpeg_decoder.cpp	/^double MotionJpegCapture::getProperty(int property) const$/;"	f	class:cv::MotionJpegCapture
getProperty	cap_mjpeg_encoder.cpp	/^    double getProperty(int propId) const$/;"	f	class:cv::mjpeg::MotionJpegWriter
getProperty	cap_msmf.cpp	/^double CvCaptureCAM_MSMF::getProperty( int property_id ) const$/;"	f	class:CvCaptureCAM_MSMF
getProperty	cap_msmf.cpp	/^double CvCaptureFile_MSMF::getProperty(int property_id) const$/;"	f	class:CvCaptureFile_MSMF
getProperty	cap_openni.cpp	/^double CvCapture_OpenNI::getProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI
getProperty	cap_openni2.cpp	/^double CvCapture_OpenNI2::getProperty( int propIdx ) const$/;"	f	class:CvCapture_OpenNI2
getProperty	cap_pvapi.cpp	/^double CvCaptureCAM_PvAPI::getProperty( int property_id ) const$/;"	f	class:CvCaptureCAM_PvAPI
getProperty	cap_qt.cpp	/^double CvCapture_QT_Cam_CPP::getProperty( int propId ) const$/;"	f	class:CvCapture_QT_Cam_CPP
getProperty	cap_qt.cpp	/^double CvCapture_QT_Movie_CPP::getProperty( int propId ) const$/;"	f	class:CvCapture_QT_Movie_CPP
getProperty	cap_unicap.cpp	/^double CvCapture_Unicap::getProperty(int id) const$/;"	f	class:CvCapture_Unicap
getProperty	cap_v4l.cpp	/^double CvCaptureCAM_V4L_CPP::getProperty( int propId ) const$/;"	f	class:CvCaptureCAM_V4L_CPP
getProperty	cap_vfw.cpp	/^double CvCaptureAVI_VFW::getProperty( int property_id ) const$/;"	f	class:CvCaptureAVI_VFW
getProperty	cap_vfw.cpp	/^double CvCaptureCAM_VFW::getProperty( int property_id ) const$/;"	f	class:CvCaptureCAM_VFW
getProperty	cap_winrt_capture.hpp	/^        virtual double getProperty(int) { return 0; }$/;"	f	class:cv::VideoCapture_WinRT
getProperty	cap_ximea.cpp	/^double CvCaptureCAM_XIMEA::getProperty( int property_id ) const$/;"	f	class:CvCaptureCAM_XIMEA
getProperty	cap_xine.cpp	/^double CvCaptureAVI_XINE_CPP::getProperty( int propId ) const$/;"	f	class:CvCaptureAVI_XINE_CPP
getProperty	precomp.hpp	/^        virtual double getProperty(int) const { return 0; }$/;"	f	class:cv::IVideoCapture
getProperty	precomp.hpp	/^        virtual double getProperty(int) const { return 0; }$/;"	f	class:cv::IVideoWriter
getProperty	precomp.hpp	/^    virtual double getProperty(int) const { return 0; }$/;"	f	struct:CvCapture
getRawImage	cap_msmf.cpp	/^RawImage *ImageGrabberCallback::getRawImage()$/;"	f	class:__anon1::ImageGrabberCallback
getRawImageOut	cap_msmf.cpp	/^RawImage * videoDevice::getRawImageOut()$/;"	f	class:__anon1::videoDevice
getSize	cap_cmu.cpp	/^CvSize CvCaptureCAM_CMU::getSize()$/;"	f	class:CvCaptureCAM_CMU
getSize	cap_dshow.cpp	/^int videoInput::getSize(int id) const$/;"	f	class:videoInput
getSize	cap_msmf.cpp	/^unsigned int RawImage::getSize()$/;"	f	class:__anon1::RawImage
getSourceDuration	cap_msmf.cpp	/^HRESULT CvCaptureFile_MSMF::getSourceDuration(IMFMediaSource *pSource, MFTIME *pDuration) const$/;"	f	class:CvCaptureFile_MSMF
getVideoPropertyAsString	cap_dshow.cpp	/^void videoInput::getVideoPropertyAsString(int prop, char * propertyAsString){$/;"	f	class:videoInput
getVideoPropertyFromCV	cap_dshow.cpp	/^int videoInput::getVideoPropertyFromCV(int cv_property){$/;"	f	class:videoInput
getVideoSettingCamera	cap_dshow.cpp	/^bool videoInput::getVideoSettingCamera(int deviceID, long Property, long &min, long &max, long &SteppingDelta, long &currentValue, long &flags, long &defaultValue){$/;"	f	class:videoInput
getVideoSettingFilter	cap_dshow.cpp	/^bool videoInput::getVideoSettingFilter(int deviceID, long Property, long &min, long &max, long &SteppingDelta, long &currentValue, long &flags, long &defaultValue){$/;"	f	class:videoInput
getVidereCalibrationInfo	cap_dc1394_v2.cpp	/^bool CvCaptureCAM_DC1394_v2_CPP::getVidereCalibrationInfo( char* buf, int bufSize )$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
getWidget	cap_gphoto2.cpp	/^CameraWidget * DigitalCameraCapture::getWidget(int widgetId) const$/;"	f	class:cv::gphoto2::DigitalCameraCapture
getWidth	cap_dshow.cpp	/^int videoInput::getWidth(int id) const$/;"	f	class:videoInput
getWidth	cap_mjpeg_decoder.cpp	/^uint32_t AviMjpegStream::getWidth()$/;"	f	class:cv::AviMjpegStream
getWidth	cap_msmf.cpp	/^unsigned int videoDevice::getWidth()$/;"	f	class:__anon1::videoDevice
getWidth	cap_msmf.cpp	/^unsigned int videoInput::getWidth(int deviceID) const$/;"	f	class:__anon1::videoInput
getWidth	cap_winrt_bridge.cpp	/^int VideoioBridge::getWidth()$/;"	f	class:VideoioBridge
get_Completed	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP get_Completed(typename _Attributes::_CompletionDelegateType** _CompleteHandler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
get_ErrorCode	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP get_ErrorCode(HRESULT* errorCode)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
get_Id	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP get_Id(unsigned int* id)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
get_Progress	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP get_Progress(typename _Attributes::_ProgressDelegateType** _ProgressHandler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
get_Status	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP get_Status(ABI::Windows::Foundation::AsyncStatus* status)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
get_bitrate	cap_ffmpeg_impl.hpp	/^int CvCapture_FFMPEG::get_bitrate() const$/;"	f	class:CvCapture_FFMPEG
get_cancellation_token	ppltasks_winrt.hpp	/^    Concurrency::cancellation_token get_cancellation_token() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
get_continuation_context	ppltasks_winrt.hpp	/^    task_continuation_context get_continuation_context() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
get_duration_sec	cap_ffmpeg_impl.hpp	/^double CvCapture_FFMPEG::get_duration_sec() const$/;"	f	class:CvCapture_FFMPEG
get_fps	cap_ffmpeg_impl.hpp	/^double CvCapture_FFMPEG::get_fps() const$/;"	f	class:CvCapture_FFMPEG
get_number_of_cpus	cap_ffmpeg_impl.hpp	/^static int get_number_of_cpus(void)$/;"	f
get_scheduler	ppltasks_winrt.hpp	/^    Concurrency::scheduler_ptr get_scheduler() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
get_total_frames	cap_ffmpeg_impl.hpp	/^int64_t CvCapture_FFMPEG::get_total_frames() const$/;"	f	class:CvCapture_FFMPEG
getframe	cap_vfw.cpp	/^    PGETFRAME           getframe;$/;"	m	class:CvCaptureAVI_VFW	file:
getpPixels	cap_msmf.cpp	/^unsigned char * RawImage::getpPixels()$/;"	f	class:__anon1::RawImage
getuuid	cap_msmf.hpp	/^    static IID getuuid() { return __uuidof(ABI::Windows::Foundation::IPropertyValue); }$/;"	f	struct:winrt_type
getuuid	cap_msmf.hpp	/^    static IID getuuid() { return __uuidof(_Type); }$/;"	f	struct:winrt_type
got_frame	cap_qt.cpp	/^        volatile bool      got_frame;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
gphoto2	cap_gphoto2.cpp	/^namespace gphoto2 {$/;"	n	namespace:cv	file:
grab	cap.cpp	/^bool VideoCapture::grab()$/;"	f	class:cv::VideoCapture
grab	cap_openni.cpp	/^        bool grab( xn::DepthMetaData& depthMetaData,$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizerTask
grab	cap_openni.cpp	/^        virtual bool grab( xn::DepthMetaData& depthMetaData,$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizerBase
grab	cap_openni.cpp	/^    bool grab( xn::DepthMetaData& depthMetaData,$/;"	f	class:ApproximateSyncGrabber
grabFrame	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::grabFrame()$/;"	f	class:CvCaptureCAM_OPEL_CPP
grabFrame	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::grabFrame()$/;"	f	class:CvCaptureCAM_CMU
grabFrame	cap_dc1394.cpp	/^bool CvCaptureCAM_DC1394_CPP::grabFrame()$/;"	f	class:CvCaptureCAM_DC1394_CPP
grabFrame	cap_dc1394_v2.cpp	/^bool CvCaptureCAM_DC1394_v2_CPP::grabFrame()$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
grabFrame	cap_dshow.cpp	/^bool VideoCapture_DShow::grabFrame()$/;"	f	class:cv::VideoCapture_DShow
grabFrame	cap_ffmpeg.cpp	/^    virtual bool grabFrame()$/;"	f	class:CvCapture_FFMPEG_proxy
grabFrame	cap_ffmpeg_impl.hpp	/^bool CvCapture_FFMPEG::grabFrame()$/;"	f	class:CvCapture_FFMPEG
grabFrame	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::grabFrame()$/;"	f	class:CvCaptureCAM_Giganetix
grabFrame	cap_gphoto2.cpp	/^bool DigitalCameraCapture::grabFrame()$/;"	f	class:cv::gphoto2::DigitalCameraCapture
grabFrame	cap_gstreamer.cpp	/^bool CvCapture_GStreamer::grabFrame()$/;"	f	class:CvCapture_GStreamer
grabFrame	cap_images.cpp	/^bool CvCapture_Images::grabFrame()$/;"	f	class:CvCapture_Images
grabFrame	cap_intelperc.cpp	/^bool IntelPerCStreamBase::grabFrame()$/;"	f	class:cv::IntelPerCStreamBase
grabFrame	cap_intelperc.cpp	/^bool VideoCapture_IntelPerC::grabFrame()$/;"	f	class:cv::VideoCapture_IntelPerC
grabFrame	cap_libv4l.cpp	/^bool CvCaptureCAM_V4L_CPP::grabFrame()$/;"	f	class:CvCaptureCAM_V4L_CPP
grabFrame	cap_mjpeg_decoder.cpp	/^bool MotionJpegCapture::grabFrame()$/;"	f	class:cv::MotionJpegCapture
grabFrame	cap_msmf.cpp	/^bool CvCaptureCAM_MSMF::grabFrame()$/;"	f	class:CvCaptureCAM_MSMF
grabFrame	cap_msmf.cpp	/^bool CvCaptureFile_MSMF::grabFrame()$/;"	f	class:CvCaptureFile_MSMF
grabFrame	cap_openni.cpp	/^bool CvCapture_OpenNI::grabFrame()$/;"	f	class:CvCapture_OpenNI
grabFrame	cap_openni2.cpp	/^bool CvCapture_OpenNI2::grabFrame()$/;"	f	class:CvCapture_OpenNI2
grabFrame	cap_pvapi.cpp	/^bool CvCaptureCAM_PvAPI::grabFrame()$/;"	f	class:CvCaptureCAM_PvAPI
grabFrame	cap_qt.cpp	/^bool CvCapture_QT_Cam_CPP::grabFrame()$/;"	f	class:CvCapture_QT_Cam_CPP
grabFrame	cap_qt.cpp	/^bool CvCapture_QT_Movie_CPP::grabFrame()$/;"	f	class:CvCapture_QT_Movie_CPP
grabFrame	cap_unicap.cpp	/^bool CvCapture_Unicap::grabFrame() {$/;"	f	class:CvCapture_Unicap
grabFrame	cap_v4l.cpp	/^bool CvCaptureCAM_V4L_CPP::grabFrame()$/;"	f	class:CvCaptureCAM_V4L_CPP
grabFrame	cap_vfw.cpp	/^bool CvCaptureAVI_VFW::grabFrame()$/;"	f	class:CvCaptureAVI_VFW
grabFrame	cap_vfw.cpp	/^bool CvCaptureCAM_VFW::grabFrame()$/;"	f	class:CvCaptureCAM_VFW
grabFrame	cap_winrt_capture.cpp	/^    bool VideoCapture_WinRT::grabFrame()$/;"	f	class:cv::VideoCapture_WinRT
grabFrame	cap_ximea.cpp	/^bool CvCaptureCAM_XIMEA::grabFrame()$/;"	f	class:CvCaptureCAM_XIMEA
grabFrame	cap_xine.cpp	/^bool CvCaptureAVI_XINE_CPP::grabFrame()$/;"	f	class:CvCaptureAVI_XINE_CPP
grabFrame	precomp.hpp	/^    virtual bool grabFrame() { return true; }$/;"	f	struct:CvCapture
grabImage	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::grabImage ()$/;"	f	class:CvCaptureCAM_Giganetix
grabbedFrames	cap_gphoto2.cpp	/^    std::deque<CameraFile *> grabbedFrames;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
grabber	cap_qt.cpp	/^        ComponentInstance  grabber;$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
grabber	cap_qt.cpp	/^        SeqGrabComponent   grabber;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
grabberThread	cap_msmf.cpp	/^    ImageGrabberThread* grabberThread;$/;"	m	class:CvCaptureFile_MSMF	file:
gs_verbose	cap_dshow.cpp	/^static bool gs_verbose = true;$/;"	v	file:
gst_initializer	cap_gstreamer.cpp	/^    gst_initializer()$/;"	f	class:gst_initializer	file:
gst_initializer	cap_gstreamer.cpp	/^class gst_initializer$/;"	c	file:
gst_initializer_mutex	cap_gstreamer.cpp	/^static cv::Mutex gst_initializer_mutex;$/;"	v	file:
guid	cap_dc1394_v2.cpp	/^    uint64_t guid;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
gworld	cap_qt.cpp	/^        GWorldPtr          gworld;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
hEvent	cap_dshow.cpp	/^    HANDLE hEvent;$/;"	m	class:SampleGrabberCallback	file:
handle	cap_dc1394.cpp	/^    raw1394handle_t handle;$/;"	m	struct:CvCaptureCAM_DC1394	file:
handle	cap_unicap.cpp	/^  unicap_handle_t handle;$/;"	m	struct:CvCapture_Unicap	file:
handleMessage	cap_gstreamer.cpp	/^void handleMessage(GstElement * pipeline)$/;"	f
handles	cap_dc1394.cpp	/^static raw1394handle_t handles[MAX_PORTS];$/;"	v	file:
has_cancellation_token	ppltasks_winrt.hpp	/^    bool has_cancellation_token() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
has_scheduler	ppltasks_winrt.hpp	/^    bool has_scheduler() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
hdr	cap_vfw.cpp	/^    VIDEOHDR* hdr;$/;"	m	class:CvCaptureCAM_VFW	file:
height	cap_OPEL.cpp	/^					int width, height;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
height	cap_OPEL.cpp	/^	int height;$/;"	m	struct:property	file:
height	cap_dshow.cpp	/^        int height;$/;"	m	class:videoDevice	file:
height	cap_ffmpeg_impl.hpp	/^    int height;$/;"	m	struct:Image_FFMPEG
height	cap_gstreamer.cpp	/^    gint          height;$/;"	m	class:CvCapture_GStreamer	file:
height	cap_libv4l.cpp	/^    int width; int height;$/;"	m	struct:CvCaptureCAM_V4L	file:
height	cap_mjpeg_encoder.cpp	/^    int width, height, channels;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
height	cap_msmf.cpp	/^    int index, width, height, fourcc;$/;"	m	class:CvCaptureCAM_MSMF	file:
height	cap_msmf.cpp	/^    unsigned int height;$/;"	m	struct:__anon1::MediaType	file:
height	cap_vfw.cpp	/^    int width, height;$/;"	m	class:CvCaptureCAM_VFW	file:
height	cap_winrt_bridge.hpp	/^    int deviceIndex, width, height;$/;"	m	class:VideoioBridge
height	cap_winrt_video.hpp	/^    unsigned int			width, height;$/;"	m	class:Video
heightSet	cap_vfw.cpp	/^    int widthSet, heightSet;$/;"	m	class:CvCaptureCAM_VFW	file:
hic	cap_vfw.cpp	/^    HIC    hic;$/;"	m	class:CvCaptureCAM_VFW	file:
hmv	cap_ximea.cpp	/^    HANDLE    hmv;$/;"	m	class:CvCaptureCAM_XIMEA	file:
huff_code_mask	cap_mjpeg_encoder.cpp	/^        huff_code_mask = (1 << huff_val_shift) - 1$/;"	e	enum:cv::mjpeg::BitStream::__anon14	file:
huff_val_shift	cap_mjpeg_encoder.cpp	/^        huff_val_shift = 20,$/;"	e	enum:cv::mjpeg::BitStream::__anon14	file:
i386	cap_openni.cpp	54;"	d	file:
i386	cap_openni2.cpp	54;"	d	file:
ic	cap_ffmpeg_impl.hpp	/^    AVFormatContext * ic;$/;"	m	struct:CvCapture_FFMPEG
icvBitmapHeader	cap_vfw.cpp	/^static BITMAPINFOHEADER icvBitmapHeader( int width, int height, int bpp, int compression = BI_RGB )$/;"	f	file:
icvCaptureFromCAM_DC1394	cap_dc1394.cpp	/^static CvCaptureCAM_DC1394 * icvCaptureFromCAM_DC1394 (int index)$/;"	f	file:
icvCaptureFromCAM_V4L	cap_libv4l.cpp	/^static CvCaptureCAM_V4L * icvCaptureFromCAM_V4L (int index)$/;"	f	file:
icvCaptureFromCAM_V4L	cap_v4l.cpp	/^static CvCaptureCAM_V4L * icvCaptureFromCAM_V4L (int index)$/;"	f	file:
icvCaptureFromCam_QT	cap_qt.cpp	/^static CvCapture_QT_Cam * icvCaptureFromCam_QT (const int index)$/;"	f	file:
icvCaptureFromFile_QT	cap_qt.cpp	/^static CvCapture_QT_Movie * icvCaptureFromFile_QT (const char * filename)$/;"	f	file:
icvCaptureFromFile_XINE	cap_xine.cpp	/^static CvCaptureAVI_XINE* icvCaptureFromFile_XINE( const char* filename )$/;"	f	file:
icvCheckSeekAVI_XINE	cap_xine.cpp	/^static void icvCheckSeekAVI_XINE( CvCaptureAVI_XINE * capture )$/;"	f	file:
icvCloseAVI_XINE	cap_xine.cpp	/^static void icvCloseAVI_XINE( CvCaptureAVI_XINE* capture )$/;"	f	file:
icvCloseCAM_DC1394	cap_dc1394.cpp	/^static void icvCloseCAM_DC1394( CvCaptureCAM_DC1394* capture ){$/;"	f	file:
icvCloseCAM_V4L	cap_libv4l.cpp	/^static void icvCloseCAM_V4L( CvCaptureCAM_V4L* capture ){$/;"	f	file:
icvCloseCAM_V4L	cap_v4l.cpp	/^static void icvCloseCAM_V4L( CvCaptureCAM_V4L* capture ){$/;"	f	file:
icvClose_QT_Cam	cap_qt.cpp	/^static int icvClose_QT_Cam (CvCapture_QT_Cam * capture)$/;"	f	file:
icvClose_QT_Movie	cap_qt.cpp	/^static int icvClose_QT_Movie (CvCapture_QT_Movie * capture)$/;"	f	file:
icvColorMode	cap_dc1394.cpp	/^icvColorMode( int mode ){$/;"	f	file:
icvCreateFileCapture_FFMPEG_p	cap_ffmpeg.cpp	/^static CvCreateFileCapture_Plugin icvCreateFileCapture_FFMPEG_p = 0;$/;"	v	file:
icvCreateVideoWriter_FFMPEG_p	cap_ffmpeg.cpp	/^static CvCreateVideoWriter_Plugin icvCreateVideoWriter_FFMPEG_p = 0;$/;"	v	file:
icvCreateVideoWriter_QT	cap_qt.cpp	/^static CvVideoWriter_QT* icvCreateVideoWriter_QT($/;"	f	file:
icvDataProc_QT_Cam	cap_qt.cpp	/^static OSErr icvDataProc_QT_Cam (SGChannel channel, Ptr raw_data, long len, long *, long, TimeValue, short, long refCon)$/;"	f	file:
icvEncodedFrameOutputCallback	cap_qt.cpp	/^static OSStatus icvEncodedFrameOutputCallback($/;"	f	file:
icvExtractPattern	cap_images.cpp	/^static char* icvExtractPattern(const char *filename, unsigned *offset)$/;"	f	file:
icvFFMPEGErrStr	cap_ffmpeg_impl.hpp	/^static const char * icvFFMPEGErrStr(int err)$/;"	f
icvFFOpenCV	cap_ffmpeg.cpp	/^    HMODULE icvFFOpenCV;$/;"	m	class:icvInitFFMPEG	file:
icvFormatSupportedCAM_DC1394	cap_dc1394.cpp	/^icvFormatSupportedCAM_DC1394(int format, quadlet_t formats){$/;"	f	file:
icvGetBestFrameRate	cap_dc1394.cpp	/^static unsigned int icvGetBestFrameRate( CvCaptureCAM_DC1394 * capture, int format, int mode  ){$/;"	f	file:
icvGetCaptureProperty	cap.cpp	/^static inline double icvGetCaptureProperty( const CvCapture* capture, int id )$/;"	f	file:
icvGetCaptureProperty_FFMPEG_p	cap_ffmpeg.cpp	/^static CvGetCaptureProperty_Plugin icvGetCaptureProperty_FFMPEG_p = 0;$/;"	v	file:
icvGetPropertyAVI_XINE	cap_xine.cpp	/^static double icvGetPropertyAVI_XINE( CvCaptureAVI_XINE* capture, int property_id )$/;"	f	file:
icvGetPropertyCAM_DC1394	cap_dc1394.cpp	/^static double icvGetPropertyCAM_DC1394( CvCaptureCAM_DC1394* capture, int property_id ){$/;"	f	file:
icvGetPropertyCAM_V4L	cap_libv4l.cpp	/^static double icvGetPropertyCAM_V4L (CvCaptureCAM_V4L* capture,$/;"	f	file:
icvGetPropertyCAM_V4L	cap_v4l.cpp	/^static double icvGetPropertyCAM_V4L (CvCaptureCAM_V4L* capture,$/;"	f	file:
icvGetProperty_QT_Cam	cap_qt.cpp	/^static double icvGetProperty_QT_Cam (CvCapture_QT_Cam * capture, int property_id)$/;"	f	file:
icvGetProperty_QT_Movie	cap_qt.cpp	/^static double icvGetProperty_QT_Movie (CvCapture_QT_Movie * capture, int property_id)$/;"	f	file:
icvGrabFrameAVI_XINE	cap_xine.cpp	/^static int icvGrabFrameAVI_XINE( CvCaptureAVI_XINE* capture )$/;"	f	file:
icvGrabFrameCAM_DC1394	cap_dc1394.cpp	/^static int icvGrabFrameCAM_DC1394( CvCaptureCAM_DC1394* capture ){$/;"	f	file:
icvGrabFrameCAM_V4L	cap_libv4l.cpp	/^static int icvGrabFrameCAM_V4L(CvCaptureCAM_V4L* capture) {$/;"	f	file:
icvGrabFrameCAM_V4L	cap_v4l.cpp	/^static int icvGrabFrameCAM_V4L(CvCaptureCAM_V4L* capture) {$/;"	f	file:
icvGrabFrame_FFMPEG_p	cap_ffmpeg.cpp	/^static CvGrabFrame_Plugin icvGrabFrame_FFMPEG_p = 0;$/;"	v	file:
icvGrabFrame_QT_Cam	cap_qt.cpp	/^static int icvGrabFrame_QT_Cam (CvCapture_QT_Cam * capture)$/;"	f	file:
icvGrabFrame_QT_Movie	cap_qt.cpp	/^static int icvGrabFrame_QT_Movie (CvCapture_QT_Movie * capture)$/;"	f	file:
icvInitCapture_DC1394	cap_dc1394.cpp	/^void icvInitCapture_DC1394(){$/;"	f
icvInitCapture_V4L	cap_libv4l.cpp	/^static void icvInitCapture_V4L() {$/;"	f	file:
icvInitCapture_V4L	cap_v4l.cpp	/^static void icvInitCapture_V4L() {$/;"	f	file:
icvInitCapture_VFW	cap_vfw.cpp	/^static void icvInitCapture_VFW()$/;"	f	file:
icvInitFFMPEG	cap_ffmpeg.cpp	/^    icvInitFFMPEG()$/;"	f	class:icvInitFFMPEG	file:
icvInitFFMPEG	cap_ffmpeg.cpp	/^class icvInitFFMPEG$/;"	c	file:
icvModeSupportedCAM_DC1394	cap_dc1394.cpp	/^icvModeSupportedCAM_DC1394(int format, int mode, quadlet_t modes){$/;"	f	file:
icvOldSeekFrameAVI_XINE	cap_xine.cpp	/^static int icvOldSeekFrameAVI_XINE( CvCaptureAVI_XINE* capture, int f )$/;"	f	file:
icvOpenAVI_XINE	cap_xine.cpp	/^static int icvOpenAVI_XINE( CvCaptureAVI_XINE* capture, const char* filename )$/;"	f	file:
icvOpenCamera_QT	cap_qt.cpp	/^static int icvOpenCamera_QT (CvCapture_QT_Cam * capture, const int index)$/;"	f	file:
icvOpenFile_QT_Movie	cap_qt.cpp	/^static int icvOpenFile_QT_Movie (CvCapture_QT_Movie * capture, const char * filename)$/;"	f	file:
icvReleaseCapture_FFMPEG_p	cap_ffmpeg.cpp	/^static CvReleaseCapture_Plugin icvReleaseCapture_FFMPEG_p = 0;$/;"	v	file:
icvReleaseVideoWriter_FFMPEG_p	cap_ffmpeg.cpp	/^static CvReleaseVideoWriter_Plugin icvReleaseVideoWriter_FFMPEG_p = 0;$/;"	v	file:
icvReleaseVideoWriter_QT	cap_qt.cpp	/^static void icvReleaseVideoWriter_QT( CvVideoWriter_QT ** writer ) {$/;"	f	file:
icvResizeFrame	cap_dc1394.cpp	/^static int icvResizeFrame(CvCaptureCAM_DC1394 * capture){$/;"	f	file:
icvRetrieveFrameAVI_XINE	cap_xine.cpp	/^static const IplImage* icvRetrieveFrameAVI_XINE( CvCaptureAVI_XINE* capture, int )$/;"	f	file:
icvRetrieveFrameCAM_DC1394	cap_dc1394.cpp	/^static IplImage* icvRetrieveFrameCAM_DC1394( CvCaptureCAM_DC1394* capture, int ){$/;"	f	file:
icvRetrieveFrameCAM_V4L	cap_libv4l.cpp	/^static IplImage* icvRetrieveFrameCAM_V4L( CvCaptureCAM_V4L* capture, int) {$/;"	f	file:
icvRetrieveFrameCAM_V4L	cap_v4l.cpp	/^static IplImage* icvRetrieveFrameCAM_V4L( CvCaptureCAM_V4L* capture, int) {$/;"	f	file:
icvRetrieveFrame_FFMPEG_p	cap_ffmpeg.cpp	/^static CvRetrieveFrame_Plugin icvRetrieveFrame_FFMPEG_p = 0;$/;"	v	file:
icvRetrieveFrame_QT_Cam	cap_qt.cpp	/^static const void * icvRetrieveFrame_QT_Cam (CvCapture_QT_Cam * capture, int)$/;"	f	file:
icvRetrieveFrame_QT_Movie	cap_qt.cpp	/^static const void * icvRetrieveFrame_QT_Movie (CvCapture_QT_Movie * capture, int)$/;"	f	file:
icvSeekFrameAVI_XINE	cap_xine.cpp	/^static int icvSeekFrameAVI_XINE( CvCaptureAVI_XINE* capture, int f )$/;"	f	file:
icvSeekRatioAVI_XINE	cap_xine.cpp	/^static int icvSeekRatioAVI_XINE( CvCaptureAVI_XINE* capture, double ratio )$/;"	f	file:
icvSeekTimeAVI_XINE	cap_xine.cpp	/^static int icvSeekTimeAVI_XINE( CvCaptureAVI_XINE* capture, int t )$/;"	f	file:
icvSetCaptureProperty_FFMPEG_p	cap_ffmpeg.cpp	/^static CvSetCaptureProperty_Plugin icvSetCaptureProperty_FFMPEG_p = 0;$/;"	v	file:
icvSetControl	cap_libv4l.cpp	/^static int icvSetControl (CvCaptureCAM_V4L* capture, int property_id, double value) {$/;"	f	file:
icvSetControl	cap_v4l.cpp	/^static int icvSetControl (CvCaptureCAM_V4L* capture,$/;"	f	file:
icvSetConvertRGB	cap_dc1394.cpp	/^int icvSetConvertRGB(CvCaptureCAM_DC1394 * capture, int convert){$/;"	f
icvSetFeatureCAM_DC1394	cap_dc1394.cpp	/^icvSetFeatureCAM_DC1394( CvCaptureCAM_DC1394* capture, int feature_id, int val){$/;"	f	file:
icvSetFrameRateCAM_DC1394	cap_dc1394.cpp	/^icvSetFrameRateCAM_DC1394( CvCaptureCAM_DC1394 * capture, double value ){$/;"	f	file:
icvSetModeCAM_DC1394	cap_dc1394.cpp	/^icvSetModeCAM_DC1394( CvCaptureCAM_DC1394 * capture, int mode ){$/;"	f	file:
icvSetPropertyAVI_XINE	cap_xine.cpp	/^static int icvSetPropertyAVI_XINE( CvCaptureAVI_XINE* capture,$/;"	f	file:
icvSetPropertyCAM_DC1394	cap_dc1394.cpp	/^icvSetPropertyCAM_DC1394( CvCaptureCAM_DC1394* capture, int property_id, double value ){$/;"	f	file:
icvSetPropertyCAM_V4L	cap_libv4l.cpp	/^static int icvSetPropertyCAM_V4L(CvCaptureCAM_V4L* capture, int property_id, double value){$/;"	f	file:
icvSetPropertyCAM_V4L	cap_v4l.cpp	/^static int icvSetPropertyCAM_V4L( CvCaptureCAM_V4L* capture,$/;"	f	file:
icvSetProperty_QT_Cam	cap_qt.cpp	/^static int icvSetProperty_QT_Cam (CvCapture_QT_Cam * capture, int property_id, double value)$/;"	f	file:
icvSetProperty_QT_Movie	cap_qt.cpp	/^static int icvSetProperty_QT_Movie (CvCapture_QT_Movie * capture, int property_id, double value)$/;"	f	file:
icvSetVideoSize	cap_libv4l.cpp	/^static int icvSetVideoSize( CvCaptureCAM_V4L* capture, int w, int h) {$/;"	f	file:
icvSetVideoSize	cap_v4l.cpp	/^static int icvSetVideoSize( CvCaptureCAM_V4L* capture, int w, int h) {$/;"	f	file:
icvSourceTrackingCallback	cap_qt.cpp	/^static void icvSourceTrackingCallback($/;"	f	file:
icvWriteFrame_FFMPEG_p	cap_ffmpeg.cpp	/^static CvWriteFrame_Plugin icvWriteFrame_FFMPEG_p = 0;$/;"	v	file:
icvWriteFrame_QT	cap_qt.cpp	/^static int icvWriteFrame_QT($/;"	f	file:
icvYUY2toBGR	cap_xine.cpp	/^static void icvYUY2toBGR( CvCaptureAVI_XINE * capture )$/;"	f	file:
icvYV12toBGR	cap_xine.cpp	/^static void icvYV12toBGR( CvCaptureAVI_XINE * capture )$/;"	f	file:
icv_add_video_stream_FFMPEG	cap_ffmpeg_impl.hpp	/^static AVStream *icv_add_video_stream_FFMPEG(AVFormatContext *oc,$/;"	f
icv_alloc_picture_FFMPEG	cap_ffmpeg_impl.hpp	/^static AVFrame * icv_alloc_picture_FFMPEG(int pix_fmt, int width, int height, bool alloc)$/;"	f
icv_av_write_frame_FFMPEG	cap_ffmpeg_impl.hpp	/^static int icv_av_write_frame_FFMPEG( AVFormatContext * oc, AVStream * video_st,$/;"	f
id	ffmpeg_codecs.hpp	/^    int id;$/;"	m	struct:AVCodecTag
idct_prescale	cap_mjpeg_encoder.cpp	/^static const int idct_prescale[] =$/;"	m	namespace:cv::mjpeg	file:
ig_Close	cap_msmf.cpp	/^    bool ig_Close;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_DeviceID	cap_msmf.cpp	/^    unsigned int ig_DeviceID;$/;"	m	class:__anon1::ImageGrabber	file:
ig_RIE	cap_msmf.cpp	/^    bool ig_RIE;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_RIFirst	cap_msmf.cpp	/^    RawImage *ig_RIFirst;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_RIOut	cap_msmf.cpp	/^    RawImage *ig_RIOut;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_RISecond	cap_msmf.cpp	/^    RawImage *ig_RISecond;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_Synchronous	cap_msmf.cpp	/^    bool ig_Synchronous;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_hFinish	cap_msmf.cpp	/^    const HANDLE ig_hFinish;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_hFrameGrabbed	cap_msmf.cpp	/^    const HANDLE ig_hFrameGrabbed;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_hFrameReady	cap_msmf.cpp	/^    const HANDLE ig_hFrameReady;$/;"	m	class:__anon1::ImageGrabberCallback	file:
ig_pMedCapSource	cap_msmf.cpp	/^    MAKE_WRL_AGILE_REF(_MediaCapture) ig_pMedCapSource;$/;"	m	class:__anon1::ImageGrabberWinRT	file:
ig_pMediaSink	cap_msmf.cpp	/^    MediaSink* ig_pMediaSink;$/;"	m	class:__anon1::ImageGrabberWinRT	file:
ig_pSession	cap_msmf.cpp	/^    IMFMediaSession *ig_pSession;$/;"	m	class:__anon1::ImageGrabber	file:
ig_pSource	cap_msmf.cpp	/^    IMFMediaSource *ig_pSource;$/;"	m	class:__anon1::ImageGrabber	file:
ig_pTopology	cap_msmf.cpp	/^    IMFTopology *ig_pTopology;$/;"	m	class:__anon1::ImageGrabber	file:
igt_DeviceID	cap_msmf.cpp	/^    unsigned int igt_DeviceID;$/;"	m	class:__anon1::ImageGrabberThread	file:
igt_Handle	cap_msmf.cpp	/^    HANDLE igt_Handle;$/;"	m	class:__anon1::ImageGrabberThread	file:
igt_ThreadIdArray	cap_msmf.cpp	/^    DWORD   igt_ThreadIdArray;$/;"	m	class:__anon1::ImageGrabberThread	file:
igt_func	cap_msmf.cpp	/^    emergensyStopEventCallback igt_func;$/;"	m	class:__anon1::ImageGrabberThread	file:
igt_pImageGrabber	cap_msmf.cpp	/^    ImageGrabber *igt_pImageGrabber;$/;"	m	class:__anon1::ImageGrabberThread	file:
igt_stop	cap_msmf.cpp	/^    bool igt_stop;$/;"	m	class:__anon1::ImageGrabberThread	file:
igt_userData	cap_msmf.cpp	/^    void *igt_userData;$/;"	m	class:__anon1::ImageGrabberThread	file:
image	cap_cmu.cpp	/^    IplImage* image;$/;"	m	class:CvCaptureCAM_CMU	file:
image	cap_openni.cpp	/^        xn::ImageMetaData image;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizerBase	file:
image	cap_ximea.cpp	/^    XI_IMG    image;$/;"	m	class:CvCaptureCAM_XIMEA	file:
imageGenerator	cap_openni.cpp	/^    xn::ImageGenerator &imageGenerator;$/;"	m	class:ApproximateSyncGrabber	file:
imageGenerator	cap_openni.cpp	/^    xn::ImageGenerator imageGenerator;$/;"	m	class:CvCapture_OpenNI	file:
imageMetaData	cap_openni.cpp	/^    xn::ImageMetaData  imageMetaData;$/;"	m	class:CvCapture_OpenNI	file:
imageProperties	cap_libv4l.cpp	/^    struct video_picture    imageProperties;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_picture	file:
imageProperties	cap_v4l.cpp	/^    struct video_picture    imageProperties;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_picture	file:
imageQueue	cap_openni.cpp	/^        std::queue<cv::Ptr<xn::ImageMetaData> > imageQueue;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizer	file:
imageQueue	cap_openni.cpp	/^        tbb::concurrent_bounded_queue<cv::Ptr<xn::ImageMetaData> > imageQueue;$/;"	m	class:ApproximateSyncGrabber::TBBApproximateSynchronizer	file:
image_bgr	cap_qt.cpp	/^        IplImage         * image_bgr; \/\/ will be returned by icvRetrieveFrame_QT()$/;"	m	struct:CvCapture_QT_Cam_barg	file:
image_bgr	cap_qt.cpp	/^        IplImage         * image_bgr; \/\/ will be returned by icvRetrieveFrame_QT()$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
image_bgr	cap_qt.cpp	/^    IplImage * image_bgr;          \/\/ will be returned by icvRetrieveFrame_QT()$/;"	m	struct:CvCapture_QT_Movie	file:
image_rgb	cap_qt.cpp	/^        IplImage         * image_rgb; \/\/ will point to the PixMap of myGWorld$/;"	m	struct:CvCapture_QT_Cam_barg	file:
image_rgb	cap_qt.cpp	/^        IplImage         * image_rgb; \/\/ will point to the PixMap of myGWorld$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
image_rgb	cap_qt.cpp	/^    IplImage * image_rgb;          \/\/ will point to the PixMap of myGWorld$/;"	m	struct:CvCapture_QT_Movie	file:
img	cap_dc1394_v2.cpp	/^    IplImage *img[NIMG];$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
img_convert_ctx	cap_ffmpeg_impl.hpp	/^    struct SwsContext *img_convert_ctx;$/;"	m	struct:CvCapture_FFMPEG	typeref:struct:CvCapture_FFMPEG::SwsContext
img_convert_ctx	cap_ffmpeg_impl.hpp	/^    struct SwsContext *img_convert_ctx;$/;"	m	struct:CvVideoWriter_FFMPEG	typeref:struct:CvVideoWriter_FFMPEG::SwsContext
impl	cap_ffmpeg_impl.hpp	/^    Impl* impl;$/;"	m	class:ImplMutex
imshow	cap_winrt_bridge.cpp	/^void VideoioBridge::imshow()$/;"	f	class:VideoioBridge
index	cap_cmu.cpp	/^    int  index;$/;"	m	class:CvCaptureCAM_CMU	file:
index	cap_msmf.cpp	/^    int index, width, height, fourcc;$/;"	m	class:CvCaptureCAM_MSMF	file:
indexList	cap_libv4l.cpp	/^static int indexList = 0;$/;"	v	file:
indexList	cap_v4l.cpp	/^static int indexList = 0;$/;"	v	file:
info	cap_gstreamer.cpp	/^    GstMapInfo*   info;$/;"	m	class:CvCapture_GStreamer	file:
init	cap_ffmpeg_impl.hpp	/^    void init() { pthread_mutex_init(&sl, 0); refcount = 1; }$/;"	f	struct:ImplMutex::Impl
init	cap_ffmpeg_impl.hpp	/^    void init() { pthread_spin_init(&sl, 0); refcount = 1; }$/;"	f	struct:ImplMutex::Impl
init	cap_ffmpeg_impl.hpp	/^    void init() { sl = OS_SPINLOCK_INIT; refcount = 1; }$/;"	f	struct:ImplMutex::Impl
init	cap_ffmpeg_impl.hpp	/^    void init()$/;"	f	struct:ImplMutex::Impl
init	cap_ffmpeg_impl.hpp	/^void CvCapture_FFMPEG::init()$/;"	f	class:CvCapture_FFMPEG
init	cap_ffmpeg_impl.hpp	/^void CvVideoWriter_FFMPEG::init()$/;"	f	class:CvVideoWriter_FFMPEG
init	cap_ffmpeg_impl.hpp	/^void ImplMutex::init()$/;"	f	class:ImplMutex
init	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::init ()$/;"	f	class:CvCaptureCAM_Giganetix
init	cap_gstreamer.cpp	/^    static void init()$/;"	f	class:gst_initializer
init	cap_gstreamer.cpp	/^void CvCapture_GStreamer::init()$/;"	f	class:CvCapture_GStreamer
init	cap_gstreamer.cpp	/^void CvVideoWriter_GStreamer::init()$/;"	f	class:CvVideoWriter_GStreamer
init	cap_unicap.cpp	/^  void init()$/;"	f	struct:CvCapture_Unicap
init	cap_vfw.cpp	/^void CvCaptureAVI_VFW::init()$/;"	f	class:CvCaptureAVI_VFW
init	cap_vfw.cpp	/^void CvCaptureCAM_VFW::init()$/;"	f	class:CvCaptureCAM_VFW
init	cap_vfw.cpp	/^void CvVideoWriter_VFW::init()$/;"	f	class:CvVideoWriter_VFW
init	cap_ximea.cpp	/^void CvCaptureCAM_XIMEA::init()$/;"	f	class:CvCaptureCAM_XIMEA
initContext	cap_gphoto2.cpp	/^void DigitalCameraCapture::initContext()$/;"	f	class:cv::gphoto2::DigitalCameraCapture
initDevice	cap_intelperc.cpp	/^bool IntelPerCStreamBase::initDevice(PXCSession *session)$/;"	f	class:cv::IntelPerCStreamBase
initDevice	cap_msmf.cpp	/^long videoDevice::initDevice()$/;"	f	class:__anon1::videoDevice
initDevice	cap_unicap.cpp	/^bool CvCapture_Unicap::initDevice() {$/;"	f	class:CvCapture_Unicap
initDevices	cap_msmf.cpp	/^long videoDevices::initDevices(IMFAttributes *pAttributes)$/;"	f	class:__anon1::videoDevices
initDevices	cap_msmf.cpp	/^long videoDevices::initDevices(_DeviceClass devClass)$/;"	f	class:__anon1::videoDevices
initGrabber	cap_winrt_video.cpp	/^bool Video::initGrabber(int device, int w, int h) {$/;"	f	class:Video
initImageGrabber	cap_msmf.cpp	/^HRESULT ImageGrabber::initImageGrabber(IMFMediaSource *pSource)$/;"	f	class:__anon1::ImageGrabber
initStream	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::initStream(PXCSession *session)$/;"	f	class:cv::IntelPerCStreamDepth
initStream	cap_intelperc.cpp	/^bool IntelPerCStreamImage::initStream(PXCSession *session)$/;"	f	class:cv::IntelPerCStreamImage
initStreamImpl	cap_intelperc.cpp	/^void IntelPerCStreamBase::initStreamImpl(PXCImage::ImageType type)$/;"	f	class:cv::IntelPerCStreamBase
initVidereRectifyMaps	cap_dc1394_v2.cpp	/^bool CvCaptureCAM_DC1394_v2_CPP::initVidereRectifyMaps( const char* info,$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
init_DBus	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::init_DBus(void)$/;"	f	class:CvCaptureCAM_OPEL_CPP
init_Semaphore	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::init_Semaphore(void)$/;"	f	class:CvCaptureCAM_OPEL_CPP
init_SharedMemorySpace	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::init_SharedMemorySpace()$/;"	f	class:CvCaptureCAM_OPEL_CPP
init_SharedMemorySpaceForProperty	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::init_SharedMemorySpaceForProperty()$/;"	f	class:CvCaptureCAM_OPEL_CPP
init_done	cap_v4l.cpp	/^static int init_done = 0;$/;"	v	file:
init_rectify	cap_dc1394_v2.cpp	/^    bool init_rectify;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
initial_value	cap_libv4l.cpp	/^  __s32 initial_value;$/;"	m	struct:v4l2_ctrl_range	file:
initiated	cap_msmf.cpp	/^    bool   initiated;$/;"	m	class:CvVideoWriter_MSMF	file:
inp	cap_libv4l.cpp	/^   struct v4l2_input inp;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_input	file:
inp	cap_v4l.cpp	/^   struct v4l2_input inp;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_input	file:
inputBufferMutex	cap_winrt_bridge.hpp	/^    std::mutex                  inputBufferMutex;   \/\/ input is double buffered$/;"	m	class:VideoioBridge
inputFormat	cap_msmf.cpp	/^    GUID   inputFormat;$/;"	m	class:CvVideoWriter_MSMF	file:
input_picture	cap_ffmpeg_impl.hpp	/^    AVFrame         * input_picture;$/;"	m	struct:CvVideoWriter_FFMPEG
input_pix_fmt	cap_ffmpeg_impl.hpp	/^    int               input_pix_fmt;$/;"	m	struct:CvVideoWriter_FFMPEG
input_pix_fmt	cap_gstreamer.cpp	/^    int input_pix_fmt;$/;"	m	class:CvVideoWriter_GStreamer	file:
iplHeader	cap_openni.cpp	/^        IplImage iplHeader;$/;"	m	struct:CvCapture_OpenNI::OutputMap	file:
iplHeader	cap_openni2.cpp	/^        IplImage iplHeader;$/;"	m	struct:CvCapture_OpenNI2::OutputMap	file:
isCCDRunning	cap_OPEL.cpp	/^	bool isCCDRunning;$/;"	m	struct:status	file:
isCircleBuffer	cap_openni.cpp	/^    bool isCircleBuffer;$/;"	m	class:ApproximateSyncGrabber	file:
isCircleBuffer	cap_openni.cpp	/^    bool isCircleBuffer;$/;"	m	class:CvCapture_OpenNI	file:
isCircleBuffer	cap_openni2.cpp	/^    bool isCircleBuffer;$/;"	m	class:CvCapture_OpenNI2	file:
isContextOpened	cap_openni.cpp	/^    bool isContextOpened;$/;"	m	class:CvCapture_OpenNI	file:
isContextOpened	cap_openni2.cpp	/^    bool isContextOpened;$/;"	m	class:CvCapture_OpenNI2	file:
isDepthFilled	cap_openni.cpp	/^        bool isDepthFilled;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizerBase	file:
isDeviceMediaSource	cap_msmf.cpp	/^bool videoDevice::isDeviceMediaSource()$/;"	f	class:__anon1::videoDevice
isDeviceMediaSource	cap_msmf.cpp	/^bool videoInput::isDeviceMediaSource(int deviceID)$/;"	f	class:__anon1::videoInput
isDeviceRawDataSource	cap_msmf.cpp	/^bool videoDevice::isDeviceRawDataSource()$/;"	f	class:__anon1::videoDevice
isDeviceRawDataSource	cap_msmf.cpp	/^bool videoInput::isDeviceRawDataSource(int deviceID)$/;"	f	class:__anon1::videoInput
isDeviceSetup	cap_dshow.cpp	/^bool videoInput::isDeviceSetup(int id) const$/;"	f	class:videoInput
isDeviceSetup	cap_msmf.cpp	/^bool videoDevice::isDeviceSetup()$/;"	f	class:__anon1::videoDevice
isDeviceSetup	cap_msmf.cpp	/^bool videoInput::isDeviceSetup(int deviceID)$/;"	f	class:__anon1::videoInput
isDevicesAcceable	cap_msmf.cpp	/^bool videoInput::isDevicesAcceable()$/;"	f	class:__anon1::videoInput
isFrameNew	cap_dshow.cpp	/^bool videoInput::isFrameNew(int id){$/;"	f	class:videoInput
isFrameNew	cap_msmf.cpp	/^bool videoDevice::isFrameNew()$/;"	f	class:__anon1::videoDevice
isFrameNew	cap_msmf.cpp	/^bool videoInput::isFrameNew(int deviceID)$/;"	f	class:__anon1::videoInput
isFrameNew	cap_winrt_capture.hpp	/^        std::atomic<bool>       isFrameNew;$/;"	m	class:cv::VideoCapture_WinRT
isImageFilled	cap_openni.cpp	/^        bool isImageFilled;$/;"	m	class:ApproximateSyncGrabber::ApproximateSynchronizerBase	file:
isNew	cap_msmf.cpp	/^bool RawImage::isNew()$/;"	f	class:__anon1::RawImage
isOpenCVInitialized	cap_OPEL.cpp	/^	bool isOpenCVInitialized;$/;"	m	struct:status	file:
isOpenCVRunning	cap_OPEL.cpp	/^	bool isOpenCVRunning;$/;"	m	struct:status	file:
isOpened	cap.cpp	/^bool VideoCapture::isOpened() const$/;"	f	class:cv::VideoCapture
isOpened	cap.cpp	/^bool VideoWriter::isOpened() const$/;"	f	class:cv::VideoWriter
isOpened	cap_dshow.cpp	/^bool VideoCapture_DShow::isOpened() const$/;"	f	class:cv::VideoCapture_DShow
isOpened	cap_gphoto2.cpp	/^bool DigitalCameraCapture::isOpened() const$/;"	f	class:cv::gphoto2::DigitalCameraCapture
isOpened	cap_intelperc.cpp	/^bool VideoCapture_IntelPerC::isOpened() const$/;"	f	class:cv::VideoCapture_IntelPerC
isOpened	cap_mjpeg_decoder.cpp	/^bool MjpegInputStream::isOpened() const$/;"	f	class:cv::MjpegInputStream
isOpened	cap_mjpeg_decoder.cpp	/^bool MotionJpegCapture::isOpened() const$/;"	f	class:cv::MotionJpegCapture
isOpened	cap_mjpeg_encoder.cpp	/^    bool isOpened() const { return m_f != 0; }$/;"	f	class:cv::mjpeg::BitStream
isOpened	cap_mjpeg_encoder.cpp	/^    bool isOpened() const { return strm.isOpened(); }$/;"	f	class:cv::mjpeg::MotionJpegWriter
isOpened	cap_msmf.cpp	/^    bool isOpened;$/;"	m	class:CvCaptureFile_MSMF	file:
isOpened	cap_openni.cpp	/^bool CvCapture_OpenNI::isOpened() const$/;"	f	class:CvCapture_OpenNI
isOpened	cap_openni2.cpp	/^bool CvCapture_OpenNI2::isOpened() const$/;"	f	class:CvCapture_OpenNI2
isOpened	cap_winrt_capture.cpp	/^    bool VideoCapture_WinRT::isOpened() const$/;"	f	class:cv::VideoCapture_WinRT
isPipelinePlaying	cap_gstreamer.cpp	/^bool CvCapture_GStreamer::isPipelinePlaying()$/;"	f	class:CvCapture_GStreamer
isPropertyChanged	cap_OPEL.cpp	/^	bool isPropertyChanged;$/;"	m	struct:property	file:
isRecInitialized	cap_OPEL.cpp	/^	bool isRecInitialized;$/;"	m	struct:status	file:
isRecRunning	cap_OPEL.cpp	/^	bool isRecRunning;$/;"	m	struct:status	file:
isRecRunning	cap_OPEL.cpp	/^static bool isRecRunning(status* st, sem_t* mutex)$/;"	f	file:
isRun	cap_openni.cpp	/^    bool isRun() const { return task != 0; }$/;"	f	class:ApproximateSyncGrabber
isSpinContinue	cap_openni.cpp	/^        virtual bool isSpinContinue() const$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizer
isSpinContinue	cap_openni.cpp	/^        virtual inline bool isSpinContinue() const { return true; }$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
isStarted	cap_winrt_video.cpp	/^bool Video::isStarted() {$/;"	f	class:Video
isValid	cap_intelperc.cpp	/^bool IntelPerCStreamBase::isValid()$/;"	f	class:cv::IntelPerCStreamBase
is_abs	cap_v4l.cpp	/^  int is_abs;$/;"	m	struct:__anon6	file:
is_apartment_aware	ppltasks_winrt.hpp	/^    bool is_apartment_aware() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
is_done	ppltasks_winrt.hpp	/^    bool is_done() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
is_task_cancellation_requested	ppltasks_winrt.hpp	/^inline bool __cdecl is_task_cancellation_requested()$/;"	f	namespace:Concurrency_winrt
is_v4l2_device	cap_libv4l.cpp	/^   int is_v4l2_device;$/;"	m	struct:CvCaptureCAM_V4L	file:
isoSpeed	cap_dc1394_v2.cpp	/^    int isoSpeed;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
item	cap_msmf.hpp	/^        T    item;$/;"	m	struct:List::Node
jflush	cap_mjpeg_encoder.cpp	/^    void jflush(unsigned currval, int bitIdx)$/;"	f	class:cv::mjpeg::BitStream
jpegHeader	cap_mjpeg_encoder.cpp	/^static const char jpegHeader[] =$/;"	m	namespace:cv::mjpeg	file:
jpegTableK1_T	cap_mjpeg_encoder.cpp	/^static const uchar jpegTableK1_T[] =$/;"	m	namespace:cv::mjpeg	file:
jpegTableK2_T	cap_mjpeg_encoder.cpp	/^static const uchar jpegTableK2_T[] =$/;"	m	namespace:cv::mjpeg	file:
jpegTableK3	cap_mjpeg_encoder.cpp	/^static const uchar jpegTableK3[] =$/;"	m	namespace:cv::mjpeg	file:
jpegTableK4	cap_mjpeg_encoder.cpp	/^static const uchar jpegTableK4[] =$/;"	m	namespace:cv::mjpeg	file:
jpegTableK5	cap_mjpeg_encoder.cpp	/^static const uchar jpegTableK5[] =$/;"	m	namespace:cv::mjpeg	file:
jpegTableK6	cap_mjpeg_encoder.cpp	/^static const uchar jpegTableK6[] =$/;"	m	namespace:cv::mjpeg	file:
jput	cap_mjpeg_encoder.cpp	/^    void jput(unsigned currval)$/;"	f	class:cv::mjpeg::BitStream
jputShort	cap_mjpeg_encoder.cpp	/^    void jputShort(int val)$/;"	f	class:cv::mjpeg::BitStream
lastFlush	cap_gphoto2.cpp	/^    mutable std::string lastFlush; \/\/ CV_CAP_PROP_GPHOTO2_FLUSH_MSGS$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
latestBufferLength	cap_dshow.cpp	/^    int latestBufferLength;$/;"	m	class:SampleGrabberCallback	file:
left	cap_mjpeg_decoder.cpp	/^        short int left;$/;"	m	struct:cv::AviStreamHeader::__anon3	file:
len	cap_v4l.cpp	/^  int len;$/;"	m	struct:__anon6	file:
length	cap_images.cpp	/^    unsigned length; \/\/ length of sequence$/;"	m	class:CvCapture_Images	file:
length	cap_libv4l.cpp	/^  size_t  length;$/;"	m	struct:buffer	file:
length	cap_v4l.cpp	/^  size_t  length;$/;"	m	struct:buffer	file:
lineDelimiter	cap_gphoto2.cpp	/^    static const char * lineDelimiter;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
lineDelimiter	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::lineDelimiter = "\\n";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
listDevices	cap_dshow.cpp	/^int videoInput::listDevices(bool silent){$/;"	f	class:videoInput
listDevices	cap_msmf.cpp	/^unsigned int videoInput::listDevices(bool silent)$/;"	f	class:__anon1::videoInput
listDevices	cap_winrt_video.cpp	/^bool Video::listDevices() {$/;"	f	class:Video
listDevicesTask	cap_winrt_video.cpp	/^bool Video::listDevicesTask() {$/;"	f	class:Video
lock	cap_ffmpeg_impl.hpp	/^    void lock() { EnterCriticalSection(&cs); }$/;"	f	struct:ImplMutex::Impl
lock	cap_ffmpeg_impl.hpp	/^    void lock() { OSSpinLockLock(&sl); }$/;"	f	struct:ImplMutex::Impl
lock	cap_ffmpeg_impl.hpp	/^    void lock() { pthread_mutex_lock(&sl); }$/;"	f	struct:ImplMutex::Impl
lock	cap_ffmpeg_impl.hpp	/^    void lock() { pthread_spin_lock(&sl); }$/;"	f	struct:ImplMutex::Impl
lock	cap_ffmpeg_impl.hpp	/^void ImplMutex::lock() { impl->lock(); }$/;"	f	class:ImplMutex
lock	cap_msmf.cpp	/^    Concurrency::critical_section lock;$/;"	m	class:CvCaptureCAM_MSMF	file:
m_IsShutdown	cap_msmf.hpp	/^    bool                        m_IsShutdown;$/;"	m	class:MediaSink
m_IsShutdown	cap_msmf.hpp	/^    bool m_IsShutdown;                \/\/ Flag to indicate if Shutdown() method was called.$/;"	m	class:StreamSink
m_StartTime	cap_msmf.hpp	/^    MFTIME                      m_StartTime;                 \/\/ Presentation time when the clock started.$/;"	m	class:StreamSink
m_active	cap_giganetix.cpp	/^    bool                  m_active;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_anchor	cap_msmf.hpp	/^    Node    m_anchor;  \/\/ Anchor node for the linked list.$/;"	m	class:List
m_api	cap_giganetix.cpp	/^    gige::IGigEVisionAPI  m_api;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_api_on	cap_giganetix.cpp	/^    bool                  m_api_on;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_bConnected	cap_msmf.hpp	/^    bool m_bConnected;$/;"	m	class:StreamSink
m_buf	cap_mjpeg_encoder.cpp	/^    std::vector<uchar> m_buf;$/;"	m	class:cv::mjpeg::BitStream	file:
m_cRef	cap_msmf.cpp	/^    long m_cRef;$/;"	m	class:__anon1::ImageGrabberCallback	file:
m_cRef	cap_msmf.hpp	/^    long m_cRef;$/;"	m	class:MediaSink
m_cRef	cap_msmf.hpp	/^    long m_cRef;$/;"	m	class:StreamSink
m_capture	cap_winrt_video.hpp	/^    Platform::Agile<Windows::Media::Capture::MediaCapture> m_capture;$/;"	m	class:Video
m_contextOpened	cap_intelperc.hpp	/^    bool m_contextOpened;$/;"	m	class:cv::VideoCapture_IntelPerC
m_count	cap_msmf.hpp	/^    DWORD   m_count;   \/\/ Number of items in the list.$/;"	m	class:List
m_critSec	cap_msmf.hpp	/^    CRITICAL_SECTION            m_critSec;$/;"	m	class:MediaSink
m_critSec	cap_msmf.hpp	/^    CRITICAL_SECTION m_critSec;$/;"	m	class:StreamSink
m_current	cap_mjpeg_encoder.cpp	/^    uchar*  m_current;$/;"	m	class:cv::mjpeg::BitStream	file:
m_current_frame	cap_mjpeg_decoder.cpp	/^    Mat              m_current_frame;$/;"	m	class:cv::MotionJpegCapture	file:
m_depthStream	cap_intelperc.hpp	/^    IntelPerCStreamDepth m_depthStream;$/;"	m	class:cv::VideoCapture_IntelPerC
m_device	cap_giganetix.cpp	/^    gige::IDevice         m_device;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_device	cap_intelperc.hpp	/^    mutable PXCSmartPtr<PXCCapture::Device> m_device;$/;"	m	class:cv::IntelPerCStreamBase
m_deviceID	cap_winrt_video.hpp	/^    int						m_deviceID;$/;"	m	class:Video
m_devices	cap_winrt_video.hpp	/^    Platform::Agile<Windows::Devices::Enumeration::DeviceInformationCollection> m_devices;$/;"	m	class:Video
m_end	cap_mjpeg_encoder.cpp	/^    uchar*  m_end;$/;"	m	class:cv::mjpeg::BitStream	file:
m_f	cap_mjpeg_decoder.cpp	/^    FILE*   m_f;$/;"	m	class:cv::MjpegInputStream	file:
m_f	cap_mjpeg_encoder.cpp	/^    FILE*   m_f;$/;"	m	class:cv::mjpeg::BitStream	file:
m_fGetStartTimeFromSample	cap_msmf.hpp	/^    bool                        m_fGetStartTimeFromSample;$/;"	m	class:StreamSink
m_fWaitingForFirstSample	cap_msmf.hpp	/^    bool                        m_fWaitingForFirstSample;$/;"	m	class:StreamSink
m_file_stream	cap_mjpeg_decoder.cpp	/^    MjpegInputStream m_file_stream;$/;"	m	class:cv::MotionJpegCapture	file:
m_four_cc	cap_mjpeg_decoder.cpp	/^    uint32_t m_four_cc;$/;"	m	struct:cv::RiffChunk	file:
m_fourcc	cap_dshow.hpp	/^    int m_index, m_width, m_height, m_fourcc;$/;"	m	class:cv::VideoCapture_DShow
m_fps	cap_mjpeg_decoder.cpp	/^    double           m_fps;$/;"	m	class:cv::MotionJpegCapture	file:
m_fps	cap_mjpeg_decoder.cpp	/^    double     m_fps;$/;"	m	class:cv::AviMjpegStream	file:
m_frameGrabber	cap_winrt_video.hpp	/^    ::Media::CaptureFrameGrabber^ m_frameGrabber;$/;"	m	class:Video
m_frameIdx	cap_intelperc.hpp	/^    int m_frameIdx;$/;"	m	class:cv::IntelPerCStreamBase
m_frame_height	cap_mjpeg_decoder.cpp	/^    uint32_t         m_frame_height;$/;"	m	class:cv::MotionJpegCapture	file:
m_frame_iterator	cap_mjpeg_decoder.cpp	/^    frame_iterator   m_frame_iterator;$/;"	m	class:cv::MotionJpegCapture	file:
m_frame_list	cap_mjpeg_decoder.cpp	/^    frame_list m_frame_list;$/;"	m	class:cv::AviMjpegStream	file:
m_frame_width	cap_mjpeg_decoder.cpp	/^    uint32_t         m_frame_width;$/;"	m	class:cv::MotionJpegCapture	file:
m_guiCurrentSubtype	cap_msmf.hpp	/^    GUID                        m_guiCurrentSubtype;$/;"	m	class:StreamSink
m_height	cap_dshow.hpp	/^    int m_index, m_width, m_height, m_fourcc;$/;"	m	class:cv::VideoCapture_DShow
m_height	cap_mjpeg_decoder.cpp	/^    uint32_t   m_height;$/;"	m	class:cv::AviMjpegStream	file:
m_heightSet	cap_dshow.hpp	/^    int m_widthSet, m_heightSet;$/;"	m	class:cv::VideoCapture_DShow
m_imageHeightInPixels	cap_msmf.hpp	/^    UINT32                      m_imageHeightInPixels;$/;"	m	class:StreamSink
m_imageStream	cap_intelperc.hpp	/^    IntelPerCStreamImage m_imageStream;$/;"	m	class:cv::VideoCapture_IntelPerC
m_imageWidthInPixels	cap_msmf.hpp	/^    UINT32                      m_imageWidthInPixels;$/;"	m	class:StreamSink
m_index	cap_dshow.hpp	/^    int m_index, m_width, m_height, m_fourcc;$/;"	m	class:cv::VideoCapture_DShow
m_is_first_frame	cap_mjpeg_decoder.cpp	/^    bool             m_is_first_frame;$/;"	m	class:cv::MotionJpegCapture	file:
m_is_indx_present	cap_mjpeg_decoder.cpp	/^    bool       m_is_indx_present;$/;"	m	class:cv::AviMjpegStream	file:
m_is_opened	cap_mjpeg_encoder.cpp	/^    bool    m_is_opened;$/;"	m	class:cv::mjpeg::BitStream	file:
m_is_valid	cap_mjpeg_decoder.cpp	/^    bool    m_is_valid;$/;"	m	class:cv::MjpegInputStream	file:
m_list_type_cc	cap_mjpeg_decoder.cpp	/^    uint32_t m_list_type_cc;$/;"	m	struct:cv::RiffList	file:
m_llStartTime	cap_msmf.hpp	/^    LONGLONG                        m_llStartTime;$/;"	m	class:MediaSink
m_mjpeg_frames	cap_mjpeg_decoder.cpp	/^    frame_list       m_mjpeg_frames;$/;"	m	class:cv::MotionJpegCapture	file:
m_monocrome	cap_giganetix.cpp	/^    bool      m_monocrome;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_movi_end	cap_mjpeg_decoder.cpp	/^    uint64_t   m_movi_end;$/;"	m	class:cv::AviMjpegStream	file:
m_movi_start	cap_mjpeg_decoder.cpp	/^    uint64_t   m_movi_start;$/;"	m	class:cv::AviMjpegStream	file:
m_pParent	cap_msmf.hpp	/^    IMFAttributes*        m_pParent;$/;"	m	class:StreamSink
m_pos	cap_mjpeg_encoder.cpp	/^    size_t  m_pos;$/;"	m	class:cv::mjpeg::BitStream	file:
m_profileIdx	cap_intelperc.hpp	/^    int m_profileIdx;$/;"	m	class:cv::IntelPerCStreamBase
m_profiles	cap_intelperc.hpp	/^    std::vector<PXCCapture::VideoStream::ProfileInfo> m_profiles;$/;"	m	class:cv::IntelPerCStreamBase
m_pxcImage	cap_intelperc.hpp	/^    PXCSmartPtr<PXCImage> m_pxcImage;$/;"	m	class:cv::IntelPerCStreamBase
m_rawImagePixelType	cap_giganetix.cpp	/^    UINT32    m_rawImagePixelType;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_raw_image	cap_giganetix.cpp	/^    IplImage* m_raw_image;$/;"	m	class:CvCaptureCAM_Giganetix	file:
m_riff_or_list_cc	cap_mjpeg_decoder.cpp	/^    uint32_t m_riff_or_list_cc;$/;"	m	struct:cv::RiffList	file:
m_session	cap_intelperc.hpp	/^    PXCSmartPtr<PXCSession> m_session;$/;"	m	class:cv::VideoCapture_IntelPerC
m_size	cap_mjpeg_decoder.cpp	/^    uint32_t m_size;$/;"	m	struct:cv::RiffChunk	file:
m_size	cap_mjpeg_decoder.cpp	/^    uint32_t m_size;$/;"	m	struct:cv::RiffList	file:
m_spClock	cap_msmf.hpp	/^    _ComPtr<IMFPresentationClock>    m_spClock;$/;"	m	class:MediaSink
m_spCurrentType	cap_msmf.hpp	/^    _ComPtr<IMFMediaType>        m_spCurrentType;$/;"	m	class:StreamSink
m_spEventQueue	cap_msmf.hpp	/^    _ComPtr<IMFMediaEventQueue>  m_spEventQueue;              \/\/ Event queue$/;"	m	class:StreamSink
m_spFTM	cap_msmf.hpp	/^    _ComPtr<IUnknown>            m_spFTM;$/;"	m	class:StreamSink
m_start	cap_mjpeg_encoder.cpp	/^    uchar*  m_start;$/;"	m	class:cv::mjpeg::BitStream	file:
m_state	cap_msmf.hpp	/^    State                       m_state;$/;"	m	class:StreamSink
m_stream	cap_intelperc.hpp	/^    PXCSmartPtr<PXCCapture::VideoStream> m_stream;$/;"	m	class:cv::IntelPerCStreamBase
m_stream_id	cap_mjpeg_decoder.cpp	/^    uint32_t   m_stream_id;$/;"	m	class:cv::AviMjpegStream	file:
m_streams	cap_msmf.hpp	/^    ComPtrList<IMFStreamSink>    m_streams;$/;"	m	class:MediaSink
m_timeStamp	cap_intelperc.hpp	/^    double m_timeStamp;$/;"	m	class:cv::IntelPerCStreamBase
m_timeStampStartNS	cap_intelperc.hpp	/^    pxcU64 m_timeStampStartNS;$/;"	m	class:cv::IntelPerCStreamBase
m_token	cap_msmf.hpp	/^    EventRegistrationToken m_token;$/;"	m	class:StreamSink
m_width	cap_dshow.hpp	/^    int m_index, m_width, m_height, m_fourcc;$/;"	m	class:cv::VideoCapture_DShow
m_width	cap_mjpeg_decoder.cpp	/^    uint32_t   m_width;$/;"	m	class:cv::AviMjpegStream	file:
m_widthSet	cap_dshow.hpp	/^    int m_widthSet, m_heightSet;$/;"	m	class:cv::VideoCapture_DShow
mainLoop	cap_OPEL.cpp	/^void CvCaptureCAM_OPEL_CPP::mainLoop(void)$/;"	f	class:CvCaptureCAM_OPEL_CPP
mainloop_v4l2	cap_libv4l.cpp	/^static void mainloop_v4l2(CvCaptureCAM_V4L* capture) {$/;"	f	file:
mainloop_v4l2	cap_v4l.cpp	/^static void mainloop_v4l2(CvCaptureCAM_V4L* capture) {$/;"	f	file:
make_exception_ptr	ppltasks_winrt.hpp	/^    template<class _E> exception_ptr make_exception_ptr(_E _Except)$/;"	f	namespace:std
maps	cap_dc1394_v2.cpp	/^    IplImage *maps[NIMG][2];$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
mat	cap_openni.cpp	/^        cv::Mat mat;$/;"	m	struct:CvCapture_OpenNI::OutputMap	file:
mat	cap_openni2.cpp	/^        cv::Mat mat;$/;"	m	struct:CvCapture_OpenNI2::OutputMap	file:
max	precomp.hpp	75;"	d
maxBufferSize	cap_openni.cpp	/^    int maxBufferSize, maxTimeDuration; \/\/ for approx sync$/;"	m	class:CvCapture_OpenNI	file:
maxBufferSize	cap_openni.cpp	/^    int maxBufferSize;$/;"	m	class:ApproximateSyncGrabber	file:
maxBufferSize	cap_openni2.cpp	/^    int maxBufferSize, maxTimeDuration; \/\/ for approx sync$/;"	m	class:CvCapture_OpenNI2	file:
maxTimeDuration	cap_openni.cpp	/^    int maxBufferSize, maxTimeDuration; \/\/ for approx sync$/;"	m	class:CvCapture_OpenNI	file:
maxTimeDuration	cap_openni.cpp	/^    int maxTimeDuration;$/;"	m	class:ApproximateSyncGrabber	file:
maxTimeDuration	cap_openni2.cpp	/^    int maxBufferSize, maxTimeDuration; \/\/ for approx sync$/;"	m	class:CvCapture_OpenNI2	file:
maximum	cap_libv4l.cpp	/^  __s32 maximum;$/;"	m	struct:v4l2_ctrl_range	file:
mediaSubtypes	cap_dshow.cpp	/^        GUID mediaSubtypes[VI_NUM_TYPES];$/;"	m	class:videoInput	file:
memoryBuffer	cap_libv4l.cpp	/^    struct video_mbuf       memoryBuffer;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_mbuf	file:
memoryBuffer	cap_v4l.cpp	/^    struct video_mbuf       memoryBuffer;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_mbuf	file:
memoryMap	cap_libv4l.cpp	/^    char *memoryMap;$/;"	m	struct:CvCaptureCAM_V4L	file:
memoryMap	cap_v4l.cpp	/^    char *memoryMap;$/;"	m	struct:CvCaptureCAM_V4L	file:
message	cap_gphoto2.cpp	/^void DigitalCameraCapture::message(MsgType msgType, const char * msg,$/;"	f	class:cv::gphoto2::DigitalCameraCapture
method	cap_gphoto2.cpp	/^    const char * method;$/;"	m	class:cv::gphoto2::GPhoto2Exception	file:
min	precomp.hpp	74;"	d
minimum	cap_libv4l.cpp	/^  __s32 minimum;$/;"	m	struct:v4l2_ctrl_range	file:
mjpeg	cap_mjpeg_encoder.cpp	/^namespace mjpeg$/;"	n	namespace:cv	file:
mjpeg_to_rgb24	cap_v4l.cpp	/^mjpeg_to_rgb24 (int width, int height,$/;"	f	file:
mmaps	cap_libv4l.cpp	/^    struct video_mmap       *mmaps;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_mmap	file:
mmaps	cap_v4l.cpp	/^    struct video_mmap       *mmaps;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::video_mmap	file:
mode	cap_OPEL.cpp	/^					int mode;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
mode	cap_cmu.cpp	/^    int  mode;   \/\/ 0-7$/;"	m	class:CvCaptureCAM_CMU	file:
mode	cap_dc1394.cpp	/^    int mode;$/;"	m	struct:CvCaptureCAM_DC1394	file:
mode	cap_libv4l.cpp	/^    int mode;$/;"	m	struct:CvCaptureCAM_V4L	file:
move_411_block	cap_v4l.cpp	/^move_411_block(int yTL, int yTR, int yBL, int yBR, int u, int v,$/;"	f	file:
move_420_block	cap_v4l.cpp	/^move_420_block(int yTL, int yTR, int yBL, int yBR, int u, int v,$/;"	f	file:
moviPointer	cap_mjpeg_encoder.cpp	/^    size_t moviPointer;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
movie	cap_qt.cpp	/^    Movie movie;$/;"	m	struct:CvVideoWriter_QT	file:
movie_start_time	cap_qt.cpp	/^    TimeValue  movie_start_time;   \/\/ movies can start at arbitrary times$/;"	m	struct:CvCapture_QT_Movie	file:
msgsBuffer	cap_gphoto2.cpp	/^    mutable std::ostringstream msgsBuffer; \/\/ CV_CAP_PROP_GPHOTO2_FLUSH_MSGS$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
myGWorld	cap_qt.cpp	/^        GWorldPtr          myGWorld;$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
myGWorld	cap_qt.cpp	/^    GWorldPtr  myGWorld;           \/\/ we render into an offscreen GWorld$/;"	m	struct:CvCapture_QT_Movie	file:
myID	cap_dshow.cpp	/^        int  myID;$/;"	m	class:videoDevice	file:
myMovie	cap_qt.cpp	/^    Movie      myMovie;            \/\/ movie handle$/;"	m	struct:CvCapture_QT_Movie	file:
nDMABufs	cap_dc1394_v2.cpp	/^    int nDMABufs;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
nDeviceName	cap_dshow.cpp	/^        char  nDeviceName[255];$/;"	m	class:videoDevice	file:
nFramesForReconnect	cap_dshow.cpp	/^        int  nFramesForReconnect;$/;"	m	class:videoDevice	file:
nFramesRunning	cap_dshow.cpp	/^        unsigned long nFramesRunning;$/;"	m	class:videoDevice	file:
n_buffer	cap_OPEL.cpp	/^	int n_buffer;$/;"	m	struct:property	file:
n_buffers	cap_libv4l.cpp	/^static unsigned int n_buffers = 0;$/;"	v	file:
n_buffers	cap_v4l.cpp	/^static unsigned int n_buffers = 0;$/;"	v	file:
new	ppltasks_winrt.hpp	124;"	d
newFrame	cap_dshow.cpp	/^    bool newFrame;$/;"	m	class:SampleGrabberCallback	file:
newPad	cap_gstreamer.cpp	/^void CvCapture_GStreamer::newPad(GstElement * \/*elem*\/,$/;"	f	class:CvCapture_GStreamer
next	cap_msmf.hpp	/^        Node *next;$/;"	m	struct:List::Node
next_frame_number	cap_qt.cpp	/^    long       next_frame_number;$/;"	m	struct:CvCapture_QT_Movie	file:
next_frame_time	cap_qt.cpp	/^    long       next_frame_time;$/;"	m	struct:CvCapture_QT_Movie	file:
nimages	cap_dc1394_v2.cpp	/^    int nimages;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
noOfWidgets	cap_gphoto2.cpp	/^    int noOfWidgets;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
noSampleValue	cap_openni.cpp	/^    XnUInt64 noSampleValue;$/;"	m	class:CvCapture_OpenNI	file:
noSampleValue	cap_openni2.cpp	/^    int noSampleValue;$/;"	m	class:CvCapture_OpenNI2	file:
numBytes	cap_dshow.cpp	/^    int numBytes;$/;"	m	class:SampleGrabberCallback	file:
numCameras	cap_dc1394.cpp	/^static int numCameras = 0;$/;"	v	file:
numCameras	cap_libv4l.cpp	/^static int numCameras = 0;$/;"	v	file:
numCameras	cap_v4l.cpp	/^static int numCameras = 0;$/;"	v	file:
numDevices	cap_gphoto2.cpp	/^    int numDevices;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
numDevices	cap_ximea.cpp	/^    DWORD     numDevices;$/;"	m	class:CvCaptureCAM_XIMEA	file:
numPorts	cap_dc1394.cpp	/^static int numPorts = -1;$/;"	v	file:
numStream	cap_openni2.cpp	/^    int numStream;$/;"	m	class:CvCapture_OpenNI2	file:
num_frames	cap_gstreamer.cpp	/^    int num_frames;$/;"	m	class:CvVideoWriter_GStreamer	file:
number_of_frames	cap_qt.cpp	/^        long               number_of_frames;$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
number_of_frames	cap_qt.cpp	/^    long       number_of_frames;   \/\/ duration in frames$/;"	m	struct:CvCapture_QT_Movie	file:
oc	cap_ffmpeg_impl.hpp	/^    AVFormatContext * oc;$/;"	m	struct:CvVideoWriter_FFMPEG
oc_	cap_ffmpeg_impl.hpp	/^    AVFormatContext* oc_;$/;"	m	struct:OutputMediaStream_FFMPEG
ok	cap_ffmpeg_impl.hpp	/^    bool              ok;$/;"	m	struct:CvVideoWriter_FFMPEG
open	cap.cpp	/^bool VideoCapture::open(const String& filename)$/;"	f	class:cv::VideoCapture
open	cap.cpp	/^bool VideoCapture::open(int device)$/;"	f	class:cv::VideoCapture
open	cap.cpp	/^bool VideoWriter::open(const String& filename, int _fourcc, double fps, Size frameSize, bool isColor)$/;"	f	class:cv::VideoWriter
open	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::open(int index)$/;"	f	class:CvCaptureCAM_OPEL_CPP
open	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::open( int _index )$/;"	f	class:CvCaptureCAM_CMU
open	cap_dc1394.cpp	/^bool CvCaptureCAM_DC1394_CPP::open( int index )$/;"	f	class:CvCaptureCAM_DC1394_CPP
open	cap_dc1394_v2.cpp	/^bool CvCaptureCAM_DC1394_v2_CPP::open(int index)$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
open	cap_dshow.cpp	/^void VideoCapture_DShow::open(int index)$/;"	f	class:cv::VideoCapture_DShow
open	cap_ffmpeg.cpp	/^    virtual bool open( const char* filename )$/;"	f	class:CvCapture_FFMPEG_proxy
open	cap_ffmpeg.cpp	/^    virtual bool open( const char* filename, int fourcc, double fps, CvSize frameSize, bool isColor )$/;"	f	class:CvVideoWriter_FFMPEG_proxy
open	cap_ffmpeg_impl.hpp	/^bool CvCapture_FFMPEG::open( const char* _filename )$/;"	f	class:CvCapture_FFMPEG
open	cap_ffmpeg_impl.hpp	/^bool CvVideoWriter_FFMPEG::open( const char * filename, int fourcc,$/;"	f	class:CvVideoWriter_FFMPEG
open	cap_ffmpeg_impl.hpp	/^bool InputMediaStream_FFMPEG::open(const char* fileName, int* codec, int* chroma_format, int* width, int* height)$/;"	f	class:InputMediaStream_FFMPEG
open	cap_ffmpeg_impl.hpp	/^bool OutputMediaStream_FFMPEG::open(const char* fileName, int width, int height, double fps)$/;"	f	class:OutputMediaStream_FFMPEG
open	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::open( int index )$/;"	f	class:CvCaptureCAM_Giganetix
open	cap_gphoto2.cpp	/^bool DigitalCameraCapture::open(int index)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
open	cap_gstreamer.cpp	/^bool CvCapture_GStreamer::open( int type, const char* filename )$/;"	f	class:CvCapture_GStreamer
open	cap_gstreamer.cpp	/^bool CvVideoWriter_GStreamer::open( const char * filename, int fourcc,$/;"	f	class:CvVideoWriter_GStreamer
open	cap_images.cpp	/^bool CvCapture_Images::open(const char * _filename)$/;"	f	class:CvCapture_Images
open	cap_images.cpp	/^bool CvVideoWriter_Images::open( const char* _filename )$/;"	f	class:CvVideoWriter_Images
open	cap_libv4l.cpp	/^bool CvCaptureCAM_V4L_CPP::open( int index )$/;"	f	class:CvCaptureCAM_V4L_CPP
open	cap_mjpeg_decoder.cpp	/^bool MjpegInputStream::open(const String& filename)$/;"	f	class:cv::MjpegInputStream
open	cap_mjpeg_decoder.cpp	/^bool MotionJpegCapture::open(const String& filename)$/;"	f	class:cv::MotionJpegCapture
open	cap_mjpeg_encoder.cpp	/^    bool open(const String& filename)$/;"	f	class:cv::mjpeg::BitStream
open	cap_mjpeg_encoder.cpp	/^    bool open(const String& filename, double fps, Size size, bool iscolor)$/;"	f	class:cv::mjpeg::MotionJpegWriter
open	cap_msmf.cpp	/^bool CvCaptureCAM_MSMF::open( int _index )$/;"	f	class:CvCaptureCAM_MSMF
open	cap_msmf.cpp	/^bool CvCaptureFile_MSMF::open(const char* filename)$/;"	f	class:CvCaptureFile_MSMF
open	cap_msmf.cpp	/^bool CvVideoWriter_MSMF::open( const char* filename, int fourcc,$/;"	f	class:CvVideoWriter_MSMF
open	cap_pvapi.cpp	/^bool CvCaptureCAM_PvAPI::open( int index )$/;"	f	class:CvCaptureCAM_PvAPI
open	cap_qt.cpp	/^bool CvCapture_QT_Cam_CPP::open( int index )$/;"	f	class:CvCapture_QT_Cam_CPP
open	cap_qt.cpp	/^bool CvCapture_QT_Movie_CPP::open( const char* filename )$/;"	f	class:CvCapture_QT_Movie_CPP
open	cap_qt.cpp	/^bool CvVideoWriter_QT_CPP::open( const char* filename, int fourcc,$/;"	f	class:CvVideoWriter_QT_CPP
open	cap_unicap.cpp	/^bool CvCapture_Unicap::open(int index)$/;"	f	class:CvCapture_Unicap
open	cap_v4l.cpp	/^bool CvCaptureCAM_V4L_CPP::open( int index )$/;"	f	class:CvCaptureCAM_V4L_CPP
open	cap_vfw.cpp	/^bool CvCaptureAVI_VFW::open( const char* filename )$/;"	f	class:CvCaptureAVI_VFW
open	cap_vfw.cpp	/^bool CvCaptureCAM_VFW::open( int wIndex )$/;"	f	class:CvCaptureCAM_VFW
open	cap_vfw.cpp	/^bool CvVideoWriter_VFW::open( const char* filename, int _fourcc, double _fps, CvSize frameSize, bool isColor )$/;"	f	class:CvVideoWriter_VFW
open	cap_ximea.cpp	/^bool CvCaptureCAM_XIMEA::open( int wIndex )$/;"	f	class:CvCaptureCAM_XIMEA
open	cap_xine.cpp	/^bool CvCaptureAVI_XINE_CPP::open( const char* filename )$/;"	f	class:CvCaptureAVI_XINE_CPP
openCamera	cap_winrt_bridge.cpp	/^bool VideoioBridge::openCamera()$/;"	f	class:VideoioBridge
openTask	cap_msmf.cpp	/^    DEFINE_TASK<bool> openTask;$/;"	m	class:CvCaptureCAM_MSMF	file:
open_device	cap_OPEL.cpp	/^static void open_device(int* fd)$/;"	f	file:
opened	cap_gphoto2.cpp	/^    bool opened;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
operator !	cap_msmf.hpp	/^    bool operator!() const throw()$/;"	f	class:ComPtr
operator !=	cap_msmf.cpp	/^inline bool operator!=(Guid __aArg, Guid __bArg)$/;"	f
operator !=	cap_msmf.hpp	/^        bool operator!=(const POSITION &p) const$/;"	f	class:List::POSITION
operator !=	cap_msmf.hpp	/^    bool operator!=(_In_opt_ T* pT) const throw()$/;"	f	class:ComPtr
operator !=	ppltasks_winrt.hpp	/^    bool operator!=(const task<_ReturnType>& _Rhs) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
operator !=	ppltasks_winrt.hpp	/^    bool operator!=(const task<void>& _Rhs) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
operator &	cap_msmf.hpp	/^    T** operator&() throw()$/;"	f	class:ComPtr
operator &&	ppltasks_winrt.hpp	/^inline task<void> operator&&(const task<void> & _Lhs, const task<void> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
operator &&	ppltasks_winrt.hpp	/^task<std::vector<_ReturnType>> operator&&(const task<_ReturnType> & _Lhs, const task<_ReturnType> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
operator &&	ppltasks_winrt.hpp	/^task<std::vector<_ReturnType>> operator&&(const task<_ReturnType> & _Lhs, const task<std::vector<_ReturnType>> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
operator &&	ppltasks_winrt.hpp	/^task<std::vector<_ReturnType>> operator&&(const task<std::vector<_ReturnType>> & _Lhs, const task<_ReturnType> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
operator &&	ppltasks_winrt.hpp	/^task<std::vector<_ReturnType>> operator&&(const task<std::vector<_ReturnType>> & _Lhs, const task<std::vector<_ReturnType>> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam
operator ()	cap.cpp	/^template<> void DefaultDeleter<CvCapture>::operator ()(CvCapture* obj) const$/;"	f	class:cv::DefaultDeleter
operator ()	cap.cpp	/^template<> void DefaultDeleter<CvVideoWriter>::operator ()(CvVideoWriter* obj) const$/;"	f	class:cv::DefaultDeleter
operator ()	cap_msmf.hpp	/^        HRESULT operator()(IMFStreamSink *pStream) const$/;"	f	class:MediaSink::ShutdownFunc
operator ()	cap_msmf.hpp	/^        HRESULT operator()(IMFStreamSink *pStream) const$/;"	f	class:MediaSink::StartFunc
operator ()	cap_msmf.hpp	/^        HRESULT operator()(IMFStreamSink *pStream) const$/;"	f	class:MediaSink::StopFunc
operator ()	cap_msmf.hpp	/^    void operator()(IUnknown *p)$/;"	f	class:ComAutoRelease
operator ()	cap_msmf.hpp	/^    void operator()(T& \/*t*\/)$/;"	f	struct:NoOp
operator ()	cap_msmf.hpp	/^    void operator()(void *p)$/;"	f	class:MemDelete
operator ->	agile_wrl.hpp	/^                T* operator->()$/;"	f	class:Details::AgileHelper
operator ->	cap_msmf.hpp	/^    T* operator->() const throw()$/;"	f	class:ComPtr
operator <	cap_msmf.cpp	/^inline bool operator<(Guid __aArg, Guid __bArg)$/;"	f
operator <<	cap.cpp	/^VideoWriter& VideoWriter::operator << (const Mat& image)$/;"	f	class:cv::VideoWriter
operator <<	cap_gphoto2.cpp	/^    friend std::ostream & operator<<(std::ostream & ostream,$/;"	f	class:cv::gphoto2::GPhoto2Exception
operator =	agile_wrl.hpp	/^            AgileHelper operator=(AgileHelper&& other)$/;"	f	class:Details::AgileHelper
operator =	ppltasks_winrt.hpp	/^    task& operator=(const task& _Other)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
operator =	ppltasks_winrt.hpp	/^    task& operator=(task&& _Other)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
operator ==	cap_msmf.cpp	/^inline bool operator==(Guid __aArg, Guid __bArg)$/;"	f
operator ==	cap_msmf.hpp	/^        bool operator==(const POSITION &p) const$/;"	f	class:List::POSITION
operator ==	cap_msmf.hpp	/^    bool operator==(_In_opt_ T* pT) const throw()$/;"	f	class:ComPtr
operator ==	ppltasks_winrt.hpp	/^    bool operator==(const task<_ReturnType>& _Rhs) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
operator ==	ppltasks_winrt.hpp	/^    bool operator==(const task<void>& _Rhs) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
operator >>	cap.cpp	/^VideoCapture& VideoCapture::operator >> (Mat& image)$/;"	f	class:cv::VideoCapture
operator >>	cap.cpp	/^VideoCapture& VideoCapture::operator >> (UMat& image)$/;"	f	class:cv::VideoCapture
operator >>	cap_mjpeg_decoder.cpp	/^MjpegInputStream& operator >> (MjpegInputStream& is, AviIndex& idx1)$/;"	f	namespace:cv
operator >>	cap_mjpeg_decoder.cpp	/^MjpegInputStream& operator >> (MjpegInputStream& is, AviMainHeader& avih)$/;"	f	namespace:cv
operator >>	cap_mjpeg_decoder.cpp	/^MjpegInputStream& operator >> (MjpegInputStream& is, AviStreamHeader& strh)$/;"	f	namespace:cv
operator >>	cap_mjpeg_decoder.cpp	/^MjpegInputStream& operator >> (MjpegInputStream& is, BitmapInfoHeader& bmph)$/;"	f	namespace:cv
operator >>	cap_mjpeg_decoder.cpp	/^MjpegInputStream& operator >> (MjpegInputStream& is, RiffChunk& riff_chunk)$/;"	f	namespace:cv
operator >>	cap_mjpeg_decoder.cpp	/^MjpegInputStream& operator >> (MjpegInputStream& is, RiffList& riff_list)$/;"	f	namespace:cv
operator T *	agile_wrl.hpp	/^                operator T * ()$/;"	f	class:Details::AgileHelper
operator bool	cap_mjpeg_decoder.cpp	/^MjpegInputStream::operator bool()$/;"	f	class:cv::MjpegInputStream
operator bool	cap_msmf.hpp	/^    operator bool()$/;"	f	class:ComPtr
operator ||	ppltasks_winrt.hpp	/^inline task<void> operator||(const task<void> & _Lhs, const task<void> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
operator ||	ppltasks_winrt.hpp	/^task<_ReturnType> operator||(const task<_ReturnType> & _Lhs, const task<_ReturnType> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
operator ||	ppltasks_winrt.hpp	/^task<std::vector<_ReturnType>> operator||(const task<_ReturnType> & _Lhs, const task<std::vector<_ReturnType>> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
operator ||	ppltasks_winrt.hpp	/^task<std::vector<_ReturnType>> operator||(const task<std::vector<_ReturnType>> & _Lhs, const task<_ReturnType> & _Rhs)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
outbuf	cap_ffmpeg_impl.hpp	/^    uint8_t         * outbuf;$/;"	m	struct:CvVideoWriter_FFMPEG
outbuf_size	cap_ffmpeg_impl.hpp	/^    uint32_t          outbuf_size;$/;"	m	struct:CvVideoWriter_FFMPEG
outfile	cap_ffmpeg_impl.hpp	/^    FILE            * outfile;$/;"	m	struct:CvVideoWriter_FFMPEG
outfps	cap_mjpeg_encoder.cpp	/^    int outfps;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
outputBufferMutex	cap_winrt_bridge.hpp	/^    std::mutex                  outputBufferMutex;  \/\/ output is double buffered$/;"	m	class:VideoioBridge
outputMaps	cap_openni.cpp	/^    std::vector<OutputMap> outputMaps;$/;"	m	class:CvCapture_OpenNI	file:
outputMaps	cap_openni2.cpp	/^    std::vector<OutputMap> outputMaps;$/;"	m	class:CvCapture_OpenNI2	file:
outputMapsTypesCount	cap_openni.cpp	/^    static const int outputMapsTypesCount = 7;$/;"	m	class:CvCapture_OpenNI	file:
outputMapsTypesCount	cap_openni2.cpp	/^    static const int outputMapsTypesCount = 7;$/;"	m	class:CvCapture_OpenNI2	file:
pAction	cap_msmf.cpp	/^    long setDeviceFormat(MAKE_WRL_REF(_MediaCapture) pSource, unsigned long dwFormatIndex, MAKE_WRL_REF(_AsyncAction)* pAction);$/;"	m	class:__anon1::videoDevice	file:
pAmMediaType	cap_dshow.cpp	/^        AM_MEDIA_TYPE * pAmMediaType;$/;"	m	class:videoDevice	file:
pBuffer	cap_dshow.cpp	/^        char * pBuffer;$/;"	m	class:videoDevice	file:
pCaptureGraph	cap_dshow.cpp	/^        ICaptureGraphBuilder2 *pCaptureGraph;    \/\/ Capture graph builder object$/;"	m	class:videoDevice	file:
pControl	cap_dshow.cpp	/^        IMediaControl *pControl;                \/\/ Media control object$/;"	m	class:videoDevice	file:
pDestFilter	cap_dshow.cpp	/^        IBaseFilter * pDestFilter;$/;"	m	class:videoDevice	file:
pDevice	cap_msmf.cpp	/^    long readInfoOfDevice(MAKE_WRL_REF(_IDeviceInformation) pDevice, unsigned int Num);$/;"	m	class:__anon1::videoDevice	file:
pDevice	cap_msmf.cpp	/^    long resetDevice(MAKE_WRL_REF(_IDeviceInformation) pDevice);$/;"	m	class:__anon1::videoDevice	file:
pDevice	cap_msmf.cpp	/^long videoDevice::readInfoOfDevice(MAKE_WRL_REF(_IDeviceInformation) pDevice, unsigned int Num)$/;"	m	namespace:__anon1	file:
pGrabber	cap_dshow.cpp	/^        ISampleGrabber * pGrabber;                \/\/ Grabs frame$/;"	m	class:videoDevice	file:
pGrabberF	cap_dshow.cpp	/^        IBaseFilter *pGrabberF;$/;"	m	class:videoDevice	file:
pGraph	cap_dshow.cpp	/^        IGraphBuilder *pGraph;                    \/\/ Graph builder object$/;"	m	class:videoDevice	file:
pMF_MT_AM_FORMAT_TYPEName	cap_msmf.cpp	/^    wchar_t *pMF_MT_AM_FORMAT_TYPEName;$/;"	m	struct:__anon1::MediaType	file:
pMF_MT_MAJOR_TYPEName	cap_msmf.cpp	/^    wchar_t *pMF_MT_MAJOR_TYPEName;$/;"	m	struct:__anon1::MediaType	file:
pMF_MT_SUBTYPEName	cap_msmf.cpp	/^    wchar_t *pMF_MT_SUBTYPEName;$/;"	m	struct:__anon1::MediaType	file:
pMediaEvent	cap_dshow.cpp	/^        IMediaEventEx * pMediaEvent;$/;"	m	class:videoDevice	file:
pNode	cap_msmf.hpp	/^        const Node *pNode;$/;"	m	class:List::POSITION
pSource	cap_msmf.cpp	/^    HRESULT enumerateCaptureFormats(MAKE_WRL_REF(_MediaCapture) pSource);$/;"	m	class:__anon1::videoDevice	file:
pSource	cap_msmf.cpp	/^    HRESULT initImageGrabber(MAKE_WRL_REF(_MediaCapture) pSource,$/;"	m	class:__anon1::ImageGrabberWinRT	file:
pSource	cap_msmf.cpp	/^    long setDeviceFormat(MAKE_WRL_REF(_MediaCapture) pSource, unsigned long dwFormatIndex, MAKE_WRL_REF(_AsyncAction)* pAction);$/;"	m	class:__anon1::videoDevice	file:
pSource	cap_msmf.cpp	/^HRESULT ImageGrabberWinRT::initImageGrabber(MAKE_WRL_REF(_MediaCapture) pSource,$/;"	m	namespace:__anon1	file:
pSource	cap_msmf.cpp	/^long videoDevice::setDeviceFormat(MAKE_WRL_REF(_MediaCapture) pSource, unsigned long  dwFormatIndex, MAKE_WRL_REF(_AsyncAction)* pAction)$/;"	m	namespace:__anon1	file:
pVideoInputFilter	cap_dshow.cpp	/^        IBaseFilter *pVideoInputFilter;          \/\/ Video Capture filter$/;"	m	class:videoDevice	file:
packet	cap_ffmpeg_impl.hpp	/^    AVPacket          packet;$/;"	m	struct:CvCapture_FFMPEG
palette	cap_v4l.cpp	/^   enum PALETTE_TYPE palette;$/;"	m	struct:CvCaptureCAM_V4L	typeref:enum:CvCaptureCAM_V4L::PALETTE_TYPE	file:
parseAvi	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseAvi(MjpegInputStream& in_str)$/;"	f	class:cv::AviMjpegStream
parseAvi	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseAvi(MjpegInputStream& in_str, frame_list& in_frame_list)$/;"	f	class:cv::AviMjpegStream
parseAviWithFrameList	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseAviWithFrameList(MjpegInputStream& in_str, frame_list& in_frame_list)$/;"	f	class:cv::AviMjpegStream
parseHdrlList	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseHdrlList(MjpegInputStream& in_str)$/;"	f	class:cv::AviMjpegStream
parseIndex	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseIndex(MjpegInputStream& in_str, uint32_t index_size, frame_list& in_frame_list)$/;"	f	class:cv::AviMjpegStream
parseInfo	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseInfo(MjpegInputStream&)$/;"	f	class:cv::AviMjpegStream
parseMovi	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseMovi(MjpegInputStream&, frame_list&)$/;"	f	class:cv::AviMjpegStream
parseRiff	cap_mjpeg_decoder.cpp	/^bool MotionJpegCapture::parseRiff(MjpegInputStream& in_str)$/;"	f	class:cv::MotionJpegCapture
parseStrl	cap_mjpeg_decoder.cpp	/^bool AviMjpegStream::parseStrl(MjpegInputStream& in_str, uint8_t stream_id)$/;"	f	class:cv::AviMjpegStream
patchInt	cap_mjpeg_encoder.cpp	/^    void patchInt(int val, size_t pos)$/;"	f	class:cv::mjpeg::BitStream
pauseGrabbing	cap_msmf.cpp	/^void ImageGrabberCallback::pauseGrabbing()$/;"	f	class:__anon1::ImageGrabberCallback
picbuf	cap_ffmpeg_impl.hpp	/^    uint8_t         * picbuf;$/;"	m	struct:CvVideoWriter_FFMPEG
picture	cap_ffmpeg_impl.hpp	/^    AVFrame         * picture;$/;"	m	struct:CvCapture_FFMPEG
picture	cap_ffmpeg_impl.hpp	/^    AVFrame         * picture;$/;"	m	struct:CvVideoWriter_FFMPEG
picture_pts	cap_ffmpeg_impl.hpp	/^    int64_t           picture_pts;$/;"	m	struct:CvCapture_FFMPEG
pipeline	cap_gstreamer.cpp	/^    GstElement*   pipeline;$/;"	m	class:CvCapture_GStreamer	file:
pipeline	cap_gstreamer.cpp	/^    GstElement* pipeline;$/;"	m	class:CvVideoWriter_GStreamer	file:
pixels	cap_dshow.cpp	/^        unsigned char * pixels;$/;"	m	class:videoDevice	file:
pixels	cap_dshow.cpp	/^    unsigned char * pixels;$/;"	m	class:SampleGrabberCallback	file:
pixmap	cap_qt.cpp	/^        PixMapHandle       pixmap;$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
pkt_	cap_ffmpeg_impl.hpp	/^    AVPacket pkt_;$/;"	m	struct:InputMediaStream_FFMPEG
popDepthMetaData	cap_openni.cpp	/^        virtual inline bool popDepthMetaData( xn::DepthMetaData& depthMetaData )$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizer
popDepthMetaData	cap_openni.cpp	/^        virtual inline bool popDepthMetaData( xn::DepthMetaData& depthMetaData )$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
popImageMetaData	cap_openni.cpp	/^        virtual inline bool popImageMetaData( xn::ImageMetaData& imageMetaData )$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizer
popImageMetaData	cap_openni.cpp	/^        virtual inline bool popImageMetaData( xn::ImageMetaData& imageMetaData )$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
portnum	cap_dc1394.cpp	/^struct camnode {dc1394_cameracapture cam;int portnum;} cameras[MAX_CAMERAS];$/;"	m	struct:camnode	file:
ports	cap_dc1394.cpp	/^struct raw1394_portinfo ports[MAX_PORTS];$/;"	v	typeref:struct:raw1394_portinfo
pos	cap_vfw.cpp	/^    int                 pos;$/;"	m	class:CvCaptureAVI_VFW	file:
pos	cap_vfw.cpp	/^    long          pos;$/;"	m	class:CvVideoWriter_VFW	file:
postshift	cap_mjpeg_encoder.cpp	/^    postshift = 14$/;"	e	enum:cv::mjpeg::__anon15	file:
preferred_modes	cap_dc1394.cpp	/^static const int preferred_modes[]$/;"	v	file:
prev	cap_msmf.hpp	/^        Node *prev;$/;"	m	struct:List::Node
preview	cap_gphoto2.cpp	/^    bool preview; \/\/ CV_CAP_PROP_GPHOTO2_PREVIEW$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
printError	cap_mjpeg_decoder.cpp	/^void AviMjpegStream::printError(MjpegInputStream& in_str, RiffChunk& chunk, uint32_t expected_fourcc)$/;"	f	class:cv::AviMjpegStream
printError	cap_mjpeg_decoder.cpp	/^void AviMjpegStream::printError(MjpegInputStream& in_str, RiffList& list, uint32_t expected_fourcc)$/;"	f	class:cv::AviMjpegStream
printOut	cap_msmf.cpp	/^void DPO::printOut(const wchar_t *format, ...)$/;"	f	class:__anon1::DPO
processPixels	cap_dshow.cpp	/^void videoInput::processPixels(unsigned char * src, unsigned char * dst, int width, int height, bool bRGB, bool bFlip){$/;"	f	class:videoInput
processPixels	cap_msmf.cpp	/^void videoInput::processPixels(unsigned char * src, unsigned char * dst, unsigned int width,$/;"	f	class:__anon1::videoInput
productionNode	cap_openni.cpp	/^    xn::ProductionNode productionNode;$/;"	m	class:CvCapture_OpenNI	file:
progress_reporter	ppltasks_winrt.hpp	/^    progress_reporter() {}$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::progress_reporter
progress_reporter	ppltasks_winrt.hpp	/^class progress_reporter$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
prop	cap_OPEL.cpp	/^					property* prop;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
property	cap_OPEL.cpp	/^typedef struct property$/;"	s	file:
property	cap_OPEL.cpp	/^}property;$/;"	t	typeref:struct:property	file:
ptrBuffer	cap_dshow.cpp	/^    unsigned char * ptrBuffer;$/;"	m	class:SampleGrabberCallback	file:
pushDepthMetaData	cap_openni.cpp	/^        virtual inline void pushDepthMetaData( xn::DepthMetaData& depthMetaData )$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizer
pushDepthMetaData	cap_openni.cpp	/^        virtual inline void pushDepthMetaData( xn::DepthMetaData& depthMetaData )$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
pushImageMetaData	cap_openni.cpp	/^        virtual inline void pushImageMetaData( xn::ImageMetaData& imageMetaData )$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizer
pushImageMetaData	cap_openni.cpp	/^        virtual inline void pushImageMetaData( xn::ImageMetaData& imageMetaData )$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
putByte	cap_mjpeg_encoder.cpp	/^    void putByte(int val)$/;"	f	class:cv::mjpeg::BitStream
putBytes	cap_mjpeg_encoder.cpp	/^    void putBytes(const uchar* buf, int count)$/;"	f	class:cv::mjpeg::BitStream
putInt	cap_mjpeg_encoder.cpp	/^    void putInt(int val)$/;"	f	class:cv::mjpeg::BitStream
putShort	cap_mjpeg_encoder.cpp	/^    void putShort(int val)$/;"	f	class:cv::mjpeg::BitStream
put_Completed	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP put_Completed(typename _Attributes::_CompletionDelegateType* _CompleteHandler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
put_Id	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP put_Id(unsigned int id)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
put_Progress	ppltasks_winrt.hpp	/^        virtual STDMETHODIMP put_Progress(typename _Attributes::_ProgressDelegateType* _ProgressHandler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::abstract
quality	cap_mjpeg_encoder.cpp	/^    double quality;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
queryctrl	cap_libv4l.cpp	/^   struct v4l2_queryctrl queryctrl;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_queryctrl	file:
queryctrl	cap_v4l.cpp	/^   struct v4l2_queryctrl queryctrl;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_queryctrl	file:
r2d	cap_ffmpeg_impl.hpp	/^double CvCapture_FFMPEG::r2d(AVRational r) const$/;"	f	class:CvCapture_FFMPEG
raw_buffer	cap_unicap.cpp	/^  unicap_data_buffer_t raw_buffer;$/;"	m	struct:CvCapture_Unicap	file:
raw_frame	cap_unicap.cpp	/^  IplImage *raw_frame;$/;"	m	struct:CvCapture_Unicap	file:
rawstream	cap_mjpeg_encoder.cpp	/^    bool rawstream;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
rcFrame	cap_mjpeg_decoder.cpp	/^    } rcFrame;                \/\/ If stream has a different size than dwWidth*dwHeight(unused)$/;"	m	struct:cv::AviStreamHeader	typeref:struct:cv::AviStreamHeader::__anon3	file:
read	cap.cpp	/^bool VideoCapture::read(OutputArray image)$/;"	f	class:cv::VideoCapture
read	cap_ffmpeg_impl.hpp	/^bool InputMediaStream_FFMPEG::read(unsigned char** data, int* size, int* endOfFile)$/;"	f	class:InputMediaStream_FFMPEG
read	cap_mjpeg_decoder.cpp	/^MjpegInputStream& MjpegInputStream::read(char* buf, uint64_t count)$/;"	f	class:cv::MjpegInputStream
readCamerasParams	cap_openni.cpp	/^bool CvCapture_OpenNI::readCamerasParams()$/;"	f	class:CvCapture_OpenNI
readCamerasParams	cap_openni2.cpp	/^bool CvCapture_OpenNI2::readCamerasParams()$/;"	f	class:CvCapture_OpenNI2
readFrame	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::readFrame(void)$/;"	f	class:CvCaptureCAM_OPEL_CPP
readFrame	cap_mjpeg_decoder.cpp	/^std::vector<char> MotionJpegCapture::readFrame(frame_iterator it)$/;"	f	class:cv::MotionJpegCapture
readFrameFromFile	cap_gphoto2.cpp	/^void DigitalCameraCapture::readFrameFromFile(CameraFile * file, OutputArray outputFrame)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
readInfoOfDevice	cap_msmf.cpp	/^long videoDevice::readInfoOfDevice(IMFActivate *pActivate, unsigned int Num)$/;"	f	class:__anon1::videoDevice
read_InputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^int read_InputMediaStream_FFMPEG(InputMediaStream_FFMPEG* stream, unsigned char** data, int* size, int* endOfFile)$/;"	f
read_frame_v4l2	cap_libv4l.cpp	/^static int read_frame_v4l2(CvCaptureCAM_V4L* capture) {$/;"	f	file:
read_frame_v4l2	cap_v4l.cpp	/^static int read_frame_v4l2(CvCaptureCAM_V4L* capture) {$/;"	f	file:
readyToCapture	cap_dshow.cpp	/^        bool readyToCapture;$/;"	m	class:videoDevice	file:
recorder	cap_openni2.cpp	/^    openni::Recorder recorder;$/;"	m	class:CvCapture_OpenNI2	file:
rectify	cap_dc1394_v2.cpp	/^    bool rectify;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
refcount	cap_ffmpeg_impl.hpp	/^    int refcount;$/;"	m	struct:ImplMutex::Impl
release	cap.cpp	/^void VideoCapture::release()$/;"	f	class:cv::VideoCapture
release	cap.cpp	/^void VideoWriter::release()$/;"	f	class:cv::VideoWriter
release_InputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^void release_InputMediaStream_FFMPEG(InputMediaStream_FFMPEG* stream)$/;"	f
release_OutputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^void release_OutputMediaStream_FFMPEG(struct OutputMediaStream_FFMPEG* stream)$/;"	f
reloadConfig	cap_gphoto2.cpp	/^void DigitalCameraCapture::reloadConfig() throw (GPhoto2Exception)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
reloadOnChange	cap_gphoto2.cpp	/^    bool reloadOnChange; \/\/ CV_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
removeFilter	cap_gstreamer.cpp	/^void CvCapture_GStreamer::removeFilter(const char *filter)$/;"	f	class:CvCapture_GStreamer
report	ppltasks_winrt.hpp	/^    void report(const _ProgressType& _Val) const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::progress_reporter
reporter	cap_winrt_bridge.hpp	/^    Concurrency::progress_reporter<int> reporter;$/;"	m	class:VideoioBridge
req	cap_libv4l.cpp	/^   struct v4l2_requestbuffers req;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_requestbuffers	file:
req	cap_v4l.cpp	/^   struct v4l2_requestbuffers req;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::v4l2_requestbuffers	file:
requestForUIthreadAsync	cap_winrt_bridge.cpp	/^void VideoioBridge::requestForUIthreadAsync(int action)$/;"	f	class:VideoioBridge
requestedFrameTime	cap_dshow.cpp	/^        long requestedFrameTime; \/\/ie fps$/;"	m	class:videoDevice	file:
resetCvImage	cap_ximea.cpp	/^void CvCaptureCAM_XIMEA::resetCvImage()$/;"	f	class:CvCaptureCAM_XIMEA
resizeCaptureFrame	cap_pvapi.cpp	/^bool CvCaptureCAM_PvAPI::resizeCaptureFrame (int frameWidth, int frameHeight)$/;"	f	class:CvCaptureCAM_PvAPI
restartDevice	cap_dshow.cpp	/^bool videoInput::restartDevice(int id){$/;"	f	class:videoInput
restartPipeline	cap_gstreamer.cpp	/^void CvCapture_GStreamer::restartPipeline()$/;"	f	class:CvCapture_GStreamer
result	cap_gphoto2.cpp	/^    int result;$/;"	m	class:cv::gphoto2::GPhoto2Exception	file:
result_type	ppltasks_winrt.hpp	/^    typedef _ReturnType result_type;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
result_type	ppltasks_winrt.hpp	/^    typedef void result_type;$/;"	t	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
resumeGrabbing	cap_msmf.cpp	/^void ImageGrabberCallback::resumeGrabbing()$/;"	f	class:__anon1::ImageGrabberCallback
retrieve	cap.cpp	/^bool VideoCapture::retrieve(OutputArray image, int channel)$/;"	f	class:cv::VideoCapture
retrieveAsOutputArray	cap_intelperc.cpp	/^bool IntelPerCStreamImage::retrieveAsOutputArray(cv::OutputArray image)$/;"	f	class:cv::IntelPerCStreamImage
retrieveBGRImage	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveBGRImage()$/;"	f	class:CvCapture_OpenNI
retrieveBGRImage	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveBGRImage()$/;"	f	class:CvCapture_OpenNI2
retrieveDepthAsOutputArray	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::retrieveDepthAsOutputArray(cv::OutputArray image)$/;"	f	class:cv::IntelPerCStreamDepth
retrieveDepthMap	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveDepthMap()$/;"	f	class:CvCapture_OpenNI
retrieveDepthMap	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveDepthMap()$/;"	f	class:CvCapture_OpenNI2
retrieveDisparityMap	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveDisparityMap()$/;"	f	class:CvCapture_OpenNI
retrieveDisparityMap	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveDisparityMap()$/;"	f	class:CvCapture_OpenNI2
retrieveDisparityMap_32F	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveDisparityMap_32F()$/;"	f	class:CvCapture_OpenNI
retrieveDisparityMap_32F	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveDisparityMap_32F()$/;"	f	class:CvCapture_OpenNI2
retrieveFrame	cap_OPEL.cpp	/^IplImage* CvCaptureCAM_OPEL_CPP::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_OPEL_CPP
retrieveFrame	cap_cmu.cpp	/^IplImage* CvCaptureCAM_CMU::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_CMU
retrieveFrame	cap_dc1394.cpp	/^IplImage* CvCaptureCAM_DC1394_CPP::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_DC1394_CPP
retrieveFrame	cap_dc1394_v2.cpp	/^IplImage* CvCaptureCAM_DC1394_v2_CPP::retrieveFrame(int idx)$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
retrieveFrame	cap_dshow.cpp	/^bool VideoCapture_DShow::retrieveFrame(int, OutputArray frame)$/;"	f	class:cv::VideoCapture_DShow
retrieveFrame	cap_ffmpeg.cpp	/^    virtual IplImage* retrieveFrame(int)$/;"	f	class:CvCapture_FFMPEG_proxy
retrieveFrame	cap_ffmpeg_impl.hpp	/^bool CvCapture_FFMPEG::retrieveFrame(int, unsigned char** data, int* step, int* width, int* height, int* cn)$/;"	f	class:CvCapture_FFMPEG
retrieveFrame	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_Giganetix
retrieveFrame	cap_gphoto2.cpp	/^bool DigitalCameraCapture::retrieveFrame(int, OutputArray outputFrame)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
retrieveFrame	cap_gstreamer.cpp	/^IplImage * CvCapture_GStreamer::retrieveFrame(int)$/;"	f	class:CvCapture_GStreamer
retrieveFrame	cap_images.cpp	/^IplImage* CvCapture_Images::retrieveFrame(int)$/;"	f	class:CvCapture_Images
retrieveFrame	cap_intelperc.cpp	/^bool VideoCapture_IntelPerC::retrieveFrame(int outputType, cv::OutputArray frame)$/;"	f	class:cv::VideoCapture_IntelPerC
retrieveFrame	cap_libv4l.cpp	/^IplImage* CvCaptureCAM_V4L_CPP::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_V4L_CPP
retrieveFrame	cap_mjpeg_decoder.cpp	/^bool MotionJpegCapture::retrieveFrame(int, OutputArray output_frame)$/;"	f	class:cv::MotionJpegCapture
retrieveFrame	cap_msmf.cpp	/^IplImage* CvCaptureCAM_MSMF::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_MSMF
retrieveFrame	cap_msmf.cpp	/^IplImage* CvCaptureFile_MSMF::retrieveFrame(int)$/;"	f	class:CvCaptureFile_MSMF
retrieveFrame	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveFrame( int outputType )$/;"	f	class:CvCapture_OpenNI
retrieveFrame	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveFrame( int outputType )$/;"	f	class:CvCapture_OpenNI2
retrieveFrame	cap_pvapi.cpp	/^IplImage* CvCaptureCAM_PvAPI::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_PvAPI
retrieveFrame	cap_qt.cpp	/^IplImage* CvCapture_QT_Cam_CPP::retrieveFrame(int)$/;"	f	class:CvCapture_QT_Cam_CPP
retrieveFrame	cap_qt.cpp	/^IplImage* CvCapture_QT_Movie_CPP::retrieveFrame(int)$/;"	f	class:CvCapture_QT_Movie_CPP
retrieveFrame	cap_unicap.cpp	/^IplImage * CvCapture_Unicap::retrieveFrame(int) {$/;"	f	class:CvCapture_Unicap
retrieveFrame	cap_v4l.cpp	/^IplImage* CvCaptureCAM_V4L_CPP::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_V4L_CPP
retrieveFrame	cap_vfw.cpp	/^IplImage* CvCaptureAVI_VFW::retrieveFrame(int)$/;"	f	class:CvCaptureAVI_VFW
retrieveFrame	cap_vfw.cpp	/^IplImage* CvCaptureCAM_VFW::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_VFW
retrieveFrame	cap_winrt_capture.cpp	/^    bool VideoCapture_WinRT::retrieveFrame(int channel, cv::OutputArray outArray)$/;"	f	class:cv::VideoCapture_WinRT
retrieveFrame	cap_ximea.cpp	/^IplImage* CvCaptureCAM_XIMEA::retrieveFrame(int)$/;"	f	class:CvCaptureCAM_XIMEA
retrieveFrame	cap_xine.cpp	/^IplImage* CvCaptureAVI_XINE_CPP::retrieveFrame(int)$/;"	f	class:CvCaptureAVI_XINE_CPP
retrieveFrame	precomp.hpp	/^    virtual IplImage* retrieveFrame(int) { return 0; }$/;"	f	struct:CvCapture
retrieveGrayImage	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveGrayImage()$/;"	f	class:CvCapture_OpenNI
retrieveGrayImage	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveGrayImage()$/;"	f	class:CvCapture_OpenNI2
retrieveIRAsOutputArray	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::retrieveIRAsOutputArray(cv::OutputArray image)$/;"	f	class:cv::IntelPerCStreamDepth
retrievePointCloudMap	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrievePointCloudMap()$/;"	f	class:CvCapture_OpenNI
retrievePointCloudMap	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrievePointCloudMap()$/;"	f	class:CvCapture_OpenNI2
retrieveUVAsOutputArray	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::retrieveUVAsOutputArray(cv::OutputArray image)$/;"	f	class:cv::IntelPerCStreamDepth
retrieveValidDepthMask	cap_openni.cpp	/^IplImage* CvCapture_OpenNI::retrieveValidDepthMask()$/;"	f	class:CvCapture_OpenNI
retrieveValidDepthMask	cap_openni2.cpp	/^IplImage* CvCapture_OpenNI2::retrieveValidDepthMask()$/;"	f	class:CvCapture_OpenNI2
retriveFrame	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::retriveFrame(int type, int planeIdx, cv::OutputArray frame)$/;"	f	class:cv::IntelPerCStreamDepth
rgb24_to_rgb24	cap_v4l.cpp	/^rgb24_to_rgb24 (int width, int height, unsigned char *src, unsigned char *dst)$/;"	f	file:
rgb482bgr	cap_dc1394.cpp	/^rgb482bgr(const unsigned char *src, unsigned char *dest,$/;"	f	file:
rgb_picture	cap_ffmpeg_impl.hpp	/^    AVFrame           rgb_picture;$/;"	m	struct:CvCapture_FFMPEG
ri_new	cap_msmf.cpp	/^    bool ri_new;$/;"	m	class:__anon1::RawImage	file:
ri_pixels	cap_msmf.cpp	/^    unsigned char *ri_pixels;$/;"	m	class:__anon1::RawImage	file:
ri_size	cap_msmf.cpp	/^    unsigned int ri_size;$/;"	m	class:__anon1::RawImage	file:
right	cap_mjpeg_decoder.cpp	/^        short int right;$/;"	m	struct:cv::AviStreamHeader::__anon3	file:
rootWidget	cap_gphoto2.cpp	/^    CameraWidget * rootWidget = NULL;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
routeCrossbar	cap_dshow.cpp	/^HRESULT videoInput::routeCrossbar(ICaptureGraphBuilder2 **ppBuild, IBaseFilter **pVidInFilter, int conType, GUID captureMode){$/;"	f	class:videoInput
rtDuration	cap_msmf.cpp	/^    UINT64 rtDuration;$/;"	m	class:CvVideoWriter_MSMF	file:
rtStart	cap_msmf.cpp	/^    LONGLONG rtStart;$/;"	m	class:CvVideoWriter_MSMF	file:
run	cap_msmf.cpp	/^void ImageGrabberThread::run()$/;"	f	class:__anon1::ImageGrabberThread
sample	cap_gstreamer.cpp	/^    GstSample*    sample;$/;"	m	class:CvCapture_GStreamer	file:
scheduler	ppltasks_winrt.hpp	/^    Concurrency::scheduler_ptr scheduler() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
scoped_lock	ppltasks_winrt.hpp	/^    typedef Concurrency::critical_section::scoped_lock scoped_lock;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
scoped_lock	ppltasks_winrt.hpp	/^    typedef Concurrency::extensibility::scoped_critical_section_t scoped_lock;$/;"	t	namespace:Concurrency_winrt::details::_ContextCallback::details
sealed	cap_winrt/CaptureFrameGrabber.hpp	/^ref class CaptureFrameGrabber sealed$/;"	c	namespace:Media
sealed	cap_winrt/MFIncludes.hpp	/^ref class MediaSample sealed$/;"	c
seek	cap_ffmpeg_impl.hpp	/^void CvCapture_FFMPEG::seek(double sec)$/;"	f	class:CvCapture_FFMPEG
seek	cap_ffmpeg_impl.hpp	/^void CvCapture_FFMPEG::seek(int64_t _frame_number)$/;"	f	class:CvCapture_FFMPEG
seekable	cap_xine.cpp	/^    bool	seekable;$/;"	m	struct:CvCaptureAVI_XINE	file:
seekg	cap_mjpeg_decoder.cpp	/^MjpegInputStream& MjpegInputStream::seekg(uint64_t pos)$/;"	f	class:cv::MjpegInputStream
semid	cap_OPEL.cpp	/^					int semid;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
sendDbusMsg	cap_OPEL.cpp	/^static void sendDbusMsg(DBusConnection* conn, const char* msg)$/;"	f	file:
separator	cap_gphoto2.cpp	/^    static const char * separator;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
separator	cap_gphoto2.cpp	/^const char * DigitalCameraCapture::separator = ",";$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
sequence	cap_libv4l.cpp	/^   int sequence;$/;"	m	struct:CvCaptureCAM_V4L	file:
sequence	cap_qt.cpp	/^        ImageSequence      sequence;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
set	cap.cpp	/^bool VideoCapture::set(int propId, double value)$/;"	f	class:cv::VideoCapture
set	cap.cpp	/^bool VideoWriter::set(int propId, double value)$/;"	f	class:cv::VideoWriter
set	ppltasks_winrt.hpp	/^    bool set() const \/\/ 'const' (even though it's not deep) allows to safely pass events by value into lambdas$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
set	ppltasks_winrt.hpp	/^    bool set(_ResultType _Result) const \/\/ 'const' (even though it's not deep) allows to safely pass events by value into lambdas$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
setAttemptCaptureSize	cap_dshow.cpp	/^void videoInput::setAttemptCaptureSize(int id, int w, int h,GUID mediaType){$/;"	f	class:videoInput
setAutoReconnectOnFreeze	cap_dshow.cpp	/^void videoInput::setAutoReconnectOnFreeze(int deviceNumber, bool doReconnect, int numMissedFramesBeforeReconnect){$/;"	f	class:videoInput
setCommonProperty	cap_openni.cpp	/^bool CvCapture_OpenNI::setCommonProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI
setCommonProperty	cap_openni2.cpp	/^bool CvCapture_OpenNI2::setCommonProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI2
setCopy	cap_msmf.cpp	/^void RawImage::setCopy(const BYTE * pSampleBuffer)$/;"	f	class:__anon1::RawImage
setDepthGeneratorProperty	cap_openni.cpp	/^bool CvCapture_OpenNI::setDepthGeneratorProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI
setDepthGeneratorProperty	cap_openni2.cpp	/^bool CvCapture_OpenNI2::setDepthGeneratorProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI2
setDeviceFormat	cap_msmf.cpp	/^long videoDevice::setDeviceFormat(IMFMediaSource *pSource, unsigned long  dwFormatIndex)$/;"	f	class:__anon1::videoDevice
setDeviceIndex	cap_winrt_bridge.cpp	/^void VideoioBridge::setDeviceIndex(int index)$/;"	f	class:VideoioBridge
setEmergencyStopEvent	cap_msmf.cpp	/^void ImageGrabberThread::setEmergencyStopEvent(void *userData, void(*func)(int, void *))$/;"	f	class:__anon1::ImageGrabberThread
setEmergencyStopEvent	cap_msmf.cpp	/^void videoDevice::setEmergencyStopEvent(void *userData, void(*func)(int, void *))$/;"	f	class:__anon1::videoDevice
setEmergencyStopEvent	cap_msmf.cpp	/^void videoInput::setEmergencyStopEvent(int deviceID, void *userData, void(*func)(int, void *))$/;"	f	class:__anon1::videoInput
setFilter	cap_gstreamer.cpp	/^void CvCapture_GStreamer::setFilter(const char *prop, int type, int v1, int v2)$/;"	f	class:CvCapture_GStreamer
setFormat	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::setFormat(int format)$/;"	f	class:CvCaptureCAM_CMU
setFormat	cap_dshow.cpp	/^bool videoInput::setFormat(int deviceNumber, int format){$/;"	f	class:videoInput
setFrameRate	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::setFrameRate(int rate)$/;"	f	class:CvCaptureCAM_CMU
setGenericProperty	cap_gphoto2.cpp	/^CameraWidget * DigitalCameraCapture::setGenericProperty(int propertyId,$/;"	f	class:cv::gphoto2::DigitalCameraCapture
setHeight	cap_winrt_bridge.cpp	/^void VideoioBridge::setHeight(int _height)$/;"	f	class:VideoioBridge
setIdealFramerate	cap_dshow.cpp	/^void videoInput::setIdealFramerate(int deviceNumber, int idealFramerate){$/;"	f	class:videoInput
setImageGeneratorProperty	cap_openni.cpp	/^bool CvCapture_OpenNI::setImageGeneratorProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI
setImageGeneratorProperty	cap_openni2.cpp	/^bool CvCapture_OpenNI2::setImageGeneratorProperty(int propIdx, double propValue)$/;"	f	class:CvCapture_OpenNI2
setIsCircleBuffer	cap_openni.cpp	/^    void setIsCircleBuffer( bool _isCircleBuffer ) { isCircleBuffer = _isCircleBuffer; }$/;"	f	class:ApproximateSyncGrabber
setMaxBufferSize	cap_openni.cpp	/^        void setMaxBufferSize()$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizer
setMaxBufferSize	cap_openni.cpp	/^        void setMaxBufferSize()$/;"	f	class:ApproximateSyncGrabber::TBBApproximateSynchronizerTask
setMaxBufferSize	cap_openni.cpp	/^    void setMaxBufferSize( int _maxBufferSize )$/;"	f	class:ApproximateSyncGrabber
setMaxTimeDuration	cap_openni.cpp	/^    void setMaxTimeDuration( int _maxTimeDuration ) {  maxTimeDuration = _maxTimeDuration; }$/;"	f	class:ApproximateSyncGrabber
setMode	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::setMode(int mode)$/;"	f	class:CvCaptureCAM_CMU
setParametrs	cap_msmf.cpp	/^void videoDevice::setParametrs(CamParametrs parametrs)$/;"	f	class:__anon1::videoDevice
setParametrs	cap_msmf.cpp	/^void videoInput::setParametrs(int deviceID, CamParametrs parametrs)$/;"	f	class:__anon1::videoInput
setPhyCon	cap_dshow.cpp	/^void videoInput::setPhyCon(int id, int conn){$/;"	f	class:videoInput
setProperty	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::setProperty(int, double)$/;"	f	class:CvCaptureCAM_OPEL_CPP
setProperty	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::setProperty( int property_id, double value )$/;"	f	class:CvCaptureCAM_CMU
setProperty	cap_dc1394.cpp	/^bool CvCaptureCAM_DC1394_CPP::setProperty( int propId, double value )$/;"	f	class:CvCaptureCAM_DC1394_CPP
setProperty	cap_dc1394_v2.cpp	/^bool CvCaptureCAM_DC1394_v2_CPP::setProperty(int propId, double value)$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
setProperty	cap_dshow.cpp	/^bool VideoCapture_DShow::setProperty(int propIdx, double propVal)$/;"	f	class:cv::VideoCapture_DShow
setProperty	cap_ffmpeg.cpp	/^    virtual bool setProperty(int propId, double value)$/;"	f	class:CvCapture_FFMPEG_proxy
setProperty	cap_ffmpeg_impl.hpp	/^bool CvCapture_FFMPEG::setProperty( int property_id, double value )$/;"	f	class:CvCapture_FFMPEG
setProperty	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::setProperty( int property_id, double value )$/;"	f	class:CvCaptureCAM_Giganetix
setProperty	cap_gphoto2.cpp	/^bool DigitalCameraCapture::setProperty(int propertyId, double value)$/;"	f	class:cv::gphoto2::DigitalCameraCapture
setProperty	cap_gstreamer.cpp	/^bool CvCapture_GStreamer::setProperty( int propId, double value )$/;"	f	class:CvCapture_GStreamer
setProperty	cap_images.cpp	/^bool CvCapture_Images::setProperty(int id, double value)$/;"	f	class:CvCapture_Images
setProperty	cap_intelperc.cpp	/^bool IntelPerCStreamBase::setProperty(int propIdx, double propVal)$/;"	f	class:cv::IntelPerCStreamBase
setProperty	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::setProperty(int propIdx, double propVal)$/;"	f	class:cv::IntelPerCStreamDepth
setProperty	cap_intelperc.cpp	/^bool IntelPerCStreamImage::setProperty(int propIdx, double propVal)$/;"	f	class:cv::IntelPerCStreamImage
setProperty	cap_intelperc.cpp	/^bool VideoCapture_IntelPerC::setProperty(int propIdx, double propVal)$/;"	f	class:cv::VideoCapture_IntelPerC
setProperty	cap_libv4l.cpp	/^bool CvCaptureCAM_V4L_CPP::setProperty( int propId, double value )$/;"	f	class:CvCaptureCAM_V4L_CPP
setProperty	cap_mjpeg_decoder.cpp	/^bool MotionJpegCapture::setProperty(int property, double value)$/;"	f	class:cv::MotionJpegCapture
setProperty	cap_mjpeg_encoder.cpp	/^    bool setProperty(int propId, double value)$/;"	f	class:cv::mjpeg::MotionJpegWriter
setProperty	cap_msmf.cpp	/^bool CvCaptureCAM_MSMF::setProperty( int property_id, double value )$/;"	f	class:CvCaptureCAM_MSMF
setProperty	cap_msmf.cpp	/^bool CvCaptureFile_MSMF::setProperty(int property_id, double value)$/;"	f	class:CvCaptureFile_MSMF
setProperty	cap_openni.cpp	/^bool CvCapture_OpenNI::setProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI
setProperty	cap_openni2.cpp	/^bool CvCapture_OpenNI2::setProperty( int propIdx, double propValue )$/;"	f	class:CvCapture_OpenNI2
setProperty	cap_pvapi.cpp	/^bool CvCaptureCAM_PvAPI::setProperty( int property_id, double value )$/;"	f	class:CvCaptureCAM_PvAPI
setProperty	cap_qt.cpp	/^bool CvCapture_QT_Cam_CPP::setProperty( int propId, double value )$/;"	f	class:CvCapture_QT_Cam_CPP
setProperty	cap_qt.cpp	/^bool CvCapture_QT_Movie_CPP::setProperty( int propId, double value )$/;"	f	class:CvCapture_QT_Movie_CPP
setProperty	cap_unicap.cpp	/^bool CvCapture_Unicap::setProperty(int id, double value) {$/;"	f	class:CvCapture_Unicap
setProperty	cap_v4l.cpp	/^bool CvCaptureCAM_V4L_CPP::setProperty( int propId, double value )$/;"	f	class:CvCaptureCAM_V4L_CPP
setProperty	cap_vfw.cpp	/^bool CvCaptureAVI_VFW::setProperty( int property_id, double value )$/;"	f	class:CvCaptureAVI_VFW
setProperty	cap_vfw.cpp	/^bool CvCaptureCAM_VFW::setProperty(int property_id, double value)$/;"	f	class:CvCaptureCAM_VFW
setProperty	cap_winrt_capture.cpp	/^    bool VideoCapture_WinRT::setProperty(int property_id, double value)$/;"	f	class:cv::VideoCapture_WinRT
setProperty	cap_ximea.cpp	/^bool CvCaptureCAM_XIMEA::setProperty( int property_id, double value )$/;"	f	class:CvCaptureCAM_XIMEA
setProperty	cap_xine.cpp	/^bool CvCaptureAVI_XINE_CPP::setProperty( int propId, double value )$/;"	f	class:CvCaptureAVI_XINE_CPP
setProperty	precomp.hpp	/^        virtual bool setProperty(int, double) { return false; }$/;"	f	class:cv::IVideoCapture
setProperty	precomp.hpp	/^        virtual bool setProperty(int, double) { return false; }$/;"	f	class:cv::IVideoWriter
setProperty	precomp.hpp	/^    virtual bool setProperty(int, double) { return 0; }$/;"	f	struct:CvCapture
setReporter	cap_winrt_bridge.hpp	/^    void    setReporter(Concurrency::progress_reporter<int> pr) { reporter = pr; }$/;"	f	class:VideoioBridge
setSize	cap_dshow.cpp	/^void videoDevice::setSize(int w, int h){$/;"	f	class:videoDevice
setSizeAndSubtype	cap_dshow.cpp	/^static bool setSizeAndSubtype(videoDevice * VD, int attemptWidth, int attemptHeight, GUID mediatype){$/;"	f	file:
setUseCallback	cap_dshow.cpp	/^void videoInput::setUseCallback(bool useCallback){$/;"	f	class:videoInput
setVerbose	cap_dshow.cpp	/^void videoInput::setVerbose(bool _verbose){$/;"	f	class:videoInput
setVerbose	cap_msmf.cpp	/^void DPO::setVerbose(bool state)$/;"	f	class:__anon1::DPO
setVerbose	cap_msmf.cpp	/^void videoInput::setVerbose(bool state)$/;"	f	class:__anon1::videoInput
setVideoSettingCamera	cap_dshow.cpp	/^bool videoInput::setVideoSettingCamera(int deviceID, long Property, long lValue, long Flags, bool useDefaultValue){$/;"	f	class:videoInput
setVideoSettingCameraPct	cap_dshow.cpp	/^bool videoInput::setVideoSettingCameraPct(int deviceID, long Property, float pctValue, long Flags){$/;"	f	class:videoInput
setVideoSettingFilter	cap_dshow.cpp	/^bool videoInput::setVideoSettingFilter(int deviceID, long Property, long lValue, long Flags, bool useDefaultValue){$/;"	f	class:videoInput
setVideoSettingFilterPct	cap_dshow.cpp	/^bool videoInput::setVideoSettingFilterPct(int deviceID, long Property, float pctValue, long Flags){$/;"	f	class:videoInput
setVideoSize	cap_cmu.cpp	/^bool CvCaptureCAM_CMU::setVideoSize(int, int)$/;"	f	class:CvCaptureCAM_CMU
setWidth	cap_winrt_bridge.cpp	/^void VideoioBridge::setWidth(int _width)$/;"	f	class:VideoioBridge
set_cancellation_token	ppltasks_winrt.hpp	/^    void set_cancellation_token(Concurrency::cancellation_token _Token)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
set_continuation_context	ppltasks_winrt.hpp	/^    void set_continuation_context(task_continuation_context _ContinuationContext)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
set_exception	ppltasks_winrt.hpp	/^        bool set_exception(_E _Except) const \/\/ 'const' (even though it's not deep) allows to safely pass events by value into lambdas$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
set_exception	ppltasks_winrt.hpp	/^        bool set_exception(std::exception_ptr _ExceptionPtr) const \/\/ 'const' (even though it's not deep) allows to safely pass events by value into lambdas$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task_completion_event
setup	cap_dshow.cpp	/^bool videoInput::setup(int deviceNumber){$/;"	f	class:videoInput
setupBuffer	cap_dshow.cpp	/^    bool setupBuffer(int numBytesIn){$/;"	f	class:SampleGrabberCallback
setupDevice	cap_dshow.cpp	/^bool videoInput::setupDevice(int deviceNumber){$/;"	f	class:videoInput
setupDevice	cap_dshow.cpp	/^bool videoInput::setupDevice(int deviceNumber, int _connection){$/;"	f	class:videoInput
setupDevice	cap_dshow.cpp	/^bool videoInput::setupDevice(int deviceNumber, int w, int h){$/;"	f	class:videoInput
setupDevice	cap_dshow.cpp	/^bool videoInput::setupDevice(int deviceNumber, int w, int h, int _connection){$/;"	f	class:videoInput
setupDevice	cap_msmf.cpp	/^bool videoDevice::setupDevice(unsigned int id)$/;"	f	class:__anon1::videoDevice
setupDevice	cap_msmf.cpp	/^bool videoDevice::setupDevice(unsigned int w, unsigned int h, unsigned int idealFramerate)$/;"	f	class:__anon1::videoDevice
setupDevice	cap_msmf.cpp	/^bool videoInput::setupDevice(int deviceID, unsigned int id)$/;"	f	class:__anon1::videoInput
setupDevice	cap_msmf.cpp	/^bool videoInput::setupDevice(int deviceID, unsigned int w, unsigned int h, unsigned int idealFramerate)$/;"	f	class:__anon1::videoInput
setupDeviceFourcc	cap_dshow.cpp	/^bool videoInput::setupDeviceFourcc(int deviceNumber, int w, int h,int fourcc){$/;"	f	class:videoInput
setupStarted	cap_dshow.cpp	/^        bool setupStarted;$/;"	m	class:videoDevice	file:
sgCallback	cap_dshow.cpp	/^        SampleGrabberCallback * sgCallback;$/;"	m	class:videoDevice	file:
sgbrg2rgb24	cap_v4l.cpp	/^static void sgbrg2rgb24(long int WIDTH, long int HEIGHT, unsigned char *src, unsigned char *dst)$/;"	f	file:
shadowValue	cap_openni.cpp	/^    XnUInt64 shadowValue;$/;"	m	class:CvCapture_OpenNI	file:
shadowValue	cap_openni2.cpp	/^    int shadowValue;$/;"	m	class:CvCapture_OpenNI2	file:
shmPtr	cap_OPEL.cpp	/^					void* shmPtr;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
shmPtr_for_property	cap_OPEL.cpp	/^					void* shmPtr_for_property;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
shmPtr_for_status	cap_OPEL.cpp	/^					void* shmPtr_for_status;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
shmid	cap_OPEL.cpp	/^					int shmid;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
shmid_for_property	cap_OPEL.cpp	/^					int shmid_for_property;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
shmid_for_status	cap_OPEL.cpp	/^					int shmid_for_status;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
showSettingsWindow	cap_dshow.cpp	/^void videoInput::showSettingsWindow(int id){$/;"	f	class:videoInput
shutdownDevice	cap_unicap.cpp	/^bool CvCapture_Unicap::shutdownDevice() {$/;"	f	class:CvCapture_Unicap
sink	cap_gstreamer.cpp	/^    GstElement*   sink;$/;"	m	class:CvCapture_GStreamer	file:
sinkWriter	cap_msmf.cpp	/^    _ComPtr<IMFSinkWriter> sinkWriter;$/;"	m	class:CvVideoWriter_MSMF	file:
size	cap_qt.cpp	/^        CvSize             size;$/;"	m	struct:CvCapture_QT_Cam_barg	file:
size	cap_qt.cpp	/^        CvSize             size;$/;"	m	struct:CvCapture_QT_Cam_vdig	file:
size	cap_qt.cpp	/^    CvSize     size;               \/\/ dimensions of the movie$/;"	m	struct:CvCapture_QT_Movie	file:
size	cap_vfw.cpp	/^    CvSize              size;$/;"	m	class:CvCaptureAVI_VFW	file:
size	cap_winrt_capture.hpp	/^        CvSize                  size;$/;"	m	class:cv::VideoCapture_WinRT
size	cap_xine.cpp	/^    CvSize	size;$/;"	m	struct:CvCaptureAVI_XINE	file:
sizeSet	cap_dshow.cpp	/^        bool sizeSet;$/;"	m	class:videoDevice	file:
sizeof	cap_msmf.cpp	/^static_assert(sizeof(Guid) == sizeof(::_GUID), "Incorect size for Guid");$/;"	v
sizeof	cap_msmf.cpp	/^static_assert(sizeof(__rcGUID_t) == sizeof(::_GUID), "Incorect size for __rcGUID_t");$/;"	v
skipJunk	cap_mjpeg_decoder.cpp	/^void AviMjpegStream::skipJunk(RiffChunk& chunk, MjpegInputStream& in_str)$/;"	f	class:cv::AviMjpegStream
skipJunk	cap_mjpeg_decoder.cpp	/^void AviMjpegStream::skipJunk(RiffList& list, MjpegInputStream& in_str)$/;"	f	class:cv::AviMjpegStream
sl	cap_ffmpeg_impl.hpp	/^    OSSpinLock sl;$/;"	m	struct:ImplMutex::Impl
sl	cap_ffmpeg_impl.hpp	/^    pthread_mutex_t sl;$/;"	m	struct:ImplMutex::Impl
sl	cap_ffmpeg_impl.hpp	/^    pthread_spinlock_t sl;$/;"	m	struct:ImplMutex::Impl
small	precomp.hpp	73;"	d
sonix_decompress	cap_v4l.cpp	/^static int sonix_decompress(int width, int height, unsigned char *inp, unsigned char *outp)$/;"	f	file:
sonix_decompress_init	cap_v4l.cpp	/^static void sonix_decompress_init(void)$/;"	f	file:
source	cap_gstreamer.cpp	/^    GstElement* source;$/;"	m	class:CvVideoWriter_GStreamer	file:
specificFormat	cap_dshow.cpp	/^        bool specificFormat;$/;"	m	class:videoDevice	file:
spin	cap_openni.cpp	/^        void spin()$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizerBase
st	cap_OPEL.cpp	/^					status* st;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
start	cap_dshow.cpp	/^int videoInput::start(int deviceID, videoDevice *VD){$/;"	f	class:videoInput
start	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::start ()$/;"	f	class:CvCaptureCAM_Giganetix
start	cap_libv4l.cpp	/^  void *  start;$/;"	m	struct:buffer	file:
start	cap_msmf.cpp	/^void ImageGrabberThread::start()$/;"	f	class:__anon1::ImageGrabberThread
start	cap_openni.cpp	/^    void start()$/;"	f	class:ApproximateSyncGrabber
start	cap_v4l.cpp	/^  void *  start;$/;"	m	struct:buffer	file:
startCapture	cap_dc1394_v2.cpp	/^bool CvCaptureCAM_DC1394_v2_CPP::startCapture()$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
startCapture	cap_pvapi.cpp	/^bool CvCaptureCAM_PvAPI::startCapture()$/;"	f	class:CvCaptureCAM_PvAPI
startGrabbing	cap_msmf.cpp	/^HRESULT ImageGrabber::startGrabbing(void)$/;"	f	class:__anon1::ImageGrabber
startPipeline	cap_gstreamer.cpp	/^void CvCapture_GStreamer::startPipeline()$/;"	f	class:CvCapture_GStreamer
startWriteAVI	cap_mjpeg_encoder.cpp	/^    void startWriteAVI()$/;"	f	class:cv::mjpeg::MotionJpegWriter
startWriteChunk	cap_mjpeg_encoder.cpp	/^    void startWriteChunk(int fourcc)$/;"	f	class:cv::mjpeg::MotionJpegWriter
started	cap_dc1394_v2.cpp	/^    bool started;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
started	cap_winrt_capture.hpp	/^        bool                    started;$/;"	m	class:cv::VideoCapture_WinRT
status	cap_OPEL.cpp	/^typedef struct status$/;"	s	file:
status	cap_OPEL.cpp	/^}status;$/;"	t	typeref:struct:status	file:
statusMutex	cap_OPEL.cpp	/^					sem_t* statusMutex; $/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
std	ppltasks_winrt.hpp	/^namespace std$/;"	n
stdx	ppltasks_winrt.hpp	/^namespace stdx$/;"	n
step	cap_ffmpeg_impl.hpp	/^    int step;$/;"	m	struct:Image_FFMPEG
stop	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::stop ()$/;"	f	class:CvCaptureCAM_Giganetix
stop	cap_msmf.cpp	/^void ImageGrabberThread::stop()$/;"	f	class:__anon1::ImageGrabberThread
stopCapture	cap_pvapi.cpp	/^void CvCaptureCAM_PvAPI::stopCapture()$/;"	f	class:CvCaptureCAM_PvAPI
stopDevice	cap_dshow.cpp	/^void videoInput::stopDevice(int id){$/;"	f	class:videoInput
stopGrabbing	cap_msmf.cpp	/^void ImageGrabber::stopGrabbing()$/;"	f	class:__anon1::ImageGrabber
stopPipeline	cap_gstreamer.cpp	/^void CvCapture_GStreamer::stopPipeline()$/;"	f	class:CvCapture_GStreamer
storeConn	cap_dshow.cpp	/^        int  storeConn;$/;"	m	class:videoDevice	file:
stream	cap_xine.cpp	/^    xine_stream_t * stream;$/;"	m	struct:CvCaptureAVI_XINE	file:
streamConf	cap_dshow.cpp	/^        IAMStreamConfig *streamConf;$/;"	m	class:videoDevice	file:
streamIndex	cap_msmf.cpp	/^    DWORD  streamIndex;$/;"	m	class:CvVideoWriter_MSMF	file:
streams	cap_openni2.cpp	/^    openni::VideoStream depth, color, **streams;$/;"	m	class:CvCapture_OpenNI2	file:
strm	cap_mjpeg_encoder.cpp	/^    BitStream strm;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
swapInputBuffers	cap_winrt_bridge.cpp	/^void VideoioBridge::swapInputBuffers()$/;"	f	class:VideoioBridge
swapOutputBuffers	cap_winrt_bridge.cpp	/^void VideoioBridge::swapOutputBuffers()$/;"	f	class:VideoioBridge
synchronizer	cap_openni.cpp	/^        TBBApproximateSynchronizer synchronizer;$/;"	m	class:ApproximateSyncGrabber::TBBApproximateSynchronizerTask	file:
tCamera	cap_pvapi.cpp	/^    } tCamera;$/;"	t	class:CvCaptureCAM_PvAPI	typeref:struct:CvCaptureCAM_PvAPI::__anon2	file:
table	cap_v4l.cpp	/^static code_table_t table[256];$/;"	v	file:
tag	ffmpeg_codecs.hpp	/^    unsigned int tag;$/;"	m	struct:AVCodecTag
task	cap_openni.cpp	/^    TBBApproximateSynchronizerTask* task;$/;"	m	class:ApproximateSyncGrabber	file:
task	cap_openni.cpp	/^    cv::Ptr<ApproximateSynchronizer> task;$/;"	m	class:ApproximateSyncGrabber	file:
task	ppltasks_winrt.hpp	/^        explicit task(_Ty _Param)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^        explicit task(_Ty _Param, const task_options &_TaskOptions)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^        explicit task(_Ty _Param, const task_options& _TaskOptions = task_options())$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^    task() : _M_Impl(nullptr)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^    task() : _M_unitTask()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^    task(const task& _Other) : _M_Impl(_Other._M_Impl) {}$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^    task(const task& _Other) : _M_unitTask(_Other._M_unitTask){}$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^    task(task&& _Other) : _M_Impl(std::move(_Other._M_Impl)) {}$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^    task(task&& _Other) : _M_unitTask(std::move(_Other._M_unitTask)) {}$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
task	ppltasks_winrt.hpp	/^class task$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
task	ppltasks_winrt.hpp	/^class task<void>$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
task_completion_event	ppltasks_winrt.hpp	/^    task_completion_event() : _M_Impl(std::make_shared<details::_Task_completion_event_impl<_ResultType>>())$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
task_completion_event	ppltasks_winrt.hpp	/^class task_completion_event$/;"	c	namespace:Concurrency_winrt::details::_ContextCallback::details
task_completion_event	ppltasks_winrt.hpp	/^class task_completion_event<void>$/;"	c	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event
task_continuation_context	ppltasks_winrt.hpp	/^    task_continuation_context(bool _DeferCapture = false) : details::_ContextCallback(_DeferCapture)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_continuation_context
task_continuation_context	ppltasks_winrt.hpp	/^class task_continuation_context : public details::_ContextCallback$/;"	c	class:Concurrency_winrt::details::_ContextCallback
task_from_exception	ppltasks_winrt.hpp	/^task<_TaskType> task_from_exception(_ExType _Exception, const task_options& _TaskOptions = task_options())$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
task_from_result	ppltasks_winrt.hpp	/^inline task<bool> task_from_result(bool _Param)$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
task_from_result	ppltasks_winrt.hpp	/^inline task<void> task_from_result(const task_options& _TaskOptions = task_options())$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
task_from_result	ppltasks_winrt.hpp	/^task<_Ty> task_from_result(_Ty _Param, const task_options& _TaskOptions = task_options())$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_WhenAnyImpl
task_options	ppltasks_winrt.hpp	/^    task_options()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(Concurrency::cancellation_token _Token)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(Concurrency::cancellation_token _Token, task_continuation_context _ContinuationContext)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(Concurrency::scheduler_interface& _Scheduler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(Concurrency::scheduler_ptr _Scheduler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(const task_options& _TaskOptions)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(std::shared_ptr<_SchedType> _Scheduler)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^    task_options(task_continuation_context _ContinuationContext)$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_options
task_options	ppltasks_winrt.hpp	/^class task_options$/;"	c	class:Concurrency_winrt::details::_ContextCallback
task_status	ppltasks_winrt.hpp	/^typedef Concurrency::task_group_status task_status;$/;"	t	namespace:Concurrency_winrt
tellg	cap_mjpeg_decoder.cpp	/^uint64_t MjpegInputStream::tellg()$/;"	f	class:cv::MjpegInputStream
tempFrame	cap_vfw.cpp	/^    IplImage*     tempFrame;$/;"	m	class:CvVideoWriter_VFW	file:
temp_image	cap_ffmpeg_impl.hpp	/^    Image_FFMPEG      temp_image;$/;"	m	struct:CvVideoWriter_FFMPEG
timeout	cap_ximea.cpp	/^    int       timeout;$/;"	m	class:CvCaptureCAM_XIMEA	file:
timestamp	cap_libv4l.cpp	/^   struct timeval timestamp;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::timeval	file:
timestamp	cap_v4l.cpp	/^   struct timeval timestamp;$/;"	m	struct:CvCaptureCAM_V4L	typeref:struct:CvCaptureCAM_V4L::timeval	file:
toFraction	cap_gstreamer.cpp	/^void toFraction(double decimal, double &numerator, double &denominator)$/;"	f
top	cap_mjpeg_decoder.cpp	/^        short int top;$/;"	m	struct:cv::AviStreamHeader::__anon3	file:
track	cap_qt.cpp	/^    Track track;$/;"	m	struct:CvVideoWriter_QT	file:
true_type	ppltasks_winrt.hpp	/^    template <typename _ReturnType, typename _Function> auto _IsCallable(_Function _Func, int, ...) -> decltype(_Func(), std::true_type()) { (void)_Func; return std::true_type(); }$/;"	f	class:Concurrency_winrt::details::std
true_type	ppltasks_winrt.hpp	/^    template <typename _ReturnType, typename _Function> auto _IsCallable(_Function _Func, int, int, ...) -> decltype(_Func(stdx::declval<_ReturnType*>()), std::true_type()) { (void)_Func; return std::true_type(); }$/;"	f	class:Concurrency_winrt::details::std
true_type	ppltasks_winrt.hpp	/^    template <typename _ReturnType, typename _Function> auto _IsCallable(_Function _Func, int, int, int) -> decltype(_Func(stdx::declval<task<_ReturnType>*>()), std::true_type()) { (void)_Func; return std::true_type(); }$/;"	f	class:Concurrency_winrt::details::std
tryDiffSize	cap_dshow.cpp	/^        bool tryDiffSize;$/;"	m	class:videoDevice	file:
tryHeight	cap_dshow.cpp	/^        int tryHeight;$/;"	m	class:videoDevice	file:
tryVideoType	cap_dshow.cpp	/^        GUID tryVideoType;$/;"	m	class:videoDevice	file:
tryWidth	cap_dshow.cpp	/^        int tryWidth;$/;"	m	class:videoDevice	file:
try_init_v4l	cap_libv4l.cpp	/^static int try_init_v4l(CvCaptureCAM_V4L* capture, char *deviceName)$/;"	f	file:
try_init_v4l	cap_v4l.cpp	/^static int try_init_v4l(CvCaptureCAM_V4L* capture, char *deviceName)$/;"	f	file:
try_init_v4l2	cap_libv4l.cpp	/^static int try_init_v4l2(CvCaptureCAM_V4L* capture, char *deviceName)$/;"	f	file:
try_init_v4l2	cap_v4l.cpp	/^static int try_init_v4l2(CvCaptureCAM_V4L* capture, char *deviceName)$/;"	f	file:
try_palette	cap_v4l.cpp	/^try_palette(int fd,$/;"	f	file:
try_palette_v4l2	cap_v4l.cpp	/^static int try_palette_v4l2(CvCaptureCAM_V4L* capture, unsigned long colorspace)$/;"	f	file:
trylock	cap_ffmpeg_impl.hpp	/^    bool trylock() { return OSSpinLockTry(&sl); }$/;"	f	struct:ImplMutex::Impl
trylock	cap_ffmpeg_impl.hpp	/^    bool trylock() { return TryEnterCriticalSection(&cs) != 0; }$/;"	f	struct:ImplMutex::Impl
trylock	cap_ffmpeg_impl.hpp	/^    bool trylock() { return pthread_mutex_trylock(&sl) == 0; }$/;"	f	struct:ImplMutex::Impl
trylock	cap_ffmpeg_impl.hpp	/^    bool trylock() { return pthread_spin_trylock(&sl) == 0; }$/;"	f	struct:ImplMutex::Impl
trylock	cap_ffmpeg_impl.hpp	/^bool ImplMutex::trylock() { return impl->trylock(); }$/;"	f	class:ImplMutex
type	agile_wrl.hpp	/^            typedef T type;$/;"	t	struct:Details::__remove_hat
type	agile_wrl.hpp	/^            typename typedef __remove_hat<T>::type type;$/;"	t	struct:Details::AgileTypeHelper
type	cap_libv4l.cpp	/^   enum v4l2_buf_type type;$/;"	m	struct:CvCaptureCAM_V4L	typeref:enum:CvCaptureCAM_V4L::v4l2_buf_type	file:
type	cap_v4l.cpp	/^   enum v4l2_buf_type type;$/;"	m	struct:CvCaptureCAM_V4L	typeref:enum:CvCaptureCAM_V4L::v4l2_buf_type	file:
type	ppltasks_winrt.hpp	/^    auto _GetUnwrappedType(ABI::Windows::Foundation::IAsyncOperation<_Ty>*) -> typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationSelector(stdx::declval<ABI::Windows::Foundation::IAsyncOperation<_Ty>*>()))>::type;$/;"	m	class:Concurrency_winrt::details::ABI::Windows::Foundation::Internal::GetAbiType
type	ppltasks_winrt.hpp	/^    auto _GetUnwrappedType(ABI::Windows::Foundation::IAsyncOperationWithProgress<_Ty, _Progress>*) -> typename ABI::Windows::Foundation::Internal::GetAbiType<decltype(_UnwrapAsyncOperationWithProgressSelector(stdx::declval<ABI::Windows::Foundation::IAsyncOperationWithProgress<_Ty, _Progress>*>()))>::type;$/;"	m	class:Concurrency_winrt::details::ABI::Windows::Foundation::Internal::GetAbiType
typeLock	cap_msmf.cpp	/^    enum typeLock$/;"	g	class:__anon1::videoDevice	file:
uinit_Semaphore	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::uinit_Semaphore(void)$/;"	f	class:CvCaptureCAM_OPEL_CPP
uinit_SharedMemorySpace	cap_OPEL.cpp	/^bool CvCaptureCAM_OPEL_CPP::uinit_SharedMemorySpace()$/;"	f	class:CvCaptureCAM_OPEL_CPP
uncompressed	cap_vfw.cpp	/^    PAVISTREAM    uncompressed;$/;"	m	class:CvVideoWriter_VFW	file:
unlock	cap_ffmpeg_impl.hpp	/^    void unlock() { LeaveCriticalSection(&cs); }$/;"	f	struct:ImplMutex::Impl
unlock	cap_ffmpeg_impl.hpp	/^    void unlock() { OSSpinLockUnlock(&sl); }$/;"	f	struct:ImplMutex::Impl
unlock	cap_ffmpeg_impl.hpp	/^    void unlock() { pthread_mutex_unlock(&sl); }$/;"	f	struct:ImplMutex::Impl
unlock	cap_ffmpeg_impl.hpp	/^    void unlock() { pthread_spin_unlock(&sl); }$/;"	f	struct:ImplMutex::Impl
unlock	cap_ffmpeg_impl.hpp	/^void ImplMutex::unlock() { impl->unlock(); }$/;"	f	class:ImplMutex
updateFrameContainer	cap_winrt_bridge.cpp	/^void VideoioBridge::updateFrameContainer()$/;"	f	class:VideoioBridge
updateListOfDevices	cap_msmf.cpp	/^void videoInput::updateListOfDevices()$/;"	f	class:__anon1::videoInput
uridecodebin	cap_gstreamer.cpp	/^    GstElement*   uridecodebin;$/;"	m	class:CvCapture_GStreamer	file:
useCrossbar	cap_dshow.cpp	/^        bool useCrossbar;$/;"	m	class:videoDevice	file:
use_arbitrary	ppltasks_winrt.hpp	/^    static task_continuation_context use_arbitrary()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_continuation_context
use_current	ppltasks_winrt.hpp	/^    static task_continuation_context use_current()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_continuation_context
use_default	ppltasks_winrt.hpp	/^    static task_continuation_context use_default()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::task_continuation_context
userMode	cap_dc1394_v2.cpp	/^    int userMode;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
uyv2bgr	cap_dc1394.cpp	/^uyv2bgr(const unsigned char *src, unsigned char *dest,$/;"	f	file:
uyvy2bgr	cap_dc1394.cpp	/^uyvy2bgr(const unsigned char *src, unsigned char *dest,$/;"	f	file:
uyvy_to_rgb24	cap_v4l.cpp	/^uyvy_to_rgb24 (int width, int height, unsigned char *src, unsigned char *dst)$/;"	f	file:
uyyvyy2bgr	cap_dc1394.cpp	/^uyyvyy2bgr(const unsigned char *src, unsigned char *dest,$/;"	f	file:
v4l2_add_ctrl_range	cap_libv4l.cpp	/^static void v4l2_add_ctrl_range(CvCaptureCAM_V4L* capture, v4l2_control* ctrl) {$/;"	f	file:
v4l2_brightness	cap_v4l.cpp	/^   int v4l2_brightness, v4l2_brightness_min, v4l2_brightness_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_brightness_max	cap_v4l.cpp	/^   int v4l2_brightness, v4l2_brightness_min, v4l2_brightness_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_brightness_min	cap_v4l.cpp	/^   int v4l2_brightness, v4l2_brightness_min, v4l2_brightness_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_contrast	cap_v4l.cpp	/^   int v4l2_contrast, v4l2_contrast_min, v4l2_contrast_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_contrast_max	cap_v4l.cpp	/^   int v4l2_contrast, v4l2_contrast_min, v4l2_contrast_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_contrast_min	cap_v4l.cpp	/^   int v4l2_contrast, v4l2_contrast_min, v4l2_contrast_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_ctrl_count	cap_libv4l.cpp	/^   int v4l2_ctrl_count;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_ctrl_range	cap_libv4l.cpp	/^typedef struct v4l2_ctrl_range {$/;"	s	file:
v4l2_ctrl_range	cap_libv4l.cpp	/^} v4l2_ctrl_range;$/;"	t	typeref:struct:v4l2_ctrl_range	file:
v4l2_ctrl_ranges	cap_libv4l.cpp	/^   v4l2_ctrl_range** v4l2_ctrl_ranges;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_exposure	cap_v4l.cpp	/^   int v4l2_exposure, v4l2_exposure_min, v4l2_exposure_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_exposure_max	cap_v4l.cpp	/^   int v4l2_exposure, v4l2_exposure_min, v4l2_exposure_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_exposure_min	cap_v4l.cpp	/^   int v4l2_exposure, v4l2_exposure_min, v4l2_exposure_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_free_ranges	cap_libv4l.cpp	/^static void v4l2_free_ranges(CvCaptureCAM_V4L* capture) {$/;"	f	file:
v4l2_gain	cap_v4l.cpp	/^   int v4l2_gain, v4l2_gain_min, v4l2_gain_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_gain_max	cap_v4l.cpp	/^   int v4l2_gain, v4l2_gain_min, v4l2_gain_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_gain_min	cap_v4l.cpp	/^   int v4l2_gain, v4l2_gain_min, v4l2_gain_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_get_ctrl_default	cap_libv4l.cpp	/^static int v4l2_get_ctrl_default(CvCaptureCAM_V4L* capture, __u32 id) {$/;"	f	file:
v4l2_get_ctrl_max	cap_libv4l.cpp	/^static int v4l2_get_ctrl_max(CvCaptureCAM_V4L* capture, __u32 id) {$/;"	f	file:
v4l2_get_ctrl_min	cap_libv4l.cpp	/^static int v4l2_get_ctrl_min(CvCaptureCAM_V4L* capture, __u32 id) {$/;"	f	file:
v4l2_hue	cap_v4l.cpp	/^   int v4l2_hue, v4l2_hue_min, v4l2_hue_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_hue_max	cap_v4l.cpp	/^   int v4l2_hue, v4l2_hue_min, v4l2_hue_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_hue_min	cap_v4l.cpp	/^   int v4l2_hue, v4l2_hue_min, v4l2_hue_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_saturation	cap_v4l.cpp	/^   int v4l2_saturation, v4l2_saturation_min, v4l2_saturation_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_saturation_max	cap_v4l.cpp	/^   int v4l2_saturation, v4l2_saturation_min, v4l2_saturation_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_saturation_min	cap_v4l.cpp	/^   int v4l2_saturation, v4l2_saturation_min, v4l2_saturation_max;$/;"	m	struct:CvCaptureCAM_V4L	file:
v4l2_scan_controls	cap_libv4l.cpp	/^static void v4l2_scan_controls(CvCaptureCAM_V4L* capture) {$/;"	f	file:
v4l2_scan_controls	cap_v4l.cpp	/^static void v4l2_scan_controls(CvCaptureCAM_V4L* capture)$/;"	f	file:
val	cap_v4l.cpp	/^  int val;$/;"	m	struct:__anon6	file:
validProfile	cap_intelperc.cpp	/^bool IntelPerCStreamBase::validProfile(const PXCCapture::VideoStream::ProfileInfo& \/*pinfo*\/)$/;"	f	class:cv::IntelPerCStreamBase
validProfile	cap_intelperc.cpp	/^bool IntelPerCStreamDepth::validProfile(const PXCCapture::VideoStream::ProfileInfo& pinfo)$/;"	f	class:cv::IntelPerCStreamDepth
vd_CaptureFormats	cap_msmf.cpp	/^    std::map<UINT64, FrameRateMap> vd_CaptureFormats;$/;"	m	class:__anon1::videoDevice	file:
vd_CurrentFormats	cap_msmf.cpp	/^    std::vector<MediaType> vd_CurrentFormats;$/;"	m	class:__anon1::videoDevice	file:
vd_CurrentNumber	cap_msmf.cpp	/^    unsigned int vd_CurrentNumber;$/;"	m	class:__anon1::videoDevice	file:
vd_FrameRate	cap_msmf.cpp	/^    unsigned int vd_FrameRate;$/;"	m	class:__anon1::videoDevice	file:
vd_Height	cap_msmf.cpp	/^    unsigned int vd_Height;$/;"	m	class:__anon1::videoDevice	file:
vd_IsSetuped	cap_msmf.cpp	/^    bool vd_IsSetuped;$/;"	m	class:__anon1::videoDevice	file:
vd_LockOut	cap_msmf.cpp	/^    } vd_LockOut;$/;"	m	class:__anon1::videoDevice	typeref:enum:__anon1::videoDevice::typeLock	file:
vd_PrevParametrs	cap_msmf.cpp	/^    CamParametrs vd_PrevParametrs;$/;"	m	class:__anon1::videoDevice	file:
vd_Width	cap_msmf.cpp	/^    unsigned int vd_Width;$/;"	m	class:__anon1::videoDevice	file:
vd_cookie	cap_msmf.cpp	/^    EventRegistrationToken vd_cookie;$/;"	m	class:__anon1::videoDevice	file:
vd_func	cap_msmf.cpp	/^    emergensyStopEventCallback vd_func;$/;"	m	class:__anon1::videoDevice	file:
vd_lock	cap_msmf.cpp	/^    Concurrency::critical_section vd_lock;$/;"	m	class:__anon1::videoDevice	file:
vd_pAction	cap_msmf.cpp	/^    MAKE_WRL_REF(_AsyncAction) vd_pAction;$/;"	m	class:__anon1::videoDevice	file:
vd_pFriendlyName	cap_msmf.cpp	/^    wchar_t *vd_pFriendlyName;$/;"	m	class:__anon1::videoDevice	file:
vd_pImGr	cap_msmf.cpp	/^    ImageGrabberWinRT *vd_pImGr;$/;"	m	class:__anon1::videoDevice	file:
vd_pImGrTh	cap_msmf.cpp	/^    ImageGrabberThread *vd_pImGrTh;$/;"	m	class:__anon1::videoDevice	file:
vd_pMedCap	cap_msmf.cpp	/^    MAKE_WRL_AGILE_REF(_MediaCapture) vd_pMedCap;$/;"	m	class:__anon1::videoDevice	file:
vd_pSource	cap_msmf.cpp	/^    IMFMediaSource *vd_pSource;$/;"	m	class:__anon1::videoDevice	file:
vd_userData	cap_msmf.cpp	/^    void *vd_userData;$/;"	m	class:__anon1::videoDevice	file:
vds_Devices	cap_msmf.cpp	/^    std::vector<videoDevice *> vds_Devices;$/;"	m	class:__anon1::videoDevices	file:
vds_enumTask	cap_msmf.cpp	/^    MAKE_WRL_REF(_AsyncAction) vds_enumTask;$/;"	m	class:__anon1::videoDevices	file:
vectorNum	cap_msmf.cpp	/^typedef std::vector<int> vectorNum;$/;"	t	namespace:__anon1	file:
verbose	cap_msmf.cpp	/^    bool verbose;$/;"	m	class:__anon1::DPO	file:
video	cap_qt.cpp	/^    Media video;$/;"	m	struct:CvVideoWriter_QT	file:
videoDevice	cap_dshow.cpp	/^class videoDevice{$/;"	c	file:
videoDevice	cap_dshow.cpp	/^videoDevice::videoDevice(){$/;"	f	class:videoDevice
videoDevice	cap_msmf.cpp	/^class videoDevice$/;"	c	namespace:__anon1	file:
videoDevice	cap_msmf.cpp	/^videoDevice::videoDevice(void): vd_IsSetuped(false), vd_LockOut(OpenLock), vd_pFriendlyName(NULL),$/;"	f	class:__anon1::videoDevice
videoDevices	cap_msmf.cpp	/^class videoDevices$/;"	c	namespace:__anon1	file:
videoDevices	cap_msmf.cpp	/^videoDevices::videoDevices(void): count(0)$/;"	f	class:__anon1::videoDevices
videoFileSource	cap_msmf.cpp	/^    IMFMediaSource* videoFileSource;$/;"	m	class:CvCaptureFile_MSMF	file:
videoHeight	cap_msmf.cpp	/^    UINT32 videoHeight;$/;"	m	class:CvVideoWriter_MSMF	file:
videoInput	cap_dshow.cpp	/^class videoInput{$/;"	c	file:
videoInput	cap_dshow.cpp	/^videoInput::videoInput(){$/;"	f	class:videoInput
videoInput	cap_msmf.cpp	/^class videoInput$/;"	c	namespace:__anon1	file:
videoInput	cap_msmf.cpp	/^videoInput::videoInput(void): accessToDevices(false)$/;"	f	class:__anon1::videoInput
videoMode	cap_dc1394_v2.cpp	/^    int videoMode;$/;"	m	class:CvCaptureCAM_DC1394_v2_CPP	file:
videoSize	cap_dshow.cpp	/^        int videoSize;$/;"	m	class:videoDevice	file:
videoType	cap_dshow.cpp	/^        GUID videoType;$/;"	m	class:videoDevice	file:
videoWidth	cap_msmf.cpp	/^    UINT32 videoWidth;$/;"	m	class:CvVideoWriter_MSMF	file:
video_st	cap_ffmpeg_impl.hpp	/^    AVStream        * video_st;$/;"	m	struct:CvCapture_FFMPEG
video_st	cap_ffmpeg_impl.hpp	/^    AVStream        * video_st;$/;"	m	struct:CvVideoWriter_FFMPEG
video_st_	cap_ffmpeg_impl.hpp	/^    AVStream* video_st_;$/;"	m	struct:OutputMediaStream_FFMPEG
video_stream	cap_ffmpeg_impl.hpp	/^    int               video_stream;$/;"	m	struct:CvCapture_FFMPEG
video_stream_id_	cap_ffmpeg_impl.hpp	/^    int video_stream_id_;$/;"	m	struct:InputMediaStream_FFMPEG
videodev	cap_dc1394.cpp	/^static const char * videodev[4]={$/;"	v	file:
vo_port	cap_xine.cpp	/^    xine_video_port_t * vo_port;$/;"	m	struct:CvCaptureAVI_XINE	file:
wDeviceName	cap_dshow.cpp	/^        WCHAR wDeviceName[255];$/;"	m	class:videoDevice	file:
wait	ppltasks_winrt.hpp	/^    task_status wait() const$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task
waitForDevice	cap_msmf.cpp	/^    void waitForDevice()$/;"	f	class:__anon1::videoDevice
waitForDevice	cap_msmf.cpp	/^void videoInput::waitForDevice(int deviceID)$/;"	f	class:__anon1::videoInput
waitInit	cap_msmf.cpp	/^    void waitInit() {$/;"	f	class:__anon1::videoDevices
what	cap_gphoto2.cpp	/^    virtual const char * what() const throw ()$/;"	f	class:cv::gphoto2::GPhoto2Exception
widgetDescription	cap_gphoto2.cpp	/^int DigitalCameraCapture::widgetDescription(std::ostream &os,$/;"	f	class:cv::gphoto2::DigitalCameraCapture
widgetInfo	cap_gphoto2.cpp	/^    std::string widgetInfo; \/\/ CV_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
widgets	cap_gphoto2.cpp	/^    std::map<int, CameraWidget *> widgets;$/;"	m	class:cv::gphoto2::DigitalCameraCapture	file:
width	cap_OPEL.cpp	/^					int width, height;$/;"	m	class:CvCaptureCAM_OPEL_CPP	file:
width	cap_OPEL.cpp	/^	int width;$/;"	m	struct:property	file:
width	cap_dshow.cpp	/^        int width;$/;"	m	class:videoDevice	file:
width	cap_ffmpeg_impl.hpp	/^    int width;$/;"	m	struct:Image_FFMPEG
width	cap_gstreamer.cpp	/^    gint          width;$/;"	m	class:CvCapture_GStreamer	file:
width	cap_libv4l.cpp	/^    int width; int height;$/;"	m	struct:CvCaptureCAM_V4L	file:
width	cap_mjpeg_encoder.cpp	/^    int width, height, channels;$/;"	m	class:cv::mjpeg::MotionJpegWriter	file:
width	cap_msmf.cpp	/^    int index, width, height, fourcc;$/;"	m	class:CvCaptureCAM_MSMF	file:
width	cap_msmf.cpp	/^    unsigned int width;$/;"	m	struct:__anon1::MediaType	file:
width	cap_vfw.cpp	/^    int width, height;$/;"	m	class:CvCaptureCAM_VFW	file:
width	cap_winrt_bridge.hpp	/^    int deviceIndex, width, height;$/;"	m	class:VideoioBridge
width	cap_winrt_video.hpp	/^    unsigned int			width, height;$/;"	m	class:Video
widthSet	cap_vfw.cpp	/^    int widthSet, heightSet;$/;"	m	class:CvCaptureCAM_VFW	file:
winrt_array_type	cap_msmf.hpp	/^struct winrt_array_type$/;"	s
winrt_imshow	cap_winrt_capture.cpp	/^    void winrt_imshow()$/;"	f	namespace:cv
winrt_onVisibilityChanged	cap_winrt_capture.cpp	/^    void winrt_onVisibilityChanged(bool visible)$/;"	f	namespace:cv
winrt_prop_type	cap_msmf.hpp	/^struct winrt_prop_type {};$/;"	s
winrt_prop_type	cap_msmf.hpp	/^struct winrt_prop_type<ABI::Windows::Foundation::PropertyType_Empty> {$/;"	s
winrt_prop_type	cap_msmf.hpp	/^struct winrt_prop_type<ABI::Windows::Foundation::PropertyType_OtherType> {$/;"	s
winrt_prop_type	cap_msmf.hpp	/^struct winrt_prop_type<ABI::Windows::Foundation::PropertyType_OtherTypeArray> {$/;"	s
winrt_startMessageLoop	cap_winrt_capture.cpp	/^    void winrt_startMessageLoop(std::function<void(Args...)>&& callback, Args... args)$/;"	f	namespace:cv
winrt_startMessageLoop	cap_winrt_capture.cpp	/^    void winrt_startMessageLoop(void callback(Args...), Args... args)$/;"	f	namespace:cv
winrt_type	cap_msmf.hpp	/^struct winrt_type$/;"	s
winrt_type	cap_msmf.hpp	/^struct winrt_type<_Type, false>$/;"	s
winrt_type	cap_msmf.hpp	/^struct winrt_type<_Type, true>$/;"	s
winrt_type	cap_msmf.hpp	/^struct winrt_type<void>$/;"	s
write	cap.cpp	/^void VideoWriter::write(const Mat& image)$/;"	f	class:cv::VideoWriter
write	cap_ffmpeg_impl.hpp	/^void OutputMediaStream_FFMPEG::write(unsigned char* data, int size, int keyFrame)$/;"	f	class:OutputMediaStream_FFMPEG
write	cap_mjpeg_encoder.cpp	/^    void write(InputArray _img)$/;"	f	class:cv::mjpeg::MotionJpegWriter
writeBlock	cap_mjpeg_encoder.cpp	/^    void writeBlock()$/;"	f	class:cv::mjpeg::BitStream
writeFrame	cap_ffmpeg.cpp	/^    virtual bool writeFrame( const IplImage* image )$/;"	f	class:CvVideoWriter_FFMPEG_proxy
writeFrame	cap_ffmpeg_impl.hpp	/^bool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int cn, int origin )$/;"	f	class:CvVideoWriter_FFMPEG
writeFrame	cap_gstreamer.cpp	/^bool CvVideoWriter_GStreamer::writeFrame( const IplImage * image )$/;"	f	class:CvVideoWriter_GStreamer
writeFrame	cap_images.cpp	/^bool CvVideoWriter_Images::writeFrame( const IplImage* image )$/;"	f	class:CvVideoWriter_Images
writeFrame	cap_msmf.cpp	/^bool CvVideoWriter_MSMF::writeFrame(const IplImage* img)$/;"	f	class:CvVideoWriter_MSMF
writeFrame	cap_qt.cpp	/^bool CvVideoWriter_QT_CPP::writeFrame( const IplImage* image )$/;"	f	class:CvVideoWriter_QT_CPP
writeFrame	cap_vfw.cpp	/^bool CvVideoWriter_VFW::writeFrame( const IplImage* image )$/;"	f	class:CvVideoWriter_VFW
writeFrame	precomp.hpp	/^    virtual bool writeFrame(const IplImage*) { return false; }$/;"	f	struct:CvVideoWriter
writeFrameData	cap_mjpeg_encoder.cpp	/^void MotionJpegWriter::writeFrameData( const uchar* data, int step, int colorspace, int input_channels )$/;"	f	class:cv::mjpeg::MotionJpegWriter
writeIndex	cap_mjpeg_encoder.cpp	/^    void writeIndex()$/;"	f	class:cv::mjpeg::MotionJpegWriter
writeStreamHeader	cap_mjpeg_encoder.cpp	/^    void writeStreamHeader()$/;"	f	class:cv::mjpeg::MotionJpegWriter
write_OutputMediaStream_FFMPEG	cap_ffmpeg_impl.hpp	/^void write_OutputMediaStream_FFMPEG(struct OutputMediaStream_FFMPEG* stream, unsigned char* data, int size, int keyFrame)$/;"	f
writerQT	cap_qt.cpp	/^    CvVideoWriter_QT* writerQT;$/;"	m	class:CvVideoWriter_QT_CPP	file:
wrprDeviceDisconnect	cap_giganetix.cpp	/^wrprDeviceDisconnect ( gige::IDevice& device )$/;"	f
wrprDeviceIsConnect	cap_giganetix.cpp	/^wrprDeviceIsConnect( gige::IDevice& device )$/;"	f
wrprDeviceIsValid	cap_giganetix.cpp	/^wrprDeviceIsValid( gige::IDevice& device )$/;"	f
wrprExitGigEVisionAPI	cap_giganetix.cpp	/^wrprExitGigEVisionAPI()$/;"	f
wrprGetGigEVisionAPI	cap_giganetix.cpp	/^wrprGetGigEVisionAPI()$/;"	f
wrprInitGigEVisionAPI	cap_giganetix.cpp	/^wrprInitGigEVisionAPI()$/;"	f
wrprUnregisterCallback	cap_giganetix.cpp	/^wrprUnregisterCallback( const gige::IGigEVisionAPI* api, gige::ICallbackEvent* eventHandler)$/;"	f
xine	cap_xine.cpp	/^    xine_t * xine;$/;"	m	struct:CvCaptureAVI_XINE	file:
xine_frame	cap_xine.cpp	/^    xine_video_frame_t xine_frame;$/;"	m	struct:CvCaptureAVI_XINE	file:
xioctl	cap_libv4l.cpp	/^static int xioctl( int fd, unsigned long request, void *arg)$/;"	f	file:
y162bgr	cap_dc1394.cpp	/^y162bgr(const unsigned char *src, unsigned char *dest,$/;"	f	file:
y2bgr	cap_dc1394.cpp	/^y2bgr(const unsigned char *src, unsigned char *dest,$/;"	f	file:
y_b	cap_mjpeg_encoder.cpp	/^static const int y_b = fix(0.114, fixc);$/;"	m	namespace:cv::mjpeg	file:
y_g	cap_mjpeg_encoder.cpp	/^static const int y_g = fix(0.587, fixc);$/;"	m	namespace:cv::mjpeg	file:
y_r	cap_mjpeg_encoder.cpp	/^static const int y_r = fix(0.299, fixc);$/;"	m	namespace:cv::mjpeg	file:
yuv411p_to_rgb24	cap_v4l.cpp	/^yuv411p_to_rgb24(int width, int height,$/;"	f	file:
yuv420_to_rgb24	cap_v4l.cpp	/^yuv420_to_rgb24(int width, int height,$/;"	f	file:
yuv420p_to_rgb24	cap_v4l.cpp	/^yuv420p_to_rgb24(int width, int height,$/;"	f	file:
yuv_frame	cap_xine.cpp	/^    IplImage	* yuv_frame;$/;"	m	struct:CvCaptureAVI_XINE	file:
yuyv_to_rgb24	cap_v4l.cpp	/^yuyv_to_rgb24 (int width, int height, unsigned char *src, unsigned char *dst)$/;"	f	file:
zigzag	cap_mjpeg_encoder.cpp	/^static const uchar zigzag[] =$/;"	m	namespace:cv::mjpeg	file:
~AgileHelper	agile_wrl.hpp	/^            ~AgileHelper()$/;"	f	class:Details::AgileHelper
~ApproximateSynchronizerBase	cap_openni.cpp	/^        virtual ~ApproximateSynchronizerBase() {}$/;"	f	class:ApproximateSyncGrabber::ApproximateSynchronizerBase
~AutoMF	cap_winrt/MFIncludes.hpp	/^    ~AutoMF()$/;"	f	class:AutoMF
~BitStream	cap_mjpeg_encoder.cpp	/^    ~BitStream()$/;"	f	class:cv::mjpeg::BitStream
~CBaseAttributes	cap_msmf.hpp	/^    virtual ~CBaseAttributes()$/;"	f	class:CBaseAttributes
~CaptureFrameGrabber	cap_winrt/CaptureFrameGrabber.cpp	/^Media::CaptureFrameGrabber::~CaptureFrameGrabber()$/;"	f	class:Media::CaptureFrameGrabber
~ComPtr	cap_msmf.hpp	/^    virtual ~ComPtr()$/;"	f	class:ComPtr
~ComPtrList	cap_msmf.hpp	/^    ~ComPtrList()$/;"	f	class:ComPtrList
~CvCapture	precomp.hpp	/^    virtual ~CvCapture() {}$/;"	f	struct:CvCapture
~CvCaptureAVI_VFW	cap_vfw.cpp	/^    virtual ~CvCaptureAVI_VFW()$/;"	f	class:CvCaptureAVI_VFW
~CvCaptureAVI_XINE_CPP	cap_xine.cpp	/^    virtual ~CvCaptureAVI_XINE_CPP() { close(); }$/;"	f	class:CvCaptureAVI_XINE_CPP
~CvCaptureCAM_CMU	cap_cmu.cpp	/^    virtual ~CvCaptureCAM_CMU()$/;"	f	class:CvCaptureCAM_CMU
~CvCaptureCAM_DC1394_CPP	cap_dc1394.cpp	/^    virtual ~CvCaptureCAM_DC1394_CPP() { close(); }$/;"	f	class:CvCaptureCAM_DC1394_CPP
~CvCaptureCAM_DC1394_v2_CPP	cap_dc1394_v2.cpp	/^    virtual ~CvCaptureCAM_DC1394_v2_CPP()$/;"	f	class:CvCaptureCAM_DC1394_v2_CPP
~CvCaptureCAM_Giganetix	cap_giganetix.cpp	/^CvCaptureCAM_Giganetix::~CvCaptureCAM_Giganetix()$/;"	f	class:CvCaptureCAM_Giganetix
~CvCaptureCAM_MSMF	cap_msmf.cpp	/^CvCaptureCAM_MSMF::~CvCaptureCAM_MSMF()$/;"	f	class:CvCaptureCAM_MSMF
~CvCaptureCAM_OPEL_CPP	cap_OPEL.cpp	/^CvCaptureCAM_OPEL_CPP::~CvCaptureCAM_OPEL_CPP()$/;"	f	class:CvCaptureCAM_OPEL_CPP
~CvCaptureCAM_PvAPI	cap_pvapi.cpp	/^    virtual ~CvCaptureCAM_PvAPI()$/;"	f	class:CvCaptureCAM_PvAPI
~CvCaptureCAM_V4L_CPP	cap_libv4l.cpp	/^    virtual ~CvCaptureCAM_V4L_CPP() { close(); }$/;"	f	class:CvCaptureCAM_V4L_CPP
~CvCaptureCAM_V4L_CPP	cap_v4l.cpp	/^    virtual ~CvCaptureCAM_V4L_CPP() { close(); }$/;"	f	class:CvCaptureCAM_V4L_CPP
~CvCaptureCAM_VFW	cap_vfw.cpp	/^    virtual ~CvCaptureCAM_VFW() { close(); }$/;"	f	class:CvCaptureCAM_VFW
~CvCaptureCAM_XIMEA	cap_ximea.cpp	/^    virtual ~CvCaptureCAM_XIMEA() { close(); }$/;"	f	class:CvCaptureCAM_XIMEA
~CvCaptureFile_MSMF	cap_msmf.cpp	/^CvCaptureFile_MSMF::~CvCaptureFile_MSMF()$/;"	f	class:CvCaptureFile_MSMF
~CvCapture_FFMPEG_proxy	cap_ffmpeg.cpp	/^    virtual ~CvCapture_FFMPEG_proxy() { close(); }$/;"	f	class:CvCapture_FFMPEG_proxy
~CvCapture_GStreamer	cap_gstreamer.cpp	/^    virtual ~CvCapture_GStreamer() { close(); }$/;"	f	class:CvCapture_GStreamer
~CvCapture_Images	cap_images.cpp	/^    virtual ~CvCapture_Images()$/;"	f	class:CvCapture_Images
~CvCapture_OpenNI	cap_openni.cpp	/^CvCapture_OpenNI::~CvCapture_OpenNI()$/;"	f	class:CvCapture_OpenNI
~CvCapture_OpenNI2	cap_openni2.cpp	/^CvCapture_OpenNI2::~CvCapture_OpenNI2()$/;"	f	class:CvCapture_OpenNI2
~CvCapture_QT_Cam_CPP	cap_qt.cpp	/^    virtual ~CvCapture_QT_Cam_CPP() { close(); }$/;"	f	class:CvCapture_QT_Cam_CPP
~CvCapture_QT_Movie_CPP	cap_qt.cpp	/^    virtual ~CvCapture_QT_Movie_CPP() { close(); }$/;"	f	class:CvCapture_QT_Movie_CPP
~CvCapture_Unicap	cap_unicap.cpp	/^  virtual ~CvCapture_Unicap() { close(); }$/;"	f	struct:CvCapture_Unicap
~CvDC1394	cap_dc1394_v2.cpp	/^CvDC1394::~CvDC1394()$/;"	f	class:CvDC1394
~CvVideoWriter	precomp.hpp	/^    virtual ~CvVideoWriter() {}$/;"	f	struct:CvVideoWriter
~CvVideoWriter_FFMPEG_proxy	cap_ffmpeg.cpp	/^    virtual ~CvVideoWriter_FFMPEG_proxy() { close(); }$/;"	f	class:CvVideoWriter_FFMPEG_proxy
~CvVideoWriter_GStreamer	cap_gstreamer.cpp	/^    virtual ~CvVideoWriter_GStreamer() { close(); }$/;"	f	class:CvVideoWriter_GStreamer
~CvVideoWriter_Images	cap_images.cpp	/^    virtual ~CvVideoWriter_Images() { close(); }$/;"	f	class:CvVideoWriter_Images
~CvVideoWriter_MSMF	cap_msmf.cpp	/^CvVideoWriter_MSMF::~CvVideoWriter_MSMF()$/;"	f	class:CvVideoWriter_MSMF
~CvVideoWriter_QT_CPP	cap_qt.cpp	/^    virtual ~CvVideoWriter_QT_CPP() { close(); }$/;"	f	class:CvVideoWriter_QT_CPP
~CvVideoWriter_VFW	cap_vfw.cpp	/^    virtual ~CvVideoWriter_VFW() { close(); }$/;"	f	class:CvVideoWriter_VFW
~DPO	cap_msmf.cpp	/^DPO::~DPO(void)$/;"	f	class:__anon1::DPO
~DigitalCameraCapture	cap_gphoto2.cpp	/^DigitalCameraCapture::~DigitalCameraCapture()$/;"	f	class:cv::gphoto2::DigitalCameraCapture
~FormatReader	cap_msmf.cpp	/^FormatReader::~FormatReader(void)$/;"	f	class:__anon1::FormatReader
~IVideoCapture	precomp.hpp	/^        virtual ~IVideoCapture() {}$/;"	f	class:cv::IVideoCapture
~IVideoWriter	precomp.hpp	/^        virtual ~IVideoWriter() {}$/;"	f	class:cv::IVideoWriter
~ImageGrabber	cap_msmf.cpp	/^ImageGrabber::~ImageGrabber(void)$/;"	f	class:__anon1::ImageGrabber
~ImageGrabberThread	cap_msmf.cpp	/^ImageGrabberThread::~ImageGrabberThread(void)$/;"	f	class:__anon1::ImageGrabberThread
~ImageGrabberWinRT	cap_msmf.cpp	/^ImageGrabberWinRT::~ImageGrabberWinRT(void)$/;"	f	class:__anon1::ImageGrabberWinRT
~ImplMutex	cap_ffmpeg_impl.hpp	/^    ~ImplMutex() { destroy(); }$/;"	f	class:ImplMutex
~IntelPerCStreamBase	cap_intelperc.cpp	/^IntelPerCStreamBase::~IntelPerCStreamBase()$/;"	f	class:cv::IntelPerCStreamBase
~IntelPerCStreamDepth	cap_intelperc.cpp	/^IntelPerCStreamDepth::~IntelPerCStreamDepth()$/;"	f	class:cv::IntelPerCStreamDepth
~IntelPerCStreamImage	cap_intelperc.cpp	/^IntelPerCStreamImage::~IntelPerCStreamImage()$/;"	f	class:cv::IntelPerCStreamImage
~InternalFFMpegRegister	cap_ffmpeg_impl.hpp	/^    ~InternalFFMpegRegister()$/;"	f	class:InternalFFMpegRegister
~List	cap_msmf.hpp	/^    virtual ~List()$/;"	f	class:List
~MediaSink	cap_msmf.hpp	/^    virtual ~MediaSink() {$/;"	f	class:MediaSink
~MediaType	cap_msmf.cpp	/^MediaType::~MediaType()$/;"	f	class:__anon1::MediaType
~Media_Foundation	cap_msmf.cpp	/^Media_Foundation::~Media_Foundation(void)$/;"	f	class:__anon1::Media_Foundation
~MjpegInputStream	cap_mjpeg_decoder.cpp	/^MjpegInputStream::~MjpegInputStream()$/;"	f	class:cv::MjpegInputStream
~MotionJpegCapture	cap_mjpeg_decoder.cpp	/^MotionJpegCapture::~MotionJpegCapture()$/;"	f	class:cv::MotionJpegCapture
~MotionJpegWriter	cap_mjpeg_encoder.cpp	/^    ~MotionJpegWriter() { close(); }$/;"	f	class:cv::mjpeg::MotionJpegWriter
~RawImage	cap_msmf.cpp	/^RawImage::~RawImage(void)$/;"	f	class:__anon1::RawImage
~SampleGrabberCallback	cap_dshow.cpp	/^    virtual ~SampleGrabberCallback(){$/;"	f	class:SampleGrabberCallback
~StreamSink	cap_msmf.hpp	/^    virtual ~StreamSink() {$/;"	f	class:StreamSink
~VideoCapture	cap.cpp	/^VideoCapture::~VideoCapture()$/;"	f	class:cv::VideoCapture
~VideoCapture_DShow	cap_dshow.cpp	/^VideoCapture_DShow::~VideoCapture_DShow()$/;"	f	class:cv::VideoCapture_DShow
~VideoCapture_IntelPerC	cap_intelperc.cpp	/^VideoCapture_IntelPerC::~VideoCapture_IntelPerC(){}$/;"	f	class:cv::VideoCapture_IntelPerC
~VideoCapture_WinRT	cap_winrt_capture.hpp	/^        virtual ~VideoCapture_WinRT() {}$/;"	f	class:cv::VideoCapture_WinRT
~VideoWriter	cap.cpp	/^VideoWriter::~VideoWriter()$/;"	f	class:cv::VideoWriter
~_ContextCallback	ppltasks_winrt.hpp	/^        ~_ContextCallback()$/;"	f	class:Concurrency_winrt::details::_ContextCallback
~_ContinuationTaskHandle	ppltasks_winrt.hpp	/^        virtual ~_ContinuationTaskHandle() {}$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_ContinuationTaskHandle
~_ContinuationTaskHandleBase	ppltasks_winrt.hpp	/^        virtual ~_ContinuationTaskHandleBase() {}$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::_ContinuationTaskHandleBase
~_Holder	ppltasks_winrt.hpp	/^            ~_Holder()$/;"	f	struct:Concurrency_winrt::details::_TaskProcThunk::_Holder
~_InitialTaskHandle	ppltasks_winrt.hpp	/^        virtual ~_InitialTaskHandle() {}$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::task::_InitialTaskHandle
~_ProgressDispatcher	ppltasks_winrt.hpp	/^        virtual ~_ProgressDispatcher()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressDispatcher
~_ProgressDispatcherBase	ppltasks_winrt.hpp	/^        virtual ~_ProgressDispatcherBase()$/;"	f	class:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_ProgressDispatcherBase
~_RunAnyParam	ppltasks_winrt.hpp	/^        ~_RunAnyParam()$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_RunAllParam::details::_RunAnyParam
~_Task_generator_oversubscriber	ppltasks_winrt.hpp	/^        ~_Task_generator_oversubscriber()$/;"	f	struct:Concurrency_winrt::details::_ContextCallback::details::task_completion_event::details::_Task_generator_oversubscriber
~icvInitFFMPEG	cap_ffmpeg.cpp	/^    ~icvInitFFMPEG()$/;"	f	class:icvInitFFMPEG	file:
~videoDevice	cap_dshow.cpp	/^videoDevice::~videoDevice(){$/;"	f	class:videoDevice
~videoDevice	cap_msmf.cpp	/^videoDevice::~videoDevice(void)$/;"	f	class:__anon1::videoDevice
~videoDevices	cap_msmf.cpp	/^videoDevices::~videoDevices(void)$/;"	f	class:__anon1::videoDevices
~videoInput	cap_dshow.cpp	/^videoInput::~videoInput(){$/;"	f	class:videoInput
~videoInput	cap_msmf.cpp	/^videoInput::~videoInput(void)$/;"	f	class:__anon1::videoInput
